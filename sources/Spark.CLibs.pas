
{==============================================================================
  ____                   _    
 / ___| _ __   __ _ _ __| | __
 \___ \| '_ \ / _` | '__| |/ /
  ___) | |_) | (_| | |  |   < 
 |____/| .__/ \__,_|_|  |_|\_\
       |_|  Game Library™

 Copyright © 2021-2022 tinyBigGAMES™ LLC
 All Rights Reserved.

 Website: https://tinybiggames.com
 Email  : support@tinybiggames.com

 Redistribution and use in source and binary forms, with or without
 modification, are permitted provided that the following conditions are met:

 1. The origin of this software must not be misrepresented; you must not
    claim that you wrote the original software. If you use this software in
    a product, an acknowledgment in the product documentation would be
    appreciated but is not required.
 2. Redistributions of source code must retain the above copyright
    notice, this list of conditions and the following disclaimer.

 3. Redistributions in binary form must reproduce the above copyright
    notice, this list of conditions and the following disclaimer in
    the documentation and/or other materials provided with the
    distribution.

 4. Neither the name of the copyright holder nor the names of its
    contributors may be used to endorse or promote products derived
    from this software without specific prior written permission.

 5. All video, audio, graphics and other content accessed through the
    software in this distro is the property of the applicable content owner
    and may be protected by applicable copyright law. This License gives
    Customer no rights to such content, and Company disclaims any liability
    for misuse of content.

 THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 POSSIBILITY OF SUCH DAMAGE.
============================================================================= }

{$IFNDEF WIN64}
  {$MESSAGE Error 'Unsupported platform'}
{$ENDIF}

{$Z4}
{$A8}

unit Spark.CLibs;

interface

uses
  WinAPI.Windows;

const
  NK_INCLUDE_STANDARD_BOOL = 1;
  NK_INCLUDE_FIXED_TYPES = 1;
  NK_INCLUDE_STANDARD_IO = 1;
  NK_INCLUDE_STANDARD_VARARGS = 1;
  NK_INCLUDE_DEFAULT_ALLOCATOR = 1;
  NK_INCLUDE_FONT_BAKING = 1;
  NK_INCLUDE_DEFAULT_FONT = 1;
  NK_INCLUDE_SOFTWARE_FONT = 1;
  INT32_MIN = (-2147483647-1);
  _ALLEGRO_UNSTABLE_BIT_SET = INT32_MIN;
  ALLEGRO_VERSION = 5;
  ALLEGRO_SUB_VERSION = 2;
  ALLEGRO_WIP_VERSION = 8;
  ALLEGRO_UNSTABLE_BIT = _ALLEGRO_UNSTABLE_BIT_SET;
  ALLEGRO_RELEASE_NUMBER = 0;
  ALLEGRO_VERSION_STR = '5.2.8 (GIT)';
  ALLEGRO_DATE_STR = '2021';
  ALLEGRO_DATE = 20210307;
  ALLEGRO_VERSION_INT = ((ALLEGRO_VERSION shl 24) or (ALLEGRO_SUB_VERSION shl 16) or (ALLEGRO_WIP_VERSION shl 8) or ALLEGRO_RELEASE_NUMBER or ALLEGRO_UNSTABLE_BIT);
  ALLEGRO_PI = 3.14159265358979323846;
  ALLEGRO_NATIVE_PATH_SEP = '\';
  ALLEGRO_NATIVE_DRIVE_SEP = ':';
  ALLEGRO_NEW_WINDOW_TITLE_MAX_SIZE = 255;
  EOF = (-1);
  _AL_MAX_JOYSTICK_AXES = 3;
  _AL_MAX_JOYSTICK_STICKS = 16;
  _AL_MAX_JOYSTICK_BUTTONS = 32;
  ALLEGRO_MOUSE_MAX_EXTRA_AXES = 4;
  ALLEGRO_TOUCH_INPUT_MAX_TOUCH_COUNT = 16;
  ALLEGRO_SHADER_VAR_COLOR = 'al_color';
  ALLEGRO_SHADER_VAR_POS = 'al_pos';
  ALLEGRO_SHADER_VAR_PROJVIEW_MATRIX = 'al_projview_matrix';
  ALLEGRO_SHADER_VAR_TEX = 'al_tex';
  ALLEGRO_SHADER_VAR_TEXCOORD = 'al_texcoord';
  ALLEGRO_SHADER_VAR_TEX_MATRIX = 'al_tex_matrix';
  ALLEGRO_SHADER_VAR_USER_ATTR = 'al_user_attr_';
  ALLEGRO_SHADER_VAR_USE_TEX = 'al_use_tex';
  ALLEGRO_SHADER_VAR_USE_TEX_MATRIX = 'al_use_tex_matrix';
  ALLEGRO_SHADER_VAR_ALPHA_TEST = 'al_alpha_test';
  ALLEGRO_SHADER_VAR_ALPHA_FUNCTION = 'al_alpha_func';
  ALLEGRO_SHADER_VAR_ALPHA_TEST_VALUE = 'al_alpha_test_val';
  ALLEGRO_MAX_CHANNELS = 8;
  ALLEGRO_AUDIO_PAN_NONE = (-1000.0);
  ALLEGRO_VERTEX_CACHE_SIZE = 256;
  ALLEGRO_PRIM_QUALITY = 10;
  ALLEGRO_TTF_NO_KERNING = 1;
  ALLEGRO_TTF_MONOCHROME = 2;
  ALLEGRO_TTF_NO_AUTOHINT = 4;
  PHYSFS_VER_MAJOR = 3;
  PHYSFS_VER_MINOR = 0;
  PHYSFS_VER_PATCH = 2;
  NK_UNDEFINED = (-1.0);
  NK_UTF_INVALID = $FFFD;
  NK_UTF_SIZE = 4;
  NK_INPUT_MAX = 16;
  NK_MAX_NUMBER_BUFFER = 64;
  NK_SCROLLBAR_HIDING_TIMEOUT = 4.0;
  NK_TEXTEDIT_UNDOSTATECOUNT = 99;
  NK_TEXTEDIT_UNDOCHARCOUNT = 999;
  NK_MAX_LAYOUT_ROW_TEMPLATE_COLUMNS = 16;
  NK_CHART_MAX_SLOT = 4;
  NK_WINDOW_MAX_NAME = 64;
  NK_BUTTON_BEHAVIOR_STACK_SIZE = 8;
  NK_FONT_STACK_SIZE = 8;
  NK_STYLE_ITEM_STACK_SIZE = 16;
  NK_FLOAT_STACK_SIZE = 32;
  NK_VECTOR_STACK_SIZE = 16;
  NK_FLAGS_STACK_SIZE = 32;
  NK_COLOR_STACK_SIZE = 32;
  NK_PI = 3.141592654;
  NK_MAX_FLOAT_PRECISION = 2;
  Z_BZIP2ED = 12;
  ZIP_OK = (0);
  ZIP_EOF = (0);
  ZIP_ERRNO = (-1);
  ZIP_PARAMERROR = (-102);
  ZIP_BADZIPFILE = (-103);
  ZIP_INTERNALERROR = (-104);
  Z_DEFLATED = 8;
  Z_DEFAULT_STRATEGY = 0;
  APPEND_STATUS_CREATE = (0);
  APPEND_STATUS_CREATEAFTER = (1);
  APPEND_STATUS_ADDINZIP = (2);
  ALLEGRO_PIXEL_FORMAT_ANY = 0;
  ALLEGRO_PIXEL_FORMAT_ANY_NO_ALPHA = 1;
  ALLEGRO_PIXEL_FORMAT_ANY_WITH_ALPHA = 2;
  ALLEGRO_PIXEL_FORMAT_ANY_15_NO_ALPHA = 3;
  ALLEGRO_PIXEL_FORMAT_ANY_16_NO_ALPHA = 4;
  ALLEGRO_PIXEL_FORMAT_ANY_16_WITH_ALPHA = 5;
  ALLEGRO_PIXEL_FORMAT_ANY_24_NO_ALPHA = 6;
  ALLEGRO_PIXEL_FORMAT_ANY_32_NO_ALPHA = 7;
  ALLEGRO_PIXEL_FORMAT_ANY_32_WITH_ALPHA = 8;
  ALLEGRO_PIXEL_FORMAT_ARGB_8888 = 9;
  ALLEGRO_PIXEL_FORMAT_RGBA_8888 = 10;
  ALLEGRO_PIXEL_FORMAT_ARGB_4444 = 11;
  ALLEGRO_PIXEL_FORMAT_RGB_888 = 12;
  ALLEGRO_PIXEL_FORMAT_RGB_565 = 13;
  ALLEGRO_PIXEL_FORMAT_RGB_555 = 14;
  ALLEGRO_PIXEL_FORMAT_RGBA_5551 = 15;
  ALLEGRO_PIXEL_FORMAT_ARGB_1555 = 16;
  ALLEGRO_PIXEL_FORMAT_ABGR_8888 = 17;
  ALLEGRO_PIXEL_FORMAT_XBGR_8888 = 18;
  ALLEGRO_PIXEL_FORMAT_BGR_888 = 19;
  ALLEGRO_PIXEL_FORMAT_BGR_565 = 20;
  ALLEGRO_PIXEL_FORMAT_BGR_555 = 21;
  ALLEGRO_PIXEL_FORMAT_RGBX_8888 = 22;
  ALLEGRO_PIXEL_FORMAT_XRGB_8888 = 23;
  ALLEGRO_PIXEL_FORMAT_ABGR_F32 = 24;
  ALLEGRO_PIXEL_FORMAT_ABGR_8888_LE = 25;
  ALLEGRO_PIXEL_FORMAT_RGBA_4444 = 26;
  ALLEGRO_PIXEL_FORMAT_SINGLE_CHANNEL_8 = 27;
  ALLEGRO_PIXEL_FORMAT_COMPRESSED_RGBA_DXT1 = 28;
  ALLEGRO_PIXEL_FORMAT_COMPRESSED_RGBA_DXT3 = 29;
  ALLEGRO_PIXEL_FORMAT_COMPRESSED_RGBA_DXT5 = 30;
  ALLEGRO_NUM_PIXEL_FORMATS = 31;
  ALLEGRO_MEMORY_BITMAP = 1;
  _ALLEGRO_KEEP_BITMAP_FORMAT = 2;
  ALLEGRO_FORCE_LOCKING = 4;
  ALLEGRO_NO_PRESERVE_TEXTURE = 8;
  _ALLEGRO_ALPHA_TEST = 16;
  _ALLEGRO_INTERNAL_OPENGL = 32;
  ALLEGRO_MIN_LINEAR = 64;
  ALLEGRO_MAG_LINEAR = 128;
  ALLEGRO_MIPMAP = 256;
  _ALLEGRO_NO_PREMULTIPLIED_ALPHA = 512;
  ALLEGRO_VIDEO_BITMAP = 1024;
  ALLEGRO_CONVERT_BITMAP = 4096;
  ALLEGRO_FLIP_HORIZONTAL = 1;
  ALLEGRO_FLIP_VERTICAL = 2;
  ALLEGRO_SEEK_SET = 0;
  ALLEGRO_SEEK_CUR = 1;
  ALLEGRO_SEEK_END = 2;
  ALLEGRO_KEEP_BITMAP_FORMAT = 2;
  ALLEGRO_NO_PREMULTIPLIED_ALPHA = 512;
  ALLEGRO_KEEP_INDEX = 2048;
  ALLEGRO_LOCK_READWRITE = 0;
  ALLEGRO_LOCK_READONLY = 1;
  ALLEGRO_LOCK_WRITEONLY = 2;
  ALLEGRO_ZERO = 0;
  ALLEGRO_ONE = 1;
  ALLEGRO_ALPHA = 2;
  ALLEGRO_INVERSE_ALPHA = 3;
  ALLEGRO_SRC_COLOR = 4;
  ALLEGRO_DEST_COLOR = 5;
  ALLEGRO_INVERSE_SRC_COLOR = 6;
  ALLEGRO_INVERSE_DEST_COLOR = 7;
  ALLEGRO_CONST_COLOR = 8;
  ALLEGRO_INVERSE_CONST_COLOR = 9;
  ALLEGRO_NUM_BLEND_MODES = 10;
  ALLEGRO_ADD = 0;
  ALLEGRO_SRC_MINUS_DEST = 1;
  ALLEGRO_DEST_MINUS_SRC = 2;
  ALLEGRO_NUM_BLEND_OPERATIONS = 3;
  ALLEGRO_EVENT_JOYSTICK_AXIS = 1;
  ALLEGRO_EVENT_JOYSTICK_BUTTON_DOWN = 2;
  ALLEGRO_EVENT_JOYSTICK_BUTTON_UP = 3;
  ALLEGRO_EVENT_JOYSTICK_CONFIGURATION = 4;
  ALLEGRO_EVENT_KEY_DOWN = 10;
  ALLEGRO_EVENT_KEY_CHAR = 11;
  ALLEGRO_EVENT_KEY_UP = 12;
  ALLEGRO_EVENT_MOUSE_AXES = 20;
  ALLEGRO_EVENT_MOUSE_BUTTON_DOWN = 21;
  ALLEGRO_EVENT_MOUSE_BUTTON_UP = 22;
  ALLEGRO_EVENT_MOUSE_ENTER_DISPLAY = 23;
  ALLEGRO_EVENT_MOUSE_LEAVE_DISPLAY = 24;
  ALLEGRO_EVENT_MOUSE_WARPED = 25;
  ALLEGRO_EVENT_TIMER = 30;
  ALLEGRO_EVENT_DISPLAY_EXPOSE = 40;
  ALLEGRO_EVENT_DISPLAY_RESIZE = 41;
  ALLEGRO_EVENT_DISPLAY_CLOSE = 42;
  ALLEGRO_EVENT_DISPLAY_LOST = 43;
  ALLEGRO_EVENT_DISPLAY_FOUND = 44;
  ALLEGRO_EVENT_DISPLAY_SWITCH_IN = 45;
  ALLEGRO_EVENT_DISPLAY_SWITCH_OUT = 46;
  ALLEGRO_EVENT_DISPLAY_ORIENTATION = 47;
  ALLEGRO_EVENT_DISPLAY_HALT_DRAWING = 48;
  ALLEGRO_EVENT_DISPLAY_RESUME_DRAWING = 49;
  ALLEGRO_EVENT_TOUCH_BEGIN = 50;
  ALLEGRO_EVENT_TOUCH_END = 51;
  ALLEGRO_EVENT_TOUCH_MOVE = 52;
  ALLEGRO_EVENT_TOUCH_CANCEL = 53;
  ALLEGRO_EVENT_DISPLAY_CONNECTED = 60;
  ALLEGRO_EVENT_DISPLAY_DISCONNECTED = 61;
  ALLEGRO_WINDOWED = 1;
  ALLEGRO_FULLSCREEN = 2;
  ALLEGRO_OPENGL = 4;
  ALLEGRO_DIRECT3D_INTERNAL = 8;
  ALLEGRO_RESIZABLE = 16;
  ALLEGRO_FRAMELESS = 32;
  ALLEGRO_NOFRAME = 32;
  ALLEGRO_GENERATE_EXPOSE_EVENTS = 64;
  ALLEGRO_OPENGL_3_0 = 128;
  ALLEGRO_OPENGL_FORWARD_COMPATIBLE = 256;
  ALLEGRO_FULLSCREEN_WINDOW = 512;
  ALLEGRO_MINIMIZED = 1024;
  ALLEGRO_PROGRAMMABLE_PIPELINE = 2048;
  ALLEGRO_GTK_TOPLEVEL_INTERNAL = 4096;
  ALLEGRO_MAXIMIZED = 8192;
  ALLEGRO_OPENGL_ES_PROFILE = 16384;
  ALLEGRO_OPENGL_CORE_PROFILE = 32768;
  ALLEGRO_RED_SIZE = 0;
  ALLEGRO_GREEN_SIZE = 1;
  ALLEGRO_BLUE_SIZE = 2;
  ALLEGRO_ALPHA_SIZE = 3;
  ALLEGRO_RED_SHIFT = 4;
  ALLEGRO_GREEN_SHIFT = 5;
  ALLEGRO_BLUE_SHIFT = 6;
  ALLEGRO_ALPHA_SHIFT = 7;
  ALLEGRO_ACC_RED_SIZE = 8;
  ALLEGRO_ACC_GREEN_SIZE = 9;
  ALLEGRO_ACC_BLUE_SIZE = 10;
  ALLEGRO_ACC_ALPHA_SIZE = 11;
  ALLEGRO_STEREO = 12;
  ALLEGRO_AUX_BUFFERS = 13;
  ALLEGRO_COLOR_SIZE = 14;
  ALLEGRO_DEPTH_SIZE = 15;
  ALLEGRO_STENCIL_SIZE = 16;
  ALLEGRO_SAMPLE_BUFFERS = 17;
  ALLEGRO_SAMPLES = 18;
  ALLEGRO_RENDER_METHOD = 19;
  ALLEGRO_FLOAT_COLOR = 20;
  ALLEGRO_FLOAT_DEPTH = 21;
  ALLEGRO_SINGLE_BUFFER = 22;
  ALLEGRO_SWAP_METHOD = 23;
  ALLEGRO_COMPATIBLE_DISPLAY = 24;
  ALLEGRO_UPDATE_DISPLAY_REGION = 25;
  ALLEGRO_VSYNC = 26;
  ALLEGRO_MAX_BITMAP_SIZE = 27;
  ALLEGRO_SUPPORT_NPOT_BITMAP = 28;
  ALLEGRO_CAN_DRAW_INTO_BITMAP = 29;
  ALLEGRO_SUPPORT_SEPARATE_ALPHA = 30;
  ALLEGRO_AUTO_CONVERT_BITMAPS = 31;
  ALLEGRO_SUPPORTED_ORIENTATIONS = 32;
  ALLEGRO_OPENGL_MAJOR_VERSION = 33;
  ALLEGRO_OPENGL_MINOR_VERSION = 34;
  ALLEGRO_DISPLAY_OPTIONS_COUNT = 35;
  ALLEGRO_DONTCARE = 0;
  ALLEGRO_REQUIRE = 1;
  ALLEGRO_SUGGEST = 2;
  ALLEGRO_DISPLAY_ORIENTATION_UNKNOWN = 0;
  ALLEGRO_DISPLAY_ORIENTATION_0_DEGREES = 1;
  ALLEGRO_DISPLAY_ORIENTATION_90_DEGREES = 2;
  ALLEGRO_DISPLAY_ORIENTATION_180_DEGREES = 4;
  ALLEGRO_DISPLAY_ORIENTATION_270_DEGREES = 8;
  ALLEGRO_DISPLAY_ORIENTATION_PORTRAIT = 5;
  ALLEGRO_DISPLAY_ORIENTATION_LANDSCAPE = 10;
  ALLEGRO_DISPLAY_ORIENTATION_ALL = 15;
  ALLEGRO_DISPLAY_ORIENTATION_FACE_UP = 16;
  ALLEGRO_DISPLAY_ORIENTATION_FACE_DOWN = 32;
  _ALLEGRO_PRIM_MAX_USER_ATTR = 10;
  ALLEGRO_FILEMODE_READ = 1;
  ALLEGRO_FILEMODE_WRITE = 2;
  ALLEGRO_FILEMODE_EXECUTE = 4;
  ALLEGRO_FILEMODE_HIDDEN = 8;
  ALLEGRO_FILEMODE_ISFILE = 16;
  ALLEGRO_FILEMODE_ISDIR = 32;
  ALLEGRO_FOR_EACH_FS_ENTRY_ERROR = -1;
  ALLEGRO_FOR_EACH_FS_ENTRY_OK = 0;
  ALLEGRO_FOR_EACH_FS_ENTRY_SKIP = 1;
  ALLEGRO_FOR_EACH_FS_ENTRY_STOP = 2;
  ALLEGRO_JOYFLAG_DIGITAL = 1;
  ALLEGRO_JOYFLAG_ANALOGUE = 2;
  ALLEGRO_KEY_A = 1;
  ALLEGRO_KEY_B = 2;
  ALLEGRO_KEY_C = 3;
  ALLEGRO_KEY_D = 4;
  ALLEGRO_KEY_E = 5;
  ALLEGRO_KEY_F = 6;
  ALLEGRO_KEY_G = 7;
  ALLEGRO_KEY_H = 8;
  ALLEGRO_KEY_I = 9;
  ALLEGRO_KEY_J = 10;
  ALLEGRO_KEY_K = 11;
  ALLEGRO_KEY_L = 12;
  ALLEGRO_KEY_M = 13;
  ALLEGRO_KEY_N = 14;
  ALLEGRO_KEY_O = 15;
  ALLEGRO_KEY_P = 16;
  ALLEGRO_KEY_Q = 17;
  ALLEGRO_KEY_R = 18;
  ALLEGRO_KEY_S = 19;
  ALLEGRO_KEY_T = 20;
  ALLEGRO_KEY_U = 21;
  ALLEGRO_KEY_V = 22;
  ALLEGRO_KEY_W = 23;
  ALLEGRO_KEY_X = 24;
  ALLEGRO_KEY_Y = 25;
  ALLEGRO_KEY_Z = 26;
  ALLEGRO_KEY_0 = 27;
  ALLEGRO_KEY_1 = 28;
  ALLEGRO_KEY_2 = 29;
  ALLEGRO_KEY_3 = 30;
  ALLEGRO_KEY_4 = 31;
  ALLEGRO_KEY_5 = 32;
  ALLEGRO_KEY_6 = 33;
  ALLEGRO_KEY_7 = 34;
  ALLEGRO_KEY_8 = 35;
  ALLEGRO_KEY_9 = 36;
  ALLEGRO_KEY_PAD_0 = 37;
  ALLEGRO_KEY_PAD_1 = 38;
  ALLEGRO_KEY_PAD_2 = 39;
  ALLEGRO_KEY_PAD_3 = 40;
  ALLEGRO_KEY_PAD_4 = 41;
  ALLEGRO_KEY_PAD_5 = 42;
  ALLEGRO_KEY_PAD_6 = 43;
  ALLEGRO_KEY_PAD_7 = 44;
  ALLEGRO_KEY_PAD_8 = 45;
  ALLEGRO_KEY_PAD_9 = 46;
  ALLEGRO_KEY_F1 = 47;
  ALLEGRO_KEY_F2 = 48;
  ALLEGRO_KEY_F3 = 49;
  ALLEGRO_KEY_F4 = 50;
  ALLEGRO_KEY_F5 = 51;
  ALLEGRO_KEY_F6 = 52;
  ALLEGRO_KEY_F7 = 53;
  ALLEGRO_KEY_F8 = 54;
  ALLEGRO_KEY_F9 = 55;
  ALLEGRO_KEY_F10 = 56;
  ALLEGRO_KEY_F11 = 57;
  ALLEGRO_KEY_F12 = 58;
  ALLEGRO_KEY_ESCAPE = 59;
  ALLEGRO_KEY_TILDE = 60;
  ALLEGRO_KEY_MINUS = 61;
  ALLEGRO_KEY_EQUALS = 62;
  ALLEGRO_KEY_BACKSPACE = 63;
  ALLEGRO_KEY_TAB = 64;
  ALLEGRO_KEY_OPENBRACE = 65;
  ALLEGRO_KEY_CLOSEBRACE = 66;
  ALLEGRO_KEY_ENTER = 67;
  ALLEGRO_KEY_SEMICOLON = 68;
  ALLEGRO_KEY_QUOTE = 69;
  ALLEGRO_KEY_BACKSLASH = 70;
  ALLEGRO_KEY_BACKSLASH2 = 71;
  ALLEGRO_KEY_COMMA = 72;
  ALLEGRO_KEY_FULLSTOP = 73;
  ALLEGRO_KEY_SLASH = 74;
  ALLEGRO_KEY_SPACE = 75;
  ALLEGRO_KEY_INSERT = 76;
  ALLEGRO_KEY_DELETE = 77;
  ALLEGRO_KEY_HOME = 78;
  ALLEGRO_KEY_END = 79;
  ALLEGRO_KEY_PGUP = 80;
  ALLEGRO_KEY_PGDN = 81;
  ALLEGRO_KEY_LEFT = 82;
  ALLEGRO_KEY_RIGHT = 83;
  ALLEGRO_KEY_UP = 84;
  ALLEGRO_KEY_DOWN = 85;
  ALLEGRO_KEY_PAD_SLASH = 86;
  ALLEGRO_KEY_PAD_ASTERISK = 87;
  ALLEGRO_KEY_PAD_MINUS = 88;
  ALLEGRO_KEY_PAD_PLUS = 89;
  ALLEGRO_KEY_PAD_DELETE = 90;
  ALLEGRO_KEY_PAD_ENTER = 91;
  ALLEGRO_KEY_PRINTSCREEN = 92;
  ALLEGRO_KEY_PAUSE = 93;
  ALLEGRO_KEY_ABNT_C1 = 94;
  ALLEGRO_KEY_YEN = 95;
  ALLEGRO_KEY_KANA = 96;
  ALLEGRO_KEY_CONVERT = 97;
  ALLEGRO_KEY_NOCONVERT = 98;
  ALLEGRO_KEY_AT = 99;
  ALLEGRO_KEY_CIRCUMFLEX = 100;
  ALLEGRO_KEY_COLON2 = 101;
  ALLEGRO_KEY_KANJI = 102;
  ALLEGRO_KEY_PAD_EQUALS = 103;
  ALLEGRO_KEY_BACKQUOTE = 104;
  ALLEGRO_KEY_SEMICOLON2 = 105;
  ALLEGRO_KEY_COMMAND = 106;
  ALLEGRO_KEY_BACK = 107;
  ALLEGRO_KEY_VOLUME_UP = 108;
  ALLEGRO_KEY_VOLUME_DOWN = 109;
  ALLEGRO_KEY_SEARCH = 110;
  ALLEGRO_KEY_DPAD_CENTER = 111;
  ALLEGRO_KEY_BUTTON_X = 112;
  ALLEGRO_KEY_BUTTON_Y = 113;
  ALLEGRO_KEY_DPAD_UP = 114;
  ALLEGRO_KEY_DPAD_DOWN = 115;
  ALLEGRO_KEY_DPAD_LEFT = 116;
  ALLEGRO_KEY_DPAD_RIGHT = 117;
  ALLEGRO_KEY_SELECT = 118;
  ALLEGRO_KEY_START = 119;
  ALLEGRO_KEY_BUTTON_L1 = 120;
  ALLEGRO_KEY_BUTTON_R1 = 121;
  ALLEGRO_KEY_BUTTON_L2 = 122;
  ALLEGRO_KEY_BUTTON_R2 = 123;
  ALLEGRO_KEY_BUTTON_A = 124;
  ALLEGRO_KEY_BUTTON_B = 125;
  ALLEGRO_KEY_THUMBL = 126;
  ALLEGRO_KEY_THUMBR = 127;
  ALLEGRO_KEY_UNKNOWN = 128;
  ALLEGRO_KEY_MODIFIERS = 215;
  ALLEGRO_KEY_LSHIFT = 215;
  ALLEGRO_KEY_RSHIFT = 216;
  ALLEGRO_KEY_LCTRL = 217;
  ALLEGRO_KEY_RCTRL = 218;
  ALLEGRO_KEY_ALT = 219;
  ALLEGRO_KEY_ALTGR = 220;
  ALLEGRO_KEY_LWIN = 221;
  ALLEGRO_KEY_RWIN = 222;
  ALLEGRO_KEY_MENU = 223;
  ALLEGRO_KEY_SCROLLLOCK = 224;
  ALLEGRO_KEY_NUMLOCK = 225;
  ALLEGRO_KEY_CAPSLOCK = 226;
  ALLEGRO_KEY_MAX = 227;
  ALLEGRO_KEYMOD_SHIFT = 1;
  ALLEGRO_KEYMOD_CTRL = 2;
  ALLEGRO_KEYMOD_ALT = 4;
  ALLEGRO_KEYMOD_LWIN = 8;
  ALLEGRO_KEYMOD_RWIN = 16;
  ALLEGRO_KEYMOD_MENU = 32;
  ALLEGRO_KEYMOD_ALTGR = 64;
  ALLEGRO_KEYMOD_COMMAND = 128;
  ALLEGRO_KEYMOD_SCROLLLOCK = 256;
  ALLEGRO_KEYMOD_NUMLOCK = 512;
  ALLEGRO_KEYMOD_CAPSLOCK = 1024;
  ALLEGRO_KEYMOD_INALTSEQ = 2048;
  ALLEGRO_KEYMOD_ACCENT1 = 4096;
  ALLEGRO_KEYMOD_ACCENT2 = 8192;
  ALLEGRO_KEYMOD_ACCENT3 = 16384;
  ALLEGRO_KEYMOD_ACCENT4 = 32768;
  ALLEGRO_MOUSE_EMULATION_NONE = 0;
  ALLEGRO_MOUSE_EMULATION_TRANSPARENT = 1;
  ALLEGRO_MOUSE_EMULATION_INCLUSIVE = 2;
  ALLEGRO_MOUSE_EMULATION_EXCLUSIVE = 3;
  ALLEGRO_MOUSE_EMULATION_5_0_x = 4;
  ALLEGRO_HAPTIC_RUMBLE = 1;
  ALLEGRO_HAPTIC_PERIODIC = 2;
  ALLEGRO_HAPTIC_CONSTANT = 4;
  ALLEGRO_HAPTIC_SPRING = 8;
  ALLEGRO_HAPTIC_FRICTION = 16;
  ALLEGRO_HAPTIC_DAMPER = 32;
  ALLEGRO_HAPTIC_INERTIA = 64;
  ALLEGRO_HAPTIC_RAMP = 128;
  ALLEGRO_HAPTIC_SQUARE = 256;
  ALLEGRO_HAPTIC_TRIANGLE = 512;
  ALLEGRO_HAPTIC_SINE = 1024;
  ALLEGRO_HAPTIC_SAW_UP = 2048;
  ALLEGRO_HAPTIC_SAW_DOWN = 4096;
  ALLEGRO_HAPTIC_CUSTOM = 8192;
  ALLEGRO_HAPTIC_GAIN = 16384;
  ALLEGRO_HAPTIC_ANGLE = 32768;
  ALLEGRO_HAPTIC_RADIUS = 65536;
  ALLEGRO_HAPTIC_AZIMUTH = 131072;
  ALLEGRO_HAPTIC_AUTOCENTER = 262144;
  ALLEGRO_DEFAULT_DISPLAY_ADAPTER = -1;
  ALLEGRO_SYSTEM_MOUSE_CURSOR_NONE = 0;
  ALLEGRO_SYSTEM_MOUSE_CURSOR_DEFAULT = 1;
  ALLEGRO_SYSTEM_MOUSE_CURSOR_ARROW = 2;
  ALLEGRO_SYSTEM_MOUSE_CURSOR_BUSY = 3;
  ALLEGRO_SYSTEM_MOUSE_CURSOR_QUESTION = 4;
  ALLEGRO_SYSTEM_MOUSE_CURSOR_EDIT = 5;
  ALLEGRO_SYSTEM_MOUSE_CURSOR_MOVE = 6;
  ALLEGRO_SYSTEM_MOUSE_CURSOR_RESIZE_N = 7;
  ALLEGRO_SYSTEM_MOUSE_CURSOR_RESIZE_W = 8;
  ALLEGRO_SYSTEM_MOUSE_CURSOR_RESIZE_S = 9;
  ALLEGRO_SYSTEM_MOUSE_CURSOR_RESIZE_E = 10;
  ALLEGRO_SYSTEM_MOUSE_CURSOR_RESIZE_NW = 11;
  ALLEGRO_SYSTEM_MOUSE_CURSOR_RESIZE_SW = 12;
  ALLEGRO_SYSTEM_MOUSE_CURSOR_RESIZE_SE = 13;
  ALLEGRO_SYSTEM_MOUSE_CURSOR_RESIZE_NE = 14;
  ALLEGRO_SYSTEM_MOUSE_CURSOR_PROGRESS = 15;
  ALLEGRO_SYSTEM_MOUSE_CURSOR_PRECISION = 16;
  ALLEGRO_SYSTEM_MOUSE_CURSOR_LINK = 17;
  ALLEGRO_SYSTEM_MOUSE_CURSOR_ALT_SELECT = 18;
  ALLEGRO_SYSTEM_MOUSE_CURSOR_UNAVAILABLE = 19;
  ALLEGRO_NUM_SYSTEM_MOUSE_CURSORS = 20;
  ALLEGRO_ALPHA_TEST = 16;
  ALLEGRO_WRITE_MASK = 17;
  ALLEGRO_DEPTH_TEST = 18;
  ALLEGRO_DEPTH_FUNCTION = 19;
  ALLEGRO_ALPHA_FUNCTION = 20;
  ALLEGRO_ALPHA_TEST_VALUE = 21;
  ALLEGRO_RENDER_NEVER = 0;
  ALLEGRO_RENDER_ALWAYS = 1;
  ALLEGRO_RENDER_LESS = 2;
  ALLEGRO_RENDER_EQUAL = 3;
  ALLEGRO_RENDER_LESS_EQUAL = 4;
  ALLEGRO_RENDER_GREATER = 5;
  ALLEGRO_RENDER_NOT_EQUAL = 6;
  ALLEGRO_RENDER_GREATER_EQUAL = 7;
  ALLEGRO_MASK_RED = 1;
  ALLEGRO_MASK_GREEN = 2;
  ALLEGRO_MASK_BLUE = 4;
  ALLEGRO_MASK_ALPHA = 8;
  ALLEGRO_MASK_DEPTH = 16;
  ALLEGRO_MASK_RGB = 7;
  ALLEGRO_MASK_RGBA = 15;
  ALLEGRO_VERTEX_SHADER = 1;
  ALLEGRO_PIXEL_SHADER = 2;
  ALLEGRO_SHADER_AUTO = 0;
  ALLEGRO_SHADER_GLSL = 1;
  ALLEGRO_SHADER_HLSL = 2;
  ALLEGRO_SYSTEM_ID_UNKNOWN = 0;
  ALLEGRO_SYSTEM_ID_XGLX = 1481067608;
  ALLEGRO_SYSTEM_ID_WINDOWS = 1464421956;
  ALLEGRO_SYSTEM_ID_MACOSX = 1330862112;
  ALLEGRO_SYSTEM_ID_ANDROID = 1095648338;
  ALLEGRO_SYSTEM_ID_IPHONE = 1229998159;
  ALLEGRO_SYSTEM_ID_GP2XWIZ = 1464424992;
  ALLEGRO_SYSTEM_ID_RASPBERRYPI = 1380012880;
  ALLEGRO_SYSTEM_ID_SDL = 1396984882;
  ALLEGRO_RESOURCES_PATH = 0;
  ALLEGRO_TEMP_PATH = 1;
  ALLEGRO_USER_DATA_PATH = 2;
  ALLEGRO_USER_HOME_PATH = 3;
  ALLEGRO_USER_SETTINGS_PATH = 4;
  ALLEGRO_USER_DOCUMENTS_PATH = 5;
  ALLEGRO_EXENAME_PATH = 6;
  ALLEGRO_LAST_PATH = 7;
  ALLEGRO_STATE_NEW_DISPLAY_PARAMETERS = 1;
  ALLEGRO_STATE_NEW_BITMAP_PARAMETERS = 2;
  ALLEGRO_STATE_DISPLAY = 4;
  ALLEGRO_STATE_TARGET_BITMAP = 8;
  ALLEGRO_STATE_BLENDER = 16;
  ALLEGRO_STATE_NEW_FILE_INTERFACE = 32;
  ALLEGRO_STATE_TRANSFORM = 64;
  ALLEGRO_STATE_PROJECTION_TRANSFORM = 256;
  ALLEGRO_STATE_BITMAP = 10;
  ALLEGRO_STATE_ALL = 65535;
  _KCM_STREAM_FEEDER_QUIT_EVENT_TYPE = 512;
  ALLEGRO_EVENT_AUDIO_STREAM_FRAGMENT = 513;
  ALLEGRO_EVENT_AUDIO_STREAM_FINISHED = 514;
  ALLEGRO_EVENT_AUDIO_RECORDER_FRAGMENT = 515;
  ALLEGRO_AUDIO_DEPTH_INT8 = 0;
  ALLEGRO_AUDIO_DEPTH_INT16 = 1;
  ALLEGRO_AUDIO_DEPTH_INT24 = 2;
  ALLEGRO_AUDIO_DEPTH_FLOAT32 = 3;
  ALLEGRO_AUDIO_DEPTH_UNSIGNED = 8;
  ALLEGRO_AUDIO_DEPTH_UINT8 = 8;
  ALLEGRO_AUDIO_DEPTH_UINT16 = 9;
  ALLEGRO_AUDIO_DEPTH_UINT24 = 10;
  ALLEGRO_CHANNEL_CONF_1 = 16;
  ALLEGRO_CHANNEL_CONF_2 = 32;
  ALLEGRO_CHANNEL_CONF_3 = 48;
  ALLEGRO_CHANNEL_CONF_4 = 64;
  ALLEGRO_CHANNEL_CONF_5_1 = 81;
  ALLEGRO_CHANNEL_CONF_6_1 = 97;
  ALLEGRO_CHANNEL_CONF_7_1 = 113;
  ALLEGRO_PLAYMODE_ONCE = 256;
  ALLEGRO_PLAYMODE_LOOP = 257;
  ALLEGRO_PLAYMODE_BIDIR = 258;
  _ALLEGRO_PLAYMODE_STREAM_ONCE = 259;
  _ALLEGRO_PLAYMODE_STREAM_ONEDIR = 260;
  ALLEGRO_MIXER_QUALITY_POINT = 272;
  ALLEGRO_MIXER_QUALITY_LINEAR = 273;
  ALLEGRO_MIXER_QUALITY_CUBIC = 274;
  ALLEGRO_NO_KERNING = -1;
  ALLEGRO_ALIGN_LEFT = 0;
  ALLEGRO_ALIGN_CENTRE = 1;
  ALLEGRO_ALIGN_CENTER = 1;
  ALLEGRO_ALIGN_RIGHT = 2;
  ALLEGRO_ALIGN_INTEGER = 4;
  ALLEGRO_FILECHOOSER_FILE_MUST_EXIST = 1;
  ALLEGRO_FILECHOOSER_SAVE = 2;
  ALLEGRO_FILECHOOSER_FOLDER = 4;
  ALLEGRO_FILECHOOSER_PICTURES = 8;
  ALLEGRO_FILECHOOSER_SHOW_HIDDEN = 16;
  ALLEGRO_FILECHOOSER_MULTIPLE = 32;
  ALLEGRO_MESSAGEBOX_WARN = 1;
  ALLEGRO_MESSAGEBOX_ERROR = 2;
  ALLEGRO_MESSAGEBOX_OK_CANCEL = 4;
  ALLEGRO_MESSAGEBOX_YES_NO = 8;
  ALLEGRO_MESSAGEBOX_QUESTION = 16;
  ALLEGRO_TEXTLOG_NO_CLOSE = 1;
  ALLEGRO_TEXTLOG_MONOSPACE = 2;
  ALLEGRO_EVENT_NATIVE_DIALOG_CLOSE = 600;
  ALLEGRO_EVENT_MENU_CLICK = 601;
  ALLEGRO_MENU_ITEM_ENABLED = 0;
  ALLEGRO_MENU_ITEM_CHECKBOX = 1;
  ALLEGRO_MENU_ITEM_CHECKED = 2;
  ALLEGRO_MENU_ITEM_DISABLED = 4;
  ALLEGRO_PRIM_LINE_LIST = 0;
  ALLEGRO_PRIM_LINE_STRIP = 1;
  ALLEGRO_PRIM_LINE_LOOP = 2;
  ALLEGRO_PRIM_TRIANGLE_LIST = 3;
  ALLEGRO_PRIM_TRIANGLE_STRIP = 4;
  ALLEGRO_PRIM_TRIANGLE_FAN = 5;
  ALLEGRO_PRIM_POINT_LIST = 6;
  ALLEGRO_PRIM_NUM_TYPES = 7;
  ALLEGRO_PRIM_MAX_USER_ATTR = 10;
  ALLEGRO_PRIM_POSITION = 1;
  ALLEGRO_PRIM_COLOR_ATTR = 2;
  ALLEGRO_PRIM_TEX_COORD = 3;
  ALLEGRO_PRIM_TEX_COORD_PIXEL = 4;
  ALLEGRO_PRIM_USER_ATTR = 5;
  ALLEGRO_PRIM_ATTR_NUM = 15;
  ALLEGRO_PRIM_FLOAT_2 = 0;
  ALLEGRO_PRIM_FLOAT_3 = 1;
  ALLEGRO_PRIM_SHORT_2 = 2;
  ALLEGRO_PRIM_FLOAT_1 = 3;
  ALLEGRO_PRIM_FLOAT_4 = 4;
  ALLEGRO_PRIM_UBYTE_4 = 5;
  ALLEGRO_PRIM_SHORT_4 = 6;
  ALLEGRO_PRIM_NORMALIZED_UBYTE_4 = 7;
  ALLEGRO_PRIM_NORMALIZED_SHORT_2 = 8;
  ALLEGRO_PRIM_NORMALIZED_SHORT_4 = 9;
  ALLEGRO_PRIM_NORMALIZED_USHORT_2 = 10;
  ALLEGRO_PRIM_NORMALIZED_USHORT_4 = 11;
  ALLEGRO_PRIM_HALF_FLOAT_2 = 12;
  ALLEGRO_PRIM_HALF_FLOAT_4 = 13;
  ALLEGRO_LINE_JOIN_NONE = 0;
  ALLEGRO_LINE_JOIN_BEVEL = 1;
  ALLEGRO_LINE_JOIN_ROUND = 2;
  ALLEGRO_LINE_JOIN_MITER = 3;
  ALLEGRO_LINE_JOIN_MITRE = 3;
  ALLEGRO_LINE_CAP_NONE = 0;
  ALLEGRO_LINE_CAP_SQUARE = 1;
  ALLEGRO_LINE_CAP_ROUND = 2;
  ALLEGRO_LINE_CAP_TRIANGLE = 3;
  ALLEGRO_LINE_CAP_CLOSED = 4;
  ALLEGRO_PRIM_BUFFER_STREAM = 1;
  ALLEGRO_PRIM_BUFFER_STATIC = 2;
  ALLEGRO_PRIM_BUFFER_DYNAMIC = 4;
  ALLEGRO_PRIM_BUFFER_READWRITE = 8;
  ALLEGRO_EVENT_VIDEO_FRAME_SHOW = 550;
  ALLEGRO_EVENT_VIDEO_FINISHED = 551;
  _ALLEGRO_EVENT_VIDEO_SEEK = 552;
  ALLEGRO_VIDEO_POSITION_ACTUAL = 0;
  ALLEGRO_VIDEO_POSITION_VIDEO_DECODE = 1;
  ALLEGRO_VIDEO_POSITION_AUDIO_DECODE = 2;
  PHYSFS_ENUM_ERROR = -1;
  PHYSFS_ENUM_STOP = 0;
  PHYSFS_ENUM_OK = 1;
  PHYSFS_FILETYPE_REGULAR = 0;
  PHYSFS_FILETYPE_DIRECTORY = 1;
  PHYSFS_FILETYPE_SYMLINK = 2;
  PHYSFS_FILETYPE_OTHER = 3;
  PHYSFS_ERR_OK = 0;
  PHYSFS_ERR_OTHER_ERROR = 1;
  PHYSFS_ERR_OUT_OF_MEMORY = 2;
  PHYSFS_ERR_NOT_INITIALIZED = 3;
  PHYSFS_ERR_IS_INITIALIZED = 4;
  PHYSFS_ERR_ARGV0_IS_NULL = 5;
  PHYSFS_ERR_UNSUPPORTED = 6;
  PHYSFS_ERR_PAST_EOF = 7;
  PHYSFS_ERR_FILES_STILL_OPEN = 8;
  PHYSFS_ERR_INVALID_ARGUMENT = 9;
  PHYSFS_ERR_NOT_MOUNTED = 10;
  PHYSFS_ERR_NOT_FOUND = 11;
  PHYSFS_ERR_SYMLINK_FORBIDDEN = 12;
  PHYSFS_ERR_NO_WRITE_DIR = 13;
  PHYSFS_ERR_OPEN_FOR_READING = 14;
  PHYSFS_ERR_OPEN_FOR_WRITING = 15;
  PHYSFS_ERR_NOT_A_FILE = 16;
  PHYSFS_ERR_READ_ONLY = 17;
  PHYSFS_ERR_CORRUPT = 18;
  PHYSFS_ERR_SYMLINK_LOOP = 19;
  PHYSFS_ERR_IO = 20;
  PHYSFS_ERR_PERMISSION = 21;
  PHYSFS_ERR_NO_SPACE = 22;
  PHYSFS_ERR_BAD_FILENAME = 23;
  PHYSFS_ERR_BUSY = 24;
  PHYSFS_ERR_DIR_NOT_EMPTY = 25;
  PHYSFS_ERR_OS_ERROR = 26;
  PHYSFS_ERR_DUPLICATE = 27;
  PHYSFS_ERR_BAD_PASSWORD = 28;
  PHYSFS_ERR_APP_CALLBACK = 29;
  nk_false = 0;
  nk_true = 1;
  NK_UP = 0;
  NK_RIGHT = 1;
  NK_DOWN = 2;
  NK_LEFT = 3;
  NK_BUTTON_DEFAULT = 0;
  NK_BUTTON_REPEATER = 1;
  NK_FIXED = 0;
  NK_MODIFIABLE = 1;
  NK_VERTICAL = 0;
  NK_HORIZONTAL = 1;
  NK_MINIMIZED = 0;
  NK_MAXIMIZED = 1;
  NK_HIDDEN = 0;
  NK_SHOWN = 1;
  NK_CHART_LINES = 0;
  NK_CHART_COLUMN = 1;
  NK_CHART_MAX = 2;
  NK_CHART_HOVERING = 1;
  NK_CHART_CLICKED = 2;
  NK_RGB = 0;
  NK_RGBA = 1;
  NK_POPUP_STATIC = 0;
  NK_POPUP_DYNAMIC = 1;
  NK_DYNAMIC = 0;
  NK_STATIC = 1;
  NK_TREE_NODE = 0;
  NK_TREE_TAB = 1;
  NK_SYMBOL_NONE = 0;
  NK_SYMBOL_X = 1;
  NK_SYMBOL_UNDERSCORE = 2;
  NK_SYMBOL_CIRCLE_SOLID = 3;
  NK_SYMBOL_CIRCLE_OUTLINE = 4;
  NK_SYMBOL_RECT_SOLID = 5;
  NK_SYMBOL_RECT_OUTLINE = 6;
  NK_SYMBOL_TRIANGLE_UP = 7;
  NK_SYMBOL_TRIANGLE_DOWN = 8;
  NK_SYMBOL_TRIANGLE_LEFT = 9;
  NK_SYMBOL_TRIANGLE_RIGHT = 10;
  NK_SYMBOL_PLUS = 11;
  NK_SYMBOL_MINUS = 12;
  NK_SYMBOL_MAX = 13;
  NK_KEY_NONE = 0;
  NK_KEY_SHIFT = 1;
  NK_KEY_CTRL = 2;
  NK_KEY_DEL = 3;
  NK_KEY_ENTER = 4;
  NK_KEY_TAB = 5;
  NK_KEY_BACKSPACE = 6;
  NK_KEY_COPY = 7;
  NK_KEY_CUT = 8;
  NK_KEY_PASTE = 9;
  NK_KEY_UP = 10;
  NK_KEY_DOWN = 11;
  NK_KEY_LEFT = 12;
  NK_KEY_RIGHT = 13;
  NK_KEY_TEXT_INSERT_MODE = 14;
  NK_KEY_TEXT_REPLACE_MODE = 15;
  NK_KEY_TEXT_RESET_MODE = 16;
  NK_KEY_TEXT_LINE_START = 17;
  NK_KEY_TEXT_LINE_END = 18;
  NK_KEY_TEXT_START = 19;
  NK_KEY_TEXT_END = 20;
  NK_KEY_TEXT_UNDO = 21;
  NK_KEY_TEXT_REDO = 22;
  NK_KEY_TEXT_SELECT_ALL = 23;
  NK_KEY_TEXT_WORD_LEFT = 24;
  NK_KEY_TEXT_WORD_RIGHT = 25;
  NK_KEY_SCROLL_START = 26;
  NK_KEY_SCROLL_END = 27;
  NK_KEY_SCROLL_DOWN = 28;
  NK_KEY_SCROLL_UP = 29;
  NK_KEY_MAX = 30;
  NK_BUTTON_LEFT = 0;
  NK_BUTTON_MIDDLE = 1;
  NK_BUTTON_RIGHT = 2;
  NK_BUTTON_DOUBLE = 3;
  NK_BUTTON_MAX = 4;
  NK_ANTI_ALIASING_OFF = 0;
  NK_ANTI_ALIASING_ON = 1;
  NK_CONVERT_SUCCESS = 0;
  NK_CONVERT_INVALID_PARAM = 1;
  NK_CONVERT_COMMAND_BUFFER_FULL = 2;
  NK_CONVERT_VERTEX_BUFFER_FULL = 4;
  NK_CONVERT_ELEMENT_BUFFER_FULL = 8;
  NK_WINDOW_BORDER = 1;
  NK_WINDOW_MOVABLE = 2;
  NK_WINDOW_SCALABLE = 4;
  NK_WINDOW_CLOSABLE = 8;
  NK_WINDOW_MINIMIZABLE = 16;
  NK_WINDOW_NO_SCROLLBAR = 32;
  NK_WINDOW_TITLE = 64;
  NK_WINDOW_SCROLL_AUTO_HIDE = 128;
  NK_WINDOW_BACKGROUND = 256;
  NK_WINDOW_SCALE_LEFT = 512;
  NK_WINDOW_NO_INPUT = 1024;
  NK_WIDGET_INVALID = 0;
  NK_WIDGET_VALID = 1;
  NK_WIDGET_ROM = 2;
  NK_WIDGET_STATE_MODIFIED = 2;
  NK_WIDGET_STATE_INACTIVE = 4;
  NK_WIDGET_STATE_ENTERED = 8;
  NK_WIDGET_STATE_HOVER = 16;
  NK_WIDGET_STATE_ACTIVED = 32;
  NK_WIDGET_STATE_LEFT = 64;
  NK_WIDGET_STATE_HOVERED = 18;
  NK_WIDGET_STATE_ACTIVE = 34;
  NK_TEXT_ALIGN_LEFT = 1;
  NK_TEXT_ALIGN_CENTERED = 2;
  NK_TEXT_ALIGN_RIGHT = 4;
  NK_TEXT_ALIGN_TOP = 8;
  NK_TEXT_ALIGN_MIDDLE = 16;
  NK_TEXT_ALIGN_BOTTOM = 32;
  NK_TEXT_LEFT = 17;
  NK_TEXT_CENTERED = 18;
  NK_TEXT_RIGHT = 20;
  NK_EDIT_DEFAULT = 0;
  NK_EDIT_READ_ONLY = 1;
  NK_EDIT_AUTO_SELECT = 2;
  NK_EDIT_SIG_ENTER = 4;
  NK_EDIT_ALLOW_TAB = 8;
  NK_EDIT_NO_CURSOR = 16;
  NK_EDIT_SELECTABLE = 32;
  NK_EDIT_CLIPBOARD = 64;
  NK_EDIT_CTRL_ENTER_NEWLINE = 128;
  NK_EDIT_NO_HORIZONTAL_SCROLL = 256;
  NK_EDIT_ALWAYS_INSERT_MODE = 512;
  NK_EDIT_MULTILINE = 1024;
  NK_EDIT_GOTO_END_ON_ACTIVATE = 2048;
  NK_EDIT_SIMPLE = 512;
  NK_EDIT_FIELD = 608;
  NK_EDIT_BOX = 1640;
  NK_EDIT_EDITOR = 1128;
  NK_EDIT_ACTIVE = 1;
  NK_EDIT_INACTIVE = 2;
  NK_EDIT_ACTIVATED = 4;
  NK_EDIT_DEACTIVATED = 8;
  NK_EDIT_COMMITED = 16;
  NK_COLOR_TEXT = 0;
  NK_COLOR_WINDOW = 1;
  NK_COLOR_HEADER = 2;
  NK_COLOR_BORDER = 3;
  NK_COLOR_BUTTON = 4;
  NK_COLOR_BUTTON_HOVER = 5;
  NK_COLOR_BUTTON_ACTIVE = 6;
  NK_COLOR_TOGGLE = 7;
  NK_COLOR_TOGGLE_HOVER = 8;
  NK_COLOR_TOGGLE_CURSOR = 9;
  NK_COLOR_SELECT = 10;
  NK_COLOR_SELECT_ACTIVE = 11;
  NK_COLOR_SLIDER = 12;
  NK_COLOR_SLIDER_CURSOR = 13;
  NK_COLOR_SLIDER_CURSOR_HOVER = 14;
  NK_COLOR_SLIDER_CURSOR_ACTIVE = 15;
  NK_COLOR_PROPERTY = 16;
  NK_COLOR_EDIT = 17;
  NK_COLOR_EDIT_CURSOR = 18;
  NK_COLOR_COMBO = 19;
  NK_COLOR_CHART = 20;
  NK_COLOR_CHART_COLOR = 21;
  NK_COLOR_CHART_COLOR_HIGHLIGHT = 22;
  NK_COLOR_SCROLLBAR = 23;
  NK_COLOR_SCROLLBAR_CURSOR = 24;
  NK_COLOR_SCROLLBAR_CURSOR_HOVER = 25;
  NK_COLOR_SCROLLBAR_CURSOR_ACTIVE = 26;
  NK_COLOR_TAB_HEADER = 27;
  NK_COLOR_COUNT = 28;
  NK_CURSOR_ARROW = 0;
  NK_CURSOR_TEXT = 1;
  NK_CURSOR_MOVE = 2;
  NK_CURSOR_RESIZE_VERTICAL = 3;
  NK_CURSOR_RESIZE_HORIZONTAL = 4;
  NK_CURSOR_RESIZE_TOP_LEFT_DOWN_RIGHT = 5;
  NK_CURSOR_RESIZE_TOP_RIGHT_DOWN_LEFT = 6;
  NK_CURSOR_COUNT = 7;
  NK_COORD_UV = 0;
  NK_COORD_PIXEL = 1;
  NK_FONT_ATLAS_ALPHA8 = 0;
  NK_FONT_ATLAS_RGBA32 = 1;
  NK_BUFFER_FIXED = 0;
  NK_BUFFER_DYNAMIC = 1;
  NK_BUFFER_FRONT = 0;
  NK_BUFFER_BACK = 1;
  NK_BUFFER_MAX = 2;
  NK_TEXT_EDIT_SINGLE_LINE = 0;
  NK_TEXT_EDIT_MULTI_LINE = 1;
  NK_TEXT_EDIT_MODE_VIEW = 0;
  NK_TEXT_EDIT_MODE_INSERT = 1;
  NK_TEXT_EDIT_MODE_REPLACE = 2;
  _NK_COMMAND_NOP = 0;
  _NK_COMMAND_SCISSOR = 1;
  _NK_COMMAND_LINE = 2;
  _NK_COMMAND_CURVE = 3;
  _NK_COMMAND_RECT = 4;
  _NK_COMMAND_RECT_FILLED = 5;
  _NK_COMMAND_RECT_MULTI_COLOR = 6;
  _NK_COMMAND_CIRCLE = 7;
  _NK_COMMAND_CIRCLE_FILLED = 8;
  _NK_COMMAND_ARC = 9;
  _NK_COMMAND_ARC_FILLED = 10;
  _NK_COMMAND_TRIANGLE = 11;
  _NK_COMMAND_TRIANGLE_FILLED = 12;
  _NK_COMMAND_POLYGON = 13;
  _NK_COMMAND_POLYGON_FILLED = 14;
  _NK_COMMAND_POLYLINE = 15;
  _NK_COMMAND_TEXT = 16;
  _NK_COMMAND_IMAGE = 17;
  _NK_COMMAND_CUSTOM = 18;
  NK_CLIPPING_OFF = 0;
  NK_CLIPPING_ON = 1;
  NK_STYLE_ITEM_COLOR = 0;
  NK_STYLE_ITEM_IMAGE = 1;
  NK_STYLE_ITEM_NINE_SLICE = 2;
  NK_HEADER_LEFT = 0;
  NK_HEADER_RIGHT = 1;
  NK_PANEL_NONE = 0;
  NK_PANEL_WINDOW = 1;
  NK_PANEL_GROUP = 2;
  NK_PANEL_POPUP = 4;
  NK_PANEL_CONTEXTUAL = 16;
  NK_PANEL_COMBO = 32;
  NK_PANEL_MENU = 64;
  NK_PANEL_TOOLTIP = 128;
  NK_PANEL_SET_NONBLOCK = 240;
  NK_PANEL_SET_POPUP = 244;
  NK_PANEL_SET_SUB = 246;
  NK_LAYOUT_DYNAMIC_FIXED = 0;
  NK_LAYOUT_DYNAMIC_ROW = 1;
  NK_LAYOUT_DYNAMIC_FREE = 2;
  NK_LAYOUT_DYNAMIC = 3;
  NK_LAYOUT_STATIC_FIXED = 4;
  NK_LAYOUT_STATIC_ROW = 5;
  NK_LAYOUT_STATIC_FREE = 6;
  NK_LAYOUT_STATIC = 7;
  NK_LAYOUT_TEMPLATE = 8;
  NK_LAYOUT_COUNT = 9;
  NK_WINDOW_PRIVATE = 2048;
  NK_WINDOW_DYNAMIC = 2048;
  NK_WINDOW_ROM = 4096;
  NK_WINDOW_NOT_INTERACTIVE = 5120;
  NK_WINDOW_HIDDEN = 8192;
  NK_WINDOW_CLOSED = 16384;
  NK_WINDOW_MINIMIZED = 32768;
  NK_WINDOW_REMOVE_ROM = 65536;

type

  { ALLEGRO_PIXEL_FORMAT  }
  ALLEGRO_PIXEL_FORMAT = Integer;

  { PALLEGRO_PIXEL_FORMAT  }
  PALLEGRO_PIXEL_FORMAT = ^ALLEGRO_PIXEL_FORMAT;

  { _anonymous_type_1  }
  _anonymous_type_1 = Integer;

  { P_anonymous_type_1  }
  P_anonymous_type_1 = ^_anonymous_type_1;

  { _anonymous_type_2  }
  _anonymous_type_2 = Integer;

  { P_anonymous_type_2  }
  P_anonymous_type_2 = ^_anonymous_type_2;

  { ALLEGRO_SEEK  }
  ALLEGRO_SEEK = Integer;

  { PALLEGRO_SEEK  }
  PALLEGRO_SEEK = ^ALLEGRO_SEEK;

  { _anonymous_type_3  }
  _anonymous_type_3 = Integer;

  { P_anonymous_type_3  }
  P_anonymous_type_3 = ^_anonymous_type_3;

  { _anonymous_type_4  }
  _anonymous_type_4 = Integer;

  { P_anonymous_type_4  }
  P_anonymous_type_4 = ^_anonymous_type_4;

  { ALLEGRO_BLEND_MODE  }
  ALLEGRO_BLEND_MODE = Integer;

  { PALLEGRO_BLEND_MODE  }
  PALLEGRO_BLEND_MODE = ^ALLEGRO_BLEND_MODE;

  { ALLEGRO_BLEND_OPERATIONS  }
  ALLEGRO_BLEND_OPERATIONS = Integer;

  { PALLEGRO_BLEND_OPERATIONS  }
  PALLEGRO_BLEND_OPERATIONS = ^ALLEGRO_BLEND_OPERATIONS;

  { _anonymous_type_5  }
  _anonymous_type_5 = Integer;

  { P_anonymous_type_5  }
  P_anonymous_type_5 = ^_anonymous_type_5;

  { _anonymous_type_6  }
  _anonymous_type_6 = Integer;

  { P_anonymous_type_6  }
  P_anonymous_type_6 = ^_anonymous_type_6;

  { ALLEGRO_DISPLAY_OPTIONS  }
  ALLEGRO_DISPLAY_OPTIONS = Integer;

  { PALLEGRO_DISPLAY_OPTIONS  }
  PALLEGRO_DISPLAY_OPTIONS = ^ALLEGRO_DISPLAY_OPTIONS;

  { _anonymous_type_7  }
  _anonymous_type_7 = Integer;

  { P_anonymous_type_7  }
  P_anonymous_type_7 = ^_anonymous_type_7;

  { ALLEGRO_DISPLAY_ORIENTATION  }
  ALLEGRO_DISPLAY_ORIENTATION = Integer;

  { PALLEGRO_DISPLAY_ORIENTATION  }
  PALLEGRO_DISPLAY_ORIENTATION = ^ALLEGRO_DISPLAY_ORIENTATION;

  { _anonymous_type_8  }
  _anonymous_type_8 = Integer;

  { P_anonymous_type_8  }
  P_anonymous_type_8 = ^_anonymous_type_8;

  { ALLEGRO_FILE_MODE  }
  ALLEGRO_FILE_MODE = Integer;

  { PALLEGRO_FILE_MODE  }
  PALLEGRO_FILE_MODE = ^ALLEGRO_FILE_MODE;

  { ALLEGRO_FOR_EACH_FS_ENTRY_RESULT  }
  ALLEGRO_FOR_EACH_FS_ENTRY_RESULT = Integer;

  { PALLEGRO_FOR_EACH_FS_ENTRY_RESULT  }
  PALLEGRO_FOR_EACH_FS_ENTRY_RESULT = ^ALLEGRO_FOR_EACH_FS_ENTRY_RESULT;

  { ALLEGRO_JOYFLAGS  }
  ALLEGRO_JOYFLAGS = Integer;

  { PALLEGRO_JOYFLAGS  }
  PALLEGRO_JOYFLAGS = ^ALLEGRO_JOYFLAGS;

  { _anonymous_type_9  }
  _anonymous_type_9 = Integer;

  { P_anonymous_type_9  }
  P_anonymous_type_9 = ^_anonymous_type_9;

  { _anonymous_type_10  }
  _anonymous_type_10 = Integer;

  { P_anonymous_type_10  }
  P_anonymous_type_10 = ^_anonymous_type_10;

  { ALLEGRO_MOUSE_EMULATION_MODE  }
  ALLEGRO_MOUSE_EMULATION_MODE = Integer;

  { PALLEGRO_MOUSE_EMULATION_MODE  }
  PALLEGRO_MOUSE_EMULATION_MODE = ^ALLEGRO_MOUSE_EMULATION_MODE;

  { ALLEGRO_HAPTIC_CONSTANTS  }
  ALLEGRO_HAPTIC_CONSTANTS = Integer;

  { PALLEGRO_HAPTIC_CONSTANTS  }
  PALLEGRO_HAPTIC_CONSTANTS = ^ALLEGRO_HAPTIC_CONSTANTS;

  { _anonymous_type_11  }
  _anonymous_type_11 = Integer;

  { P_anonymous_type_11  }
  P_anonymous_type_11 = ^_anonymous_type_11;

  { ALLEGRO_SYSTEM_MOUSE_CURSOR  }
  ALLEGRO_SYSTEM_MOUSE_CURSOR = Integer;

  { PALLEGRO_SYSTEM_MOUSE_CURSOR  }
  PALLEGRO_SYSTEM_MOUSE_CURSOR = ^ALLEGRO_SYSTEM_MOUSE_CURSOR;

  { ALLEGRO_RENDER_STATE  }
  ALLEGRO_RENDER_STATE = Integer;

  { PALLEGRO_RENDER_STATE  }
  PALLEGRO_RENDER_STATE = ^ALLEGRO_RENDER_STATE;

  { ALLEGRO_RENDER_FUNCTION  }
  ALLEGRO_RENDER_FUNCTION = Integer;

  { PALLEGRO_RENDER_FUNCTION  }
  PALLEGRO_RENDER_FUNCTION = ^ALLEGRO_RENDER_FUNCTION;

  { ALLEGRO_WRITE_MASK_FLAGS  }
  ALLEGRO_WRITE_MASK_FLAGS = Integer;

  { PALLEGRO_WRITE_MASK_FLAGS  }
  PALLEGRO_WRITE_MASK_FLAGS = ^ALLEGRO_WRITE_MASK_FLAGS;

  { ALLEGRO_SHADER_TYPE  }
  ALLEGRO_SHADER_TYPE = Integer;

  { PALLEGRO_SHADER_TYPE  }
  PALLEGRO_SHADER_TYPE = ^ALLEGRO_SHADER_TYPE;

  { ALLEGRO_SHADER_PLATFORM  }
  ALLEGRO_SHADER_PLATFORM = Integer;

  { PALLEGRO_SHADER_PLATFORM  }
  PALLEGRO_SHADER_PLATFORM = ^ALLEGRO_SHADER_PLATFORM;

  { ALLEGRO_SYSTEM_ID  }
  ALLEGRO_SYSTEM_ID = Integer;

  { PALLEGRO_SYSTEM_ID  }
  PALLEGRO_SYSTEM_ID = ^ALLEGRO_SYSTEM_ID;

  { _anonymous_type_12  }
  _anonymous_type_12 = Integer;

  { P_anonymous_type_12  }
  P_anonymous_type_12 = ^_anonymous_type_12;

  { ALLEGRO_STATE_FLAGS  }
  ALLEGRO_STATE_FLAGS = Integer;

  { PALLEGRO_STATE_FLAGS  }
  PALLEGRO_STATE_FLAGS = ^ALLEGRO_STATE_FLAGS;

  { ALLEGRO_AUDIO_EVENT_TYPE  }
  ALLEGRO_AUDIO_EVENT_TYPE = Integer;

  { PALLEGRO_AUDIO_EVENT_TYPE  }
  PALLEGRO_AUDIO_EVENT_TYPE = ^ALLEGRO_AUDIO_EVENT_TYPE;

  { ALLEGRO_AUDIO_DEPTH  }
  ALLEGRO_AUDIO_DEPTH = Integer;

  { PALLEGRO_AUDIO_DEPTH  }
  PALLEGRO_AUDIO_DEPTH = ^ALLEGRO_AUDIO_DEPTH;

  { ALLEGRO_CHANNEL_CONF  }
  ALLEGRO_CHANNEL_CONF = Integer;

  { PALLEGRO_CHANNEL_CONF  }
  PALLEGRO_CHANNEL_CONF = ^ALLEGRO_CHANNEL_CONF;

  { ALLEGRO_PLAYMODE  }
  ALLEGRO_PLAYMODE = Integer;

  { PALLEGRO_PLAYMODE  }
  PALLEGRO_PLAYMODE = ^ALLEGRO_PLAYMODE;

  { ALLEGRO_MIXER_QUALITY  }
  ALLEGRO_MIXER_QUALITY = Integer;

  { PALLEGRO_MIXER_QUALITY  }
  PALLEGRO_MIXER_QUALITY = ^ALLEGRO_MIXER_QUALITY;

  { _anonymous_type_13  }
  _anonymous_type_13 = Integer;

  { P_anonymous_type_13  }
  P_anonymous_type_13 = ^_anonymous_type_13;

  { _anonymous_type_14  }
  _anonymous_type_14 = Integer;

  { P_anonymous_type_14  }
  P_anonymous_type_14 = ^_anonymous_type_14;

  { _anonymous_type_15  }
  _anonymous_type_15 = Integer;

  { P_anonymous_type_15  }
  P_anonymous_type_15 = ^_anonymous_type_15;

  { _anonymous_type_16  }
  _anonymous_type_16 = Integer;

  { P_anonymous_type_16  }
  P_anonymous_type_16 = ^_anonymous_type_16;

  { _anonymous_type_17  }
  _anonymous_type_17 = Integer;

  { P_anonymous_type_17  }
  P_anonymous_type_17 = ^_anonymous_type_17;

  { _anonymous_type_18  }
  _anonymous_type_18 = Integer;

  { P_anonymous_type_18  }
  P_anonymous_type_18 = ^_anonymous_type_18;

  { ALLEGRO_PRIM_TYPE  }
  ALLEGRO_PRIM_TYPE = Integer;

  { PALLEGRO_PRIM_TYPE  }
  PALLEGRO_PRIM_TYPE = ^ALLEGRO_PRIM_TYPE;

  { _anonymous_type_19  }
  _anonymous_type_19 = Integer;

  { P_anonymous_type_19  }
  P_anonymous_type_19 = ^_anonymous_type_19;

  { ALLEGRO_PRIM_ATTR  }
  ALLEGRO_PRIM_ATTR = Integer;

  { PALLEGRO_PRIM_ATTR  }
  PALLEGRO_PRIM_ATTR = ^ALLEGRO_PRIM_ATTR;

  { ALLEGRO_PRIM_STORAGE  }
  ALLEGRO_PRIM_STORAGE = Integer;

  { PALLEGRO_PRIM_STORAGE  }
  PALLEGRO_PRIM_STORAGE = ^ALLEGRO_PRIM_STORAGE;

  { ALLEGRO_LINE_JOIN  }
  ALLEGRO_LINE_JOIN = Integer;

  { PALLEGRO_LINE_JOIN  }
  PALLEGRO_LINE_JOIN = ^ALLEGRO_LINE_JOIN;

  { ALLEGRO_LINE_CAP  }
  ALLEGRO_LINE_CAP = Integer;

  { PALLEGRO_LINE_CAP  }
  PALLEGRO_LINE_CAP = ^ALLEGRO_LINE_CAP;

  { ALLEGRO_PRIM_BUFFER_FLAGS  }
  ALLEGRO_PRIM_BUFFER_FLAGS = Integer;

  { PALLEGRO_PRIM_BUFFER_FLAGS  }
  PALLEGRO_PRIM_BUFFER_FLAGS = ^ALLEGRO_PRIM_BUFFER_FLAGS;

  { ALLEGRO_VIDEO_EVENT_TYPE  }
  ALLEGRO_VIDEO_EVENT_TYPE = Integer;

  { PALLEGRO_VIDEO_EVENT_TYPE  }
  PALLEGRO_VIDEO_EVENT_TYPE = ^ALLEGRO_VIDEO_EVENT_TYPE;

  { ALLEGRO_VIDEO_POSITION_TYPE  }
  ALLEGRO_VIDEO_POSITION_TYPE = Integer;

  { PALLEGRO_VIDEO_POSITION_TYPE  }
  PALLEGRO_VIDEO_POSITION_TYPE = ^ALLEGRO_VIDEO_POSITION_TYPE;

  { PHYSFS_EnumerateCallbackResult  }
  PHYSFS_EnumerateCallbackResult = Integer;

  { PPHYSFS_EnumerateCallbackResult  }
  PPHYSFS_EnumerateCallbackResult = ^PHYSFS_EnumerateCallbackResult;

  { PHYSFS_FileType  }
  PHYSFS_FileType = Integer;

  { PPHYSFS_FileType  }
  PPHYSFS_FileType = ^PHYSFS_FileType;

  { PHYSFS_ErrorCode  }
  PHYSFS_ErrorCode = Integer;

  { PPHYSFS_ErrorCode  }
  PPHYSFS_ErrorCode = ^PHYSFS_ErrorCode;

  { _anonymous_type_20  }
  _anonymous_type_20 = Integer;

  { P_anonymous_type_20  }
  P_anonymous_type_20 = ^_anonymous_type_20;

  { nk_heading  }
  nk_heading = Integer;

  { Pnk_heading  }
  Pnk_heading = ^nk_heading;

  { nk_button_behavior  }
  nk_button_behavior = Integer;

  { Pnk_button_behavior  }
  Pnk_button_behavior = ^nk_button_behavior;

  { nk_modify  }
  nk_modify = Integer;

  { Pnk_modify  }
  Pnk_modify = ^nk_modify;

  { nk_orientation  }
  nk_orientation = Integer;

  { Pnk_orientation  }
  Pnk_orientation = ^nk_orientation;

  { nk_collapse_states  }
  nk_collapse_states = Integer;

  { Pnk_collapse_states  }
  Pnk_collapse_states = ^nk_collapse_states;

  { nk_show_states  }
  nk_show_states = Integer;

  { Pnk_show_states  }
  Pnk_show_states = ^nk_show_states;

  { nk_chart_type  }
  nk_chart_type = Integer;

  { Pnk_chart_type  }
  Pnk_chart_type = ^nk_chart_type;

  { nk_chart_event  }
  nk_chart_event = Integer;

  { Pnk_chart_event  }
  Pnk_chart_event = ^nk_chart_event;

  { nk_color_format  }
  nk_color_format = Integer;

  { Pnk_color_format  }
  Pnk_color_format = ^nk_color_format;

  { nk_popup_type  }
  nk_popup_type = Integer;

  { Pnk_popup_type  }
  Pnk_popup_type = ^nk_popup_type;

  { nk_layout_format  }
  nk_layout_format = Integer;

  { Pnk_layout_format  }
  Pnk_layout_format = ^nk_layout_format;

  { nk_tree_type  }
  nk_tree_type = Integer;

  { Pnk_tree_type  }
  Pnk_tree_type = ^nk_tree_type;

  { nk_symbol_type  }
  nk_symbol_type = Integer;

  { Pnk_symbol_type  }
  Pnk_symbol_type = ^nk_symbol_type;

  { nk_keys  }
  nk_keys = Integer;

  { Pnk_keys  }
  Pnk_keys = ^nk_keys;

  { nk_buttons  }
  nk_buttons = Integer;

  { Pnk_buttons  }
  Pnk_buttons = ^nk_buttons;

  { nk_anti_aliasing  }
  nk_anti_aliasing = Integer;

  { Pnk_anti_aliasing  }
  Pnk_anti_aliasing = ^nk_anti_aliasing;

  { nk_convert_result  }
  nk_convert_result = Integer;

  { Pnk_convert_result  }
  Pnk_convert_result = ^nk_convert_result;

  { nk_panel_flags  }
  nk_panel_flags = Integer;

  { Pnk_panel_flags  }
  Pnk_panel_flags = ^nk_panel_flags;

  { nk_widget_layout_states  }
  nk_widget_layout_states = Integer;

  { Pnk_widget_layout_states  }
  Pnk_widget_layout_states = ^nk_widget_layout_states;

  { nk_widget_states  }
  nk_widget_states = Integer;

  { Pnk_widget_states  }
  Pnk_widget_states = ^nk_widget_states;

  { nk_text_align  }
  nk_text_align = Integer;

  { Pnk_text_align  }
  Pnk_text_align = ^nk_text_align;

  { nk_text_alignment  }
  nk_text_alignment = Integer;

  { Pnk_text_alignment  }
  Pnk_text_alignment = ^nk_text_alignment;

  { nk_edit_flags  }
  nk_edit_flags = Integer;

  { Pnk_edit_flags  }
  Pnk_edit_flags = ^nk_edit_flags;

  { nk_edit_types  }
  nk_edit_types = Integer;

  { Pnk_edit_types  }
  Pnk_edit_types = ^nk_edit_types;

  { nk_edit_events  }
  nk_edit_events = Integer;

  { Pnk_edit_events  }
  Pnk_edit_events = ^nk_edit_events;

  { nk_style_colors  }
  nk_style_colors = Integer;

  { Pnk_style_colors  }
  Pnk_style_colors = ^nk_style_colors;

  { nk_style_cursor  }
  nk_style_cursor = Integer;

  { Pnk_style_cursor  }
  Pnk_style_cursor = ^nk_style_cursor;

  { nk_font_coord_type  }
  nk_font_coord_type = Integer;

  { Pnk_font_coord_type  }
  Pnk_font_coord_type = ^nk_font_coord_type;

  { nk_font_atlas_format  }
  nk_font_atlas_format = Integer;

  { Pnk_font_atlas_format  }
  Pnk_font_atlas_format = ^nk_font_atlas_format;

  { nk_allocation_type  }
  nk_allocation_type = Integer;

  { Pnk_allocation_type  }
  Pnk_allocation_type = ^nk_allocation_type;

  { nk_buffer_allocation_type  }
  nk_buffer_allocation_type = Integer;

  { Pnk_buffer_allocation_type  }
  Pnk_buffer_allocation_type = ^nk_buffer_allocation_type;

  { nk_text_edit_type  }
  nk_text_edit_type = Integer;

  { Pnk_text_edit_type  }
  Pnk_text_edit_type = ^nk_text_edit_type;

  { nk_text_edit_mode  }
  nk_text_edit_mode = Integer;

  { Pnk_text_edit_mode  }
  Pnk_text_edit_mode = ^nk_text_edit_mode;

  { nk_command_type  }
  nk_command_type = Integer;

  { Pnk_command_type  }
  Pnk_command_type = ^nk_command_type;

  { nk_command_clipping  }
  nk_command_clipping = Integer;

  { Pnk_command_clipping  }
  Pnk_command_clipping = ^nk_command_clipping;

  { nk_style_item_type  }
  nk_style_item_type = Integer;

  { Pnk_style_item_type  }
  Pnk_style_item_type = ^nk_style_item_type;

  { nk_style_header_align  }
  nk_style_header_align = Integer;

  { Pnk_style_header_align  }
  Pnk_style_header_align = ^nk_style_header_align;

  { nk_panel_type  }
  nk_panel_type = Integer;

  { Pnk_panel_type  }
  Pnk_panel_type = ^nk_panel_type;

  { nk_panel_set  }
  nk_panel_set = Integer;

  { Pnk_panel_set  }
  Pnk_panel_set = ^nk_panel_set;

  { nk_panel_row_layout_type  }
  nk_panel_row_layout_type = Integer;

  { Pnk_panel_row_layout_type  }
  Pnk_panel_row_layout_type = ^nk_panel_row_layout_type;

  { nk_window_flags  }
  nk_window_flags = Integer;

  { Pnk_window_flags  }
  Pnk_window_flags = ^nk_window_flags;
  // Forward declarations

  { PPUTF8Char  }
  PPUTF8Char = ^PUTF8Char;

  { PUInt16  }
  PUInt16 = ^UInt16;

  { PALLEGRO_USER_EVENT_DESCRIPTOR  }
  PALLEGRO_USER_EVENT_DESCRIPTOR = Pointer;

  { PPALLEGRO_USER_EVENT_DESCRIPTOR  }
  PPALLEGRO_USER_EVENT_DESCRIPTOR = ^PALLEGRO_USER_EVENT_DESCRIPTOR;

  { PALLEGRO_JOYSTICK_DRIVER  }
  PALLEGRO_JOYSTICK_DRIVER = Pointer;

  { PPALLEGRO_JOYSTICK_DRIVER  }
  PPALLEGRO_JOYSTICK_DRIVER = ^PALLEGRO_JOYSTICK_DRIVER;

  { PALLEGRO_HAPTIC_DRIVER  }
  PALLEGRO_HAPTIC_DRIVER = Pointer;

  { PPALLEGRO_HAPTIC_DRIVER  }
  PPALLEGRO_HAPTIC_DRIVER = ^PALLEGRO_HAPTIC_DRIVER;

  { Pnk_draw_command  }
  Pnk_draw_command = Pointer;

  { PPnk_draw_command  }
  PPnk_draw_command = ^Pnk_draw_command;

  { Pnk_draw_list  }
  Pnk_draw_list = Pointer;

  { PPnk_draw_list  }
  PPnk_draw_list = ^Pnk_draw_list;

  { Pnk_draw_vertex_layout_element  }
  Pnk_draw_vertex_layout_element = Pointer;

  { PPnk_draw_vertex_layout_element  }
  PPnk_draw_vertex_layout_element = ^Pnk_draw_vertex_layout_element;

  { Pnk_style_slide  }
  Pnk_style_slide = Pointer;

  { PPnk_style_slide  }
  PPnk_style_slide = ^Pnk_style_slide;

  { PALLEGRO_TIMEOUT  }
  PALLEGRO_TIMEOUT = ^ALLEGRO_TIMEOUT;

  { PALLEGRO_COLOR  }
  PALLEGRO_COLOR = ^ALLEGRO_COLOR;

  { PALLEGRO_FILE_INTERFACE  }
  PALLEGRO_FILE_INTERFACE = ^ALLEGRO_FILE_INTERFACE;

  { PALLEGRO_LOCKED_REGION  }
  PALLEGRO_LOCKED_REGION = ^ALLEGRO_LOCKED_REGION;

  { PALLEGRO_EVENT_SOURCE  }
  PALLEGRO_EVENT_SOURCE = ^ALLEGRO_EVENT_SOURCE;

  { PALLEGRO_ANY_EVENT  }
  PALLEGRO_ANY_EVENT = ^ALLEGRO_ANY_EVENT;

  { PALLEGRO_DISPLAY_EVENT  }
  PALLEGRO_DISPLAY_EVENT = ^ALLEGRO_DISPLAY_EVENT;

  { PALLEGRO_JOYSTICK_EVENT  }
  PALLEGRO_JOYSTICK_EVENT = ^ALLEGRO_JOYSTICK_EVENT;

  { PALLEGRO_KEYBOARD_EVENT  }
  PALLEGRO_KEYBOARD_EVENT = ^ALLEGRO_KEYBOARD_EVENT;

  { PALLEGRO_MOUSE_EVENT  }
  PALLEGRO_MOUSE_EVENT = ^ALLEGRO_MOUSE_EVENT;

  { PALLEGRO_TIMER_EVENT  }
  PALLEGRO_TIMER_EVENT = ^ALLEGRO_TIMER_EVENT;

  { PALLEGRO_TOUCH_EVENT  }
  PALLEGRO_TOUCH_EVENT = ^ALLEGRO_TOUCH_EVENT;

  { PALLEGRO_USER_EVENT  }
  PALLEGRO_USER_EVENT = ^ALLEGRO_USER_EVENT;

  { PALLEGRO_FS_ENTRY  }
  PALLEGRO_FS_ENTRY = ^ALLEGRO_FS_ENTRY;

  { PALLEGRO_FS_INTERFACE  }
  PALLEGRO_FS_INTERFACE = ^ALLEGRO_FS_INTERFACE;

  { PALLEGRO_DISPLAY_MODE  }
  PALLEGRO_DISPLAY_MODE = ^ALLEGRO_DISPLAY_MODE;

  { PALLEGRO_JOYSTICK_STATE  }
  PALLEGRO_JOYSTICK_STATE = ^ALLEGRO_JOYSTICK_STATE;

  { PALLEGRO_KEYBOARD_STATE  }
  PALLEGRO_KEYBOARD_STATE = ^ALLEGRO_KEYBOARD_STATE;

  { PALLEGRO_MOUSE_STATE  }
  PALLEGRO_MOUSE_STATE = ^ALLEGRO_MOUSE_STATE;

  { PALLEGRO_TOUCH_STATE  }
  PALLEGRO_TOUCH_STATE = ^ALLEGRO_TOUCH_STATE;

  { PALLEGRO_TOUCH_INPUT_STATE  }
  PALLEGRO_TOUCH_INPUT_STATE = ^ALLEGRO_TOUCH_INPUT_STATE;

  { PALLEGRO_HAPTIC_DIRECTION  }
  PALLEGRO_HAPTIC_DIRECTION = ^ALLEGRO_HAPTIC_DIRECTION;

  { PALLEGRO_HAPTIC_REPLAY  }
  PALLEGRO_HAPTIC_REPLAY = ^ALLEGRO_HAPTIC_REPLAY;

  { PALLEGRO_HAPTIC_ENVELOPE  }
  PALLEGRO_HAPTIC_ENVELOPE = ^ALLEGRO_HAPTIC_ENVELOPE;

  { PALLEGRO_HAPTIC_CONSTANT_EFFECT  }
  PALLEGRO_HAPTIC_CONSTANT_EFFECT = ^ALLEGRO_HAPTIC_CONSTANT_EFFECT;

  { PALLEGRO_HAPTIC_RAMP_EFFECT  }
  PALLEGRO_HAPTIC_RAMP_EFFECT = ^ALLEGRO_HAPTIC_RAMP_EFFECT;

  { PALLEGRO_HAPTIC_CONDITION_EFFECT  }
  PALLEGRO_HAPTIC_CONDITION_EFFECT = ^ALLEGRO_HAPTIC_CONDITION_EFFECT;

  { PALLEGRO_HAPTIC_PERIODIC_EFFECT  }
  PALLEGRO_HAPTIC_PERIODIC_EFFECT = ^ALLEGRO_HAPTIC_PERIODIC_EFFECT;

  { PALLEGRO_HAPTIC_RUMBLE_EFFECT  }
  PALLEGRO_HAPTIC_RUMBLE_EFFECT = ^ALLEGRO_HAPTIC_RUMBLE_EFFECT;

  { PALLEGRO_HAPTIC_EFFECT  }
  PALLEGRO_HAPTIC_EFFECT = ^ALLEGRO_HAPTIC_EFFECT;

  { PALLEGRO_HAPTIC_EFFECT_ID  }
  PALLEGRO_HAPTIC_EFFECT_ID = ^ALLEGRO_HAPTIC_EFFECT_ID;

  { PALLEGRO_MEMORY_INTERFACE  }
  PALLEGRO_MEMORY_INTERFACE = ^ALLEGRO_MEMORY_INTERFACE;

  { PALLEGRO_MONITOR_INFO  }
  PALLEGRO_MONITOR_INFO = ^ALLEGRO_MONITOR_INFO;

  { PALLEGRO_TRANSFORM  }
  PALLEGRO_TRANSFORM = ^ALLEGRO_TRANSFORM;

  { PALLEGRO_STATE  }
  PALLEGRO_STATE = ^ALLEGRO_STATE;

  { PALLEGRO_AUDIO_RECORDER_EVENT  }
  PALLEGRO_AUDIO_RECORDER_EVENT = ^ALLEGRO_AUDIO_RECORDER_EVENT;

  { PALLEGRO_SAMPLE_ID  }
  PALLEGRO_SAMPLE_ID = ^ALLEGRO_SAMPLE_ID;

  { PALLEGRO_GLYPH  }
  PALLEGRO_GLYPH = ^ALLEGRO_GLYPH;

  { PALLEGRO_MENU_INFO  }
  PALLEGRO_MENU_INFO = ^ALLEGRO_MENU_INFO;

  { PALLEGRO_VERTEX_ELEMENT  }
  PALLEGRO_VERTEX_ELEMENT = ^ALLEGRO_VERTEX_ELEMENT;

  { PALLEGRO_VERTEX  }
  PALLEGRO_VERTEX = ^ALLEGRO_VERTEX;

  { PPHYSFS_File  }
  PPHYSFS_File = ^PHYSFS_File;

  { PPHYSFS_ArchiveInfo  }
  PPHYSFS_ArchiveInfo = ^PHYSFS_ArchiveInfo;

  { PPPHYSFS_ArchiveInfo  }
  PPPHYSFS_ArchiveInfo = ^PPHYSFS_ArchiveInfo;

  { PPHYSFS_Version  }
  PPHYSFS_Version = ^PHYSFS_Version;

  { PPHYSFS_Allocator  }
  PPHYSFS_Allocator = ^PHYSFS_Allocator;

  { PPHYSFS_Stat_  }
  PPHYSFS_Stat_ = ^PHYSFS_Stat_;

  { PPHYSFS_Io  }
  PPHYSFS_Io = ^PHYSFS_Io;

  { PPHYSFS_Archiver  }
  PPHYSFS_Archiver = ^PHYSFS_Archiver;

  { Pnk_color  }
  Pnk_color = ^nk_color;

  { Pnk_colorf  }
  Pnk_colorf = ^nk_colorf;

  { Pnk_vec2  }
  Pnk_vec2 = ^nk_vec2;

  { Pnk_vec2i  }
  Pnk_vec2i = ^nk_vec2i;

  { Pnk_rect  }
  Pnk_rect = ^nk_rect;

  { Pnk_recti  }
  Pnk_recti = ^nk_recti;

  { Pnk_image  }
  Pnk_image = ^nk_image;

  { Pnk_nine_slice  }
  Pnk_nine_slice = ^nk_nine_slice;

  { Pnk_cursor  }
  Pnk_cursor = ^nk_cursor;

  { Pnk_scroll  }
  Pnk_scroll = ^nk_scroll;

  { Pnk_allocator  }
  Pnk_allocator = ^nk_allocator;

  { Pnk_draw_null_texture  }
  Pnk_draw_null_texture = ^nk_draw_null_texture;

  { Pnk_convert_config  }
  Pnk_convert_config = ^nk_convert_config;

  { Pnk_list_view  }
  Pnk_list_view = ^nk_list_view;

  { Pnk_user_font_glyph  }
  Pnk_user_font_glyph = ^nk_user_font_glyph;

  { Pnk_user_font  }
  Pnk_user_font = ^nk_user_font;

  { PPnk_user_font  }
  PPnk_user_font = ^Pnk_user_font;

  { Pnk_baked_font  }
  Pnk_baked_font = ^nk_baked_font;

  { Pnk_font_config  }
  Pnk_font_config = ^nk_font_config;

  { Pnk_font_glyph  }
  Pnk_font_glyph = ^nk_font_glyph;

  { Pnk_font  }
  Pnk_font = ^nk_font;

  { Pnk_font_atlas  }
  Pnk_font_atlas = ^nk_font_atlas;

  { Pnk_memory_status  }
  Pnk_memory_status = ^nk_memory_status;

  { Pnk_buffer_marker  }
  Pnk_buffer_marker = ^nk_buffer_marker;

  { Pnk_memory  }
  Pnk_memory = ^nk_memory;

  { Pnk_buffer  }
  Pnk_buffer = ^nk_buffer;

  { Pnk_str  }
  Pnk_str = ^nk_str;

  { Pnk_clipboard  }
  Pnk_clipboard = ^nk_clipboard;

  { Pnk_text_undo_record  }
  Pnk_text_undo_record = ^nk_text_undo_record;

  { Pnk_text_undo_state  }
  Pnk_text_undo_state = ^nk_text_undo_state;

  { Pnk_text_edit  }
  Pnk_text_edit = ^nk_text_edit;

  { Pnk_command  }
  Pnk_command = ^nk_command;

  { Pnk_command_scissor  }
  Pnk_command_scissor = ^nk_command_scissor;

  { Pnk_command_line  }
  Pnk_command_line = ^nk_command_line;

  { Pnk_command_curve  }
  Pnk_command_curve = ^nk_command_curve;

  { Pnk_command_rect  }
  Pnk_command_rect = ^nk_command_rect;

  { Pnk_command_rect_filled  }
  Pnk_command_rect_filled = ^nk_command_rect_filled;

  { Pnk_command_rect_multi_color  }
  Pnk_command_rect_multi_color = ^nk_command_rect_multi_color;

  { Pnk_command_triangle  }
  Pnk_command_triangle = ^nk_command_triangle;

  { Pnk_command_triangle_filled  }
  Pnk_command_triangle_filled = ^nk_command_triangle_filled;

  { Pnk_command_circle  }
  Pnk_command_circle = ^nk_command_circle;

  { Pnk_command_circle_filled  }
  Pnk_command_circle_filled = ^nk_command_circle_filled;

  { Pnk_command_arc  }
  Pnk_command_arc = ^nk_command_arc;

  { Pnk_command_arc_filled  }
  Pnk_command_arc_filled = ^nk_command_arc_filled;

  { Pnk_command_polygon  }
  Pnk_command_polygon = ^nk_command_polygon;

  { Pnk_command_polygon_filled  }
  Pnk_command_polygon_filled = ^nk_command_polygon_filled;

  { Pnk_command_polyline  }
  Pnk_command_polyline = ^nk_command_polyline;

  { Pnk_command_image  }
  Pnk_command_image = ^nk_command_image;

  { Pnk_command_custom  }
  Pnk_command_custom = ^nk_command_custom;

  { Pnk_command_text  }
  Pnk_command_text = ^nk_command_text;

  { Pnk_command_buffer  }
  Pnk_command_buffer = ^nk_command_buffer;

  { Pnk_mouse_button  }
  Pnk_mouse_button = ^nk_mouse_button;

  { Pnk_mouse  }
  Pnk_mouse = ^nk_mouse;

  { Pnk_key  }
  Pnk_key = ^nk_key;

  { Pnk_keyboard  }
  Pnk_keyboard = ^nk_keyboard;

  { Pnk_input  }
  Pnk_input = ^nk_input;

  { Pnk_style_item  }
  Pnk_style_item = ^nk_style_item;

  { Pnk_style_text  }
  Pnk_style_text = ^nk_style_text;

  { Pnk_style_button  }
  Pnk_style_button = ^nk_style_button;

  { Pnk_style_toggle  }
  Pnk_style_toggle = ^nk_style_toggle;

  { Pnk_style_selectable  }
  Pnk_style_selectable = ^nk_style_selectable;

  { Pnk_style_slider  }
  Pnk_style_slider = ^nk_style_slider;

  { Pnk_style_progress  }
  Pnk_style_progress = ^nk_style_progress;

  { Pnk_style_scrollbar  }
  Pnk_style_scrollbar = ^nk_style_scrollbar;

  { Pnk_style_edit  }
  Pnk_style_edit = ^nk_style_edit;

  { Pnk_style_property  }
  Pnk_style_property = ^nk_style_property;

  { Pnk_style_chart  }
  Pnk_style_chart = ^nk_style_chart;

  { Pnk_style_combo  }
  Pnk_style_combo = ^nk_style_combo;

  { Pnk_style_tab  }
  Pnk_style_tab = ^nk_style_tab;

  { Pnk_style_window_header  }
  Pnk_style_window_header = ^nk_style_window_header;

  { Pnk_style_window  }
  Pnk_style_window = ^nk_style_window;

  { Pnk_style  }
  Pnk_style = ^nk_style;

  { Pnk_chart_slot  }
  Pnk_chart_slot = ^nk_chart_slot;

  { Pnk_chart  }
  Pnk_chart = ^nk_chart;

  { Pnk_row_layout  }
  Pnk_row_layout = ^nk_row_layout;

  { Pnk_popup_buffer  }
  Pnk_popup_buffer = ^nk_popup_buffer;

  { Pnk_menu_state  }
  Pnk_menu_state = ^nk_menu_state;

  { Pnk_panel  }
  Pnk_panel = ^nk_panel;

  { Pnk_popup_state  }
  Pnk_popup_state = ^nk_popup_state;

  { Pnk_edit_state  }
  Pnk_edit_state = ^nk_edit_state;

  { Pnk_property_state  }
  Pnk_property_state = ^nk_property_state;

  { Pnk_window  }
  Pnk_window = ^nk_window;

  { Pnk_config_stack_style_item_element  }
  Pnk_config_stack_style_item_element = ^nk_config_stack_style_item_element;

  { Pnk_config_stack_float_element  }
  Pnk_config_stack_float_element = ^nk_config_stack_float_element;

  { Pnk_config_stack_vec2_element  }
  Pnk_config_stack_vec2_element = ^nk_config_stack_vec2_element;

  { Pnk_config_stack_flags_element  }
  Pnk_config_stack_flags_element = ^nk_config_stack_flags_element;

  { Pnk_config_stack_color_element  }
  Pnk_config_stack_color_element = ^nk_config_stack_color_element;

  { Pnk_config_stack_user_font_element  }
  Pnk_config_stack_user_font_element = ^nk_config_stack_user_font_element;

  { Pnk_config_stack_button_behavior_element  }
  Pnk_config_stack_button_behavior_element = ^nk_config_stack_button_behavior_element;

  { Pnk_config_stack_style_item  }
  Pnk_config_stack_style_item = ^nk_config_stack_style_item;

  { Pnk_config_stack_float  }
  Pnk_config_stack_float = ^nk_config_stack_float;

  { Pnk_config_stack_vec2  }
  Pnk_config_stack_vec2 = ^nk_config_stack_vec2;

  { Pnk_config_stack_flags  }
  Pnk_config_stack_flags = ^nk_config_stack_flags;

  { Pnk_config_stack_color  }
  Pnk_config_stack_color = ^nk_config_stack_color;

  { Pnk_config_stack_user_font  }
  Pnk_config_stack_user_font = ^nk_config_stack_user_font;

  { Pnk_config_stack_button_behavior  }
  Pnk_config_stack_button_behavior = ^nk_config_stack_button_behavior;

  { Pnk_configuration_stacks  }
  Pnk_configuration_stacks = ^nk_configuration_stacks;

  { Pnk_table  }
  Pnk_table = ^nk_table;

  { Pnk_page_element  }
  Pnk_page_element = ^nk_page_element;

  { Pnk_page  }
  Pnk_page = ^nk_page;

  { Pnk_pool  }
  Pnk_pool = ^nk_pool;

  { Pnk_context  }
  Pnk_context = ^nk_context;

  { Ptm_zip_s  }
  Ptm_zip_s = ^tm_zip_s;

  { Pzip_fileinfo  }
  Pzip_fileinfo = ^zip_fileinfo;

  { ALLEGRO_TIMEOUT  }
  ALLEGRO_TIMEOUT = record
    __pad1__: UInt64;
    __pad2__: UInt64;
  end;

  { ALLEGRO_COLOR  }
  ALLEGRO_COLOR = record
    r: Single;
    g: Single;
    b: Single;
    a: Single;
  end;

  { PALLEGRO_BITMAP  }
  PALLEGRO_BITMAP = Pointer;

  { PPALLEGRO_BITMAP  }
  PPALLEGRO_BITMAP = ^PALLEGRO_BITMAP;

  { _al_tagbstring  }
  _al_tagbstring = record
    mlen: Integer;
    slen: Integer;
    data: PByte;
  end;

  { PALLEGRO_PATH  }
  PALLEGRO_PATH = Pointer;

  { PALLEGRO_USTR_INFO  }
  PALLEGRO_USTR_INFO = ^ALLEGRO_USTR_INFO;

  { ALLEGRO_USTR_INFO  }
  ALLEGRO_USTR_INFO = _al_tagbstring;

  { PALLEGRO_USTR  }
  PALLEGRO_USTR = ^ALLEGRO_USTR;

  { ALLEGRO_USTR  }
  ALLEGRO_USTR = _al_tagbstring;

  { PPALLEGRO_PATH  }
  PPALLEGRO_PATH = ^PALLEGRO_PATH;

  { PALLEGRO_FILE  }
  PALLEGRO_FILE = Pointer;

  { PPALLEGRO_FILE  }
  PPALLEGRO_FILE = ^PALLEGRO_FILE;

  { ALLEGRO_FILE_INTERFACE  }
  ALLEGRO_FILE_INTERFACE = record
    fi_fopen: function(const path: PUTF8Char; const mode: PUTF8Char): Pointer; cdecl;
    fi_fclose: function(handle: PALLEGRO_FILE): Boolean; cdecl;
    fi_fread: function(f: PALLEGRO_FILE; ptr: Pointer; size: NativeUInt): NativeUInt; cdecl;
    fi_fwrite: function(f: PALLEGRO_FILE; const ptr: Pointer; size: NativeUInt): NativeUInt; cdecl;
    fi_fflush: function(f: PALLEGRO_FILE): Boolean; cdecl;
    fi_ftell: function(f: PALLEGRO_FILE): Int64; cdecl;
    fi_fseek: function(f: PALLEGRO_FILE; offset: Int64; whence: Integer): Boolean; cdecl;
    fi_feof: function(f: PALLEGRO_FILE): Boolean; cdecl;
    fi_ferror: function(f: PALLEGRO_FILE): Integer; cdecl;
    fi_ferrmsg: function(f: PALLEGRO_FILE): PUTF8Char; cdecl;
    fi_fclearerr: procedure(f: PALLEGRO_FILE); cdecl;
    fi_fungetc: function(f: PALLEGRO_FILE; c: Integer): Integer; cdecl;
    fi_fsize: function(f: PALLEGRO_FILE): longint; cdecl;
  end;

  { ALLEGRO_IIO_LOADER_FUNCTION  }
  ALLEGRO_IIO_LOADER_FUNCTION = function(const filename: PUTF8Char; flags: Integer): PALLEGRO_BITMAP; cdecl;

  { ALLEGRO_IIO_FS_LOADER_FUNCTION  }
  ALLEGRO_IIO_FS_LOADER_FUNCTION = function(fp: PALLEGRO_FILE; flags: Integer): PALLEGRO_BITMAP; cdecl;

  { ALLEGRO_IIO_SAVER_FUNCTION  }
  ALLEGRO_IIO_SAVER_FUNCTION = function(const filename: PUTF8Char; bitmap: PALLEGRO_BITMAP): Boolean; cdecl;

  { ALLEGRO_IIO_FS_SAVER_FUNCTION  }
  ALLEGRO_IIO_FS_SAVER_FUNCTION = function(fp: PALLEGRO_FILE; bitmap: PALLEGRO_BITMAP): Boolean; cdecl;

  { ALLEGRO_IIO_IDENTIFIER_FUNCTION  }
  ALLEGRO_IIO_IDENTIFIER_FUNCTION = function(f: PALLEGRO_FILE): Boolean; cdecl;

  { ALLEGRO_LOCKED_REGION  }
  ALLEGRO_LOCKED_REGION = record
    data: Pointer;
    format: Integer;
    pitch: Integer;
    pixel_size: Integer;
  end;

  { ALLEGRO_EVENT_TYPE  }
  ALLEGRO_EVENT_TYPE = Cardinal;

  { ALLEGRO_EVENT_SOURCE  }
  ALLEGRO_EVENT_SOURCE = record
    __pad: array [0..31] of Integer;
  end;

  { ALLEGRO_ANY_EVENT  }
  ALLEGRO_ANY_EVENT = record
    _type: ALLEGRO_EVENT_TYPE;
    source: PALLEGRO_EVENT_SOURCE;
    timestamp: Double;
  end;

  { PALLEGRO_DISPLAY  }
  PALLEGRO_DISPLAY = Pointer;

  { PPALLEGRO_DISPLAY  }
  PPALLEGRO_DISPLAY = ^PALLEGRO_DISPLAY;

  { ALLEGRO_DISPLAY_EVENT  }
  ALLEGRO_DISPLAY_EVENT = record
    _type: ALLEGRO_EVENT_TYPE;
    source: PALLEGRO_DISPLAY;
    timestamp: Double;
    x: Integer;
    y: Integer;
    width: Integer;
    height: Integer;
    orientation: Integer;
  end;

  { PALLEGRO_JOYSTICK  }
  PALLEGRO_JOYSTICK = Pointer;

  { PPALLEGRO_JOYSTICK  }
  PPALLEGRO_JOYSTICK = ^PALLEGRO_JOYSTICK;

  { ALLEGRO_JOYSTICK_EVENT  }
  ALLEGRO_JOYSTICK_EVENT = record
    _type: ALLEGRO_EVENT_TYPE;
    source: PALLEGRO_JOYSTICK;
    timestamp: Double;
    id: PALLEGRO_JOYSTICK;
    stick: Integer;
    axis: Integer;
    pos: Single;
    button: Integer;
  end;

  { PALLEGRO_KEYBOARD  }
  PALLEGRO_KEYBOARD = Pointer;

  { PPALLEGRO_KEYBOARD  }
  PPALLEGRO_KEYBOARD = ^PALLEGRO_KEYBOARD;

  { ALLEGRO_KEYBOARD_EVENT  }
  ALLEGRO_KEYBOARD_EVENT = record
    _type: ALLEGRO_EVENT_TYPE;
    source: PALLEGRO_KEYBOARD;
    timestamp: Double;
    display: PALLEGRO_DISPLAY;
    keycode: Integer;
    unichar: Integer;
    modifiers: Cardinal;
    _repeat: Boolean;
  end;

  { PALLEGRO_MOUSE  }
  PALLEGRO_MOUSE = Pointer;

  { PPALLEGRO_MOUSE  }
  PPALLEGRO_MOUSE = ^PALLEGRO_MOUSE;

  { ALLEGRO_MOUSE_EVENT  }
  ALLEGRO_MOUSE_EVENT = record
    _type: ALLEGRO_EVENT_TYPE;
    source: PALLEGRO_MOUSE;
    timestamp: Double;
    display: PALLEGRO_DISPLAY;
    x: Integer;
    y: Integer;
    z: Integer;
    w: Integer;
    dx: Integer;
    dy: Integer;
    dz: Integer;
    dw: Integer;
    button: Cardinal;
    pressure: Single;
  end;

  { PALLEGRO_TIMER  }
  PALLEGRO_TIMER = Pointer;

  { PPALLEGRO_TIMER  }
  PPALLEGRO_TIMER = ^PALLEGRO_TIMER;

  { ALLEGRO_TIMER_EVENT  }
  ALLEGRO_TIMER_EVENT = record
    _type: ALLEGRO_EVENT_TYPE;
    source: PALLEGRO_TIMER;
    timestamp: Double;
    count: Int64;
    error: Double;
  end;

  { PALLEGRO_TOUCH_INPUT  }
  PALLEGRO_TOUCH_INPUT = Pointer;

  { PPALLEGRO_TOUCH_INPUT  }
  PPALLEGRO_TOUCH_INPUT = ^PALLEGRO_TOUCH_INPUT;

  { ALLEGRO_TOUCH_EVENT  }
  ALLEGRO_TOUCH_EVENT = record
    _type: ALLEGRO_EVENT_TYPE;
    source: PALLEGRO_TOUCH_INPUT;
    timestamp: Double;
    display: PALLEGRO_DISPLAY;
    id: Integer;
    x: Single;
    y: Single;
    dx: Single;
    dy: Single;
    primary: Boolean;
  end;

  { ALLEGRO_USER_EVENT  }
  ALLEGRO_USER_EVENT = record
    _type: ALLEGRO_EVENT_TYPE;
    source: PALLEGRO_EVENT_SOURCE;
    timestamp: Double;
    __internal__descr: PALLEGRO_USER_EVENT_DESCRIPTOR;
    data1: IntPtr;
    data2: IntPtr;
    data3: IntPtr;
    data4: IntPtr;
  end;

  { PALLEGRO_EVENT  }
  PALLEGRO_EVENT = ^ALLEGRO_EVENT;

  { ALLEGRO_EVENT  }
  ALLEGRO_EVENT = record
    case Integer of
      0: (_type: ALLEGRO_EVENT_TYPE);
      1: (any: ALLEGRO_ANY_EVENT);
      2: (display: ALLEGRO_DISPLAY_EVENT);
      3: (joystick: ALLEGRO_JOYSTICK_EVENT);
      4: (keyboard: ALLEGRO_KEYBOARD_EVENT);
      5: (mouse: ALLEGRO_MOUSE_EVENT);
      6: (timer: ALLEGRO_TIMER_EVENT);
      7: (touch: ALLEGRO_TOUCH_EVENT);
      8: (user: ALLEGRO_USER_EVENT);
  end;

  { PALLEGRO_EVENT_QUEUE  }
  PALLEGRO_EVENT_QUEUE = Pointer;

  { PPALLEGRO_EVENT_QUEUE  }
  PPALLEGRO_EVENT_QUEUE = ^PALLEGRO_EVENT_QUEUE;

  { PALLEGRO_CONFIG  }
  PALLEGRO_CONFIG = Pointer;

  { PPALLEGRO_CONFIG  }
  PPALLEGRO_CONFIG = ^PALLEGRO_CONFIG;

  { PALLEGRO_CONFIG_SECTION  }
  PALLEGRO_CONFIG_SECTION = Pointer;

  { PPALLEGRO_CONFIG_SECTION  }
  PPALLEGRO_CONFIG_SECTION = ^PALLEGRO_CONFIG_SECTION;

  { PALLEGRO_CONFIG_ENTRY  }
  PALLEGRO_CONFIG_ENTRY = Pointer;

  { PPALLEGRO_CONFIG_ENTRY  }
  PPALLEGRO_CONFIG_ENTRY = ^PALLEGRO_CONFIG_ENTRY;

  { al_fixed  }
  al_fixed = Int32;

  { ALLEGRO_FS_ENTRY  }
  ALLEGRO_FS_ENTRY = record
    vtable: PALLEGRO_FS_INTERFACE;
  end;

  { ALLEGRO_FS_INTERFACE  }
  ALLEGRO_FS_INTERFACE = record
    fs_create_entry: function(const path: PUTF8Char): PALLEGRO_FS_ENTRY; cdecl;
    fs_destroy_entry: procedure(e: PALLEGRO_FS_ENTRY); cdecl;
    fs_entry_name: function(e: PALLEGRO_FS_ENTRY): PUTF8Char; cdecl;
    fs_update_entry: function(e: PALLEGRO_FS_ENTRY): Boolean; cdecl;
    fs_entry_mode: function(e: PALLEGRO_FS_ENTRY): UInt32; cdecl;
    fs_entry_atime: function(e: PALLEGRO_FS_ENTRY): Longint; cdecl;
    fs_entry_mtime: function(e: PALLEGRO_FS_ENTRY): Longint; cdecl;
    fs_entry_ctime: function(e: PALLEGRO_FS_ENTRY): Longint; cdecl;
    fs_entry_size: function(e: PALLEGRO_FS_ENTRY): longint; cdecl;
    fs_entry_exists: function(e: PALLEGRO_FS_ENTRY): Boolean; cdecl;
    fs_remove_entry: function(e: PALLEGRO_FS_ENTRY): Boolean; cdecl;
    fs_open_directory: function(e: PALLEGRO_FS_ENTRY): Boolean; cdecl;
    fs_read_directory: function(e: PALLEGRO_FS_ENTRY): PALLEGRO_FS_ENTRY; cdecl;
    fs_close_directory: function(e: PALLEGRO_FS_ENTRY): Boolean; cdecl;
    fs_filename_exists: function(const path: PUTF8Char): Boolean; cdecl;
    fs_remove_filename: function(const path: PUTF8Char): Boolean; cdecl;
    fs_get_current_directory: function(): PUTF8Char; cdecl;
    fs_change_directory: function(const path: PUTF8Char): Boolean; cdecl;
    fs_make_directory: function(const path: PUTF8Char): Boolean; cdecl;
    fs_open_file: function(e: PALLEGRO_FS_ENTRY; const mode: PUTF8Char): PALLEGRO_FILE; cdecl;
  end;

  { ALLEGRO_DISPLAY_MODE  }
  ALLEGRO_DISPLAY_MODE = record
    width: Integer;
    height: Integer;
    format: Integer;
    refresh_rate: Integer;
  end;

  { _anonymous_type_21  }
  _anonymous_type_21 = record
    axis: array [0..2] of Single;
  end;

  { P_anonymous_type_21  }
  P_anonymous_type_21 = ^_anonymous_type_21;

  { ALLEGRO_JOYSTICK_STATE  }
  ALLEGRO_JOYSTICK_STATE = record
    stick: array [0..15] of _anonymous_type_21;
    button: array [0..31] of Integer;
  end;

  { ALLEGRO_KEYBOARD_STATE  }
  ALLEGRO_KEYBOARD_STATE = record
    display: PALLEGRO_DISPLAY;
    __key_down__internal__: array [0..7] of Cardinal;
  end;

  { ALLEGRO_MOUSE_STATE  }
  ALLEGRO_MOUSE_STATE = record
    x: Integer;
    y: Integer;
    z: Integer;
    w: Integer;
    more_axes: array [0..3] of Integer;
    buttons: Integer;
    pressure: Single;
    display: PALLEGRO_DISPLAY;
  end;

  { ALLEGRO_TOUCH_STATE  }
  ALLEGRO_TOUCH_STATE = record
    id: Integer;
    x: Single;
    y: Single;
    dx: Single;
    dy: Single;
    primary: Boolean;
    display: PALLEGRO_DISPLAY;
  end;

  { ALLEGRO_TOUCH_INPUT_STATE  }
  ALLEGRO_TOUCH_INPUT_STATE = record
    touches: array [0..15] of ALLEGRO_TOUCH_STATE;
  end;

  { PALLEGRO_HAPTIC  }
  PALLEGRO_HAPTIC = Pointer;

  { PPALLEGRO_HAPTIC  }
  PPALLEGRO_HAPTIC = ^PALLEGRO_HAPTIC;

  { ALLEGRO_HAPTIC_DIRECTION  }
  ALLEGRO_HAPTIC_DIRECTION = record
    angle: Double;
    radius: Double;
    azimuth: Double;
  end;

  { ALLEGRO_HAPTIC_REPLAY  }
  ALLEGRO_HAPTIC_REPLAY = record
    length: Double;
    delay: Double;
  end;

  { ALLEGRO_HAPTIC_ENVELOPE  }
  ALLEGRO_HAPTIC_ENVELOPE = record
    attack_length: Double;
    attack_level: Double;
    fade_length: Double;
    fade_level: Double;
  end;

  { ALLEGRO_HAPTIC_CONSTANT_EFFECT  }
  ALLEGRO_HAPTIC_CONSTANT_EFFECT = record
    level: Double;
    envelope: ALLEGRO_HAPTIC_ENVELOPE;
  end;

  { ALLEGRO_HAPTIC_RAMP_EFFECT  }
  ALLEGRO_HAPTIC_RAMP_EFFECT = record
    start_level: Double;
    end_level: Double;
    envelope: ALLEGRO_HAPTIC_ENVELOPE;
  end;

  { ALLEGRO_HAPTIC_CONDITION_EFFECT  }
  ALLEGRO_HAPTIC_CONDITION_EFFECT = record
    right_saturation: Double;
    left_saturation: Double;
    right_coeff: Double;
    left_coeff: Double;
    deadband: Double;
    center: Double;
  end;

  { ALLEGRO_HAPTIC_PERIODIC_EFFECT  }
  ALLEGRO_HAPTIC_PERIODIC_EFFECT = record
    waveform: Integer;
    period: Double;
    magnitude: Double;
    offset: Double;
    phase: Double;
    envelope: ALLEGRO_HAPTIC_ENVELOPE;
    custom_len: Integer;
    custom_data: PDouble;
  end;

  { ALLEGRO_HAPTIC_RUMBLE_EFFECT  }
  ALLEGRO_HAPTIC_RUMBLE_EFFECT = record
    strong_magnitude: Double;
    weak_magnitude: Double;
  end;

  { ALLEGRO_HAPTIC_EFFECT_UNION  }
  ALLEGRO_HAPTIC_EFFECT_UNION = record
    case Integer of
      0: (constant: ALLEGRO_HAPTIC_CONSTANT_EFFECT);
      1: (ramp: ALLEGRO_HAPTIC_RAMP_EFFECT);
      2: (periodic: ALLEGRO_HAPTIC_PERIODIC_EFFECT);
      3: (condition: ALLEGRO_HAPTIC_CONDITION_EFFECT);
      4: (rumble: ALLEGRO_HAPTIC_RUMBLE_EFFECT);
  end;

  { ALLEGRO_HAPTIC_EFFECT  }
  ALLEGRO_HAPTIC_EFFECT = record
    _type: Integer;
    direction: ALLEGRO_HAPTIC_DIRECTION;
    replay: ALLEGRO_HAPTIC_REPLAY;
    data: ALLEGRO_HAPTIC_EFFECT_UNION;
  end;

  { ALLEGRO_HAPTIC_EFFECT_ID  }
  ALLEGRO_HAPTIC_EFFECT_ID = record
    _haptic: PALLEGRO_HAPTIC;
    _id: Integer;
    _handle: Integer;
    _pointer: Pointer;
    _effect_duration: Double;
    _playing: Boolean;
    _start_time: Double;
    _end_time: Double;
    driver: Pointer;
  end;

  { ALLEGRO_MEMORY_INTERFACE  }
  ALLEGRO_MEMORY_INTERFACE = record
    mi_malloc: function(n: NativeUInt; line: Integer; const _file: PUTF8Char; const func: PUTF8Char): Pointer; cdecl;
    mi_free: procedure(ptr: Pointer; line: Integer; const _file: PUTF8Char; const func: PUTF8Char); cdecl;
    mi_realloc: function(ptr: Pointer; n: NativeUInt; line: Integer; const _file: PUTF8Char; const func: PUTF8Char): Pointer; cdecl;
    mi_calloc: function(count: NativeUInt; n: NativeUInt; line: Integer; const _file: PUTF8Char; const func: PUTF8Char): Pointer; cdecl;
  end;

  { ALLEGRO_MONITOR_INFO  }
  ALLEGRO_MONITOR_INFO = record
    x1: Integer;
    y1: Integer;
    x2: Integer;
    y2: Integer;
  end;

  { PALLEGRO_MOUSE_CURSOR  }
  PALLEGRO_MOUSE_CURSOR = Pointer;

  { PPALLEGRO_MOUSE_CURSOR  }
  PPALLEGRO_MOUSE_CURSOR = ^PALLEGRO_MOUSE_CURSOR;

  { ALLEGRO_TRANSFORM  }
  ALLEGRO_TRANSFORM = record
    m: array [0..3] of array [0..3] of Single;
  end;

  { PALLEGRO_SHADER  }
  PALLEGRO_SHADER = Pointer;

  { PPALLEGRO_SHADER  }
  PPALLEGRO_SHADER = ^PALLEGRO_SHADER;

  { PALLEGRO_SYSTEM  }
  PALLEGRO_SYSTEM = Pointer;

  { PPALLEGRO_SYSTEM  }
  PPALLEGRO_SYSTEM = ^PALLEGRO_SYSTEM;

  { PALLEGRO_THREAD  }
  PALLEGRO_THREAD = Pointer;

  { PPALLEGRO_THREAD  }
  PPALLEGRO_THREAD = ^PALLEGRO_THREAD;

  { PALLEGRO_MUTEX  }
  PALLEGRO_MUTEX = Pointer;

  { PPALLEGRO_MUTEX  }
  PPALLEGRO_MUTEX = ^PALLEGRO_MUTEX;

  { PALLEGRO_COND  }
  PALLEGRO_COND = Pointer;

  { PPALLEGRO_COND  }
  PPALLEGRO_COND = ^PALLEGRO_COND;

  { ALLEGRO_STATE  }
  ALLEGRO_STATE = record
    _tls: array [0..1023] of UTF8Char;
  end;

  { PALLEGRO_AUDIO_RECORDER  }
  PALLEGRO_AUDIO_RECORDER = Pointer;

  { PPALLEGRO_AUDIO_RECORDER  }
  PPALLEGRO_AUDIO_RECORDER = ^PALLEGRO_AUDIO_RECORDER;

  { ALLEGRO_AUDIO_RECORDER_EVENT  }
  ALLEGRO_AUDIO_RECORDER_EVENT = record
    _type: ALLEGRO_EVENT_TYPE;
    source: PALLEGRO_AUDIO_RECORDER;
    timestamp: Double;
    __internal__descr: PALLEGRO_USER_EVENT_DESCRIPTOR;
    buffer: Pointer;
    samples: Cardinal;
  end;

  { PALLEGRO_SAMPLE  }
  PALLEGRO_SAMPLE = Pointer;

  { PPALLEGRO_SAMPLE  }
  PPALLEGRO_SAMPLE = ^PALLEGRO_SAMPLE;

  { ALLEGRO_SAMPLE_ID  }
  ALLEGRO_SAMPLE_ID = record
    _index: Integer;
    _id: Integer;
  end;

  { PALLEGRO_SAMPLE_INSTANCE  }
  PALLEGRO_SAMPLE_INSTANCE = Pointer;

  { PPALLEGRO_SAMPLE_INSTANCE  }
  PPALLEGRO_SAMPLE_INSTANCE = ^PALLEGRO_SAMPLE_INSTANCE;

  { PALLEGRO_AUDIO_STREAM  }
  PALLEGRO_AUDIO_STREAM = Pointer;

  { PPALLEGRO_AUDIO_STREAM  }
  PPALLEGRO_AUDIO_STREAM = ^PALLEGRO_AUDIO_STREAM;

  { PALLEGRO_MIXER  }
  PALLEGRO_MIXER = Pointer;

  { PPALLEGRO_MIXER  }
  PPALLEGRO_MIXER = ^PALLEGRO_MIXER;

  { PALLEGRO_VOICE  }
  PALLEGRO_VOICE = Pointer;

  { PPALLEGRO_VOICE  }
  PPALLEGRO_VOICE = ^PALLEGRO_VOICE;

  { PALLEGRO_AUDIO_DEVICE  }
  PALLEGRO_AUDIO_DEVICE = Pointer;

  { PPALLEGRO_AUDIO_DEVICE  }
  PPALLEGRO_AUDIO_DEVICE = ^PALLEGRO_AUDIO_DEVICE;

  { PALLEGRO_FONT  }
  PALLEGRO_FONT = Pointer;

  { PPALLEGRO_FONT  }
  PPALLEGRO_FONT = ^PALLEGRO_FONT;

  { ALLEGRO_GLYPH  }
  ALLEGRO_GLYPH = record
    bitmap: PALLEGRO_BITMAP;
    x: Integer;
    y: Integer;
    w: Integer;
    h: Integer;
    kerning: Integer;
    offset_x: Integer;
    offset_y: Integer;
    advance: Integer;
  end;

  { PALLEGRO_FILECHOOSER  }
  PALLEGRO_FILECHOOSER = Pointer;

  { PPALLEGRO_FILECHOOSER  }
  PPALLEGRO_FILECHOOSER = ^PALLEGRO_FILECHOOSER;

  { PALLEGRO_TEXTLOG  }
  PALLEGRO_TEXTLOG = Pointer;

  { PPALLEGRO_TEXTLOG  }
  PPALLEGRO_TEXTLOG = ^PALLEGRO_TEXTLOG;

  { PALLEGRO_MENU  }
  PALLEGRO_MENU = Pointer;

  { PPALLEGRO_MENU  }
  PPALLEGRO_MENU = ^PALLEGRO_MENU;

  { ALLEGRO_MENU_INFO  }
  ALLEGRO_MENU_INFO = record
    caption: PUTF8Char;
    id: UInt16;
    flags: Integer;
    icon: PALLEGRO_BITMAP;
  end;

  { ALLEGRO_VERTEX_ELEMENT  }
  ALLEGRO_VERTEX_ELEMENT = record
    attribute: Integer;
    storage: Integer;
    offset: Integer;
  end;

  { PALLEGRO_VERTEX_DECL  }
  PALLEGRO_VERTEX_DECL = Pointer;

  { PPALLEGRO_VERTEX_DECL  }
  PPALLEGRO_VERTEX_DECL = ^PALLEGRO_VERTEX_DECL;

  { ALLEGRO_VERTEX  }
  ALLEGRO_VERTEX = record
    x: Single;
    y: Single;
    z: Single;
    u: Single;
    v: Single;
    color: ALLEGRO_COLOR;
  end;

  { PALLEGRO_VERTEX_BUFFER  }
  PALLEGRO_VERTEX_BUFFER = Pointer;

  { PPALLEGRO_VERTEX_BUFFER  }
  PPALLEGRO_VERTEX_BUFFER = ^PALLEGRO_VERTEX_BUFFER;

  { PALLEGRO_INDEX_BUFFER  }
  PALLEGRO_INDEX_BUFFER = Pointer;

  { PPALLEGRO_INDEX_BUFFER  }
  PPALLEGRO_INDEX_BUFFER = ^PALLEGRO_INDEX_BUFFER;

  { PALLEGRO_VIDEO  }
  PALLEGRO_VIDEO = Pointer;

  { PPALLEGRO_VIDEO  }
  PPALLEGRO_VIDEO = ^PALLEGRO_VIDEO;

  { PHYSFS_uint8  }
  PHYSFS_uint8 = Byte;

  { PHYSFS_sint8  }
  PHYSFS_sint8 = UTF8Char;

  { PHYSFS_uint16  }
  PHYSFS_uint16 = Word;

  { PPHYSFS_uint16  }
  PPHYSFS_uint16 = ^PHYSFS_uint16;

  { PHYSFS_sint16  }
  PHYSFS_sint16 = Smallint;

  { PPHYSFS_sint16  }
  PPHYSFS_sint16 = ^PHYSFS_sint16;

  { PHYSFS_uint32  }
  PHYSFS_uint32 = Cardinal;

  { PPHYSFS_uint32  }
  PPHYSFS_uint32 = ^PHYSFS_uint32;

  { PHYSFS_sint32  }
  PHYSFS_sint32 = Integer;

  { PPHYSFS_sint32  }
  PPHYSFS_sint32 = ^PHYSFS_sint32;

  { PHYSFS_sint64  }
  PHYSFS_sint64 = Int64;

  { PPHYSFS_sint64  }
  PPHYSFS_sint64 = ^PHYSFS_sint64;

  { PHYSFS_uint64  }
  PHYSFS_uint64 = UInt64;

  { PPHYSFS_uint64  }
  PPHYSFS_uint64 = ^PHYSFS_uint64;

  { PHYSFS_compile_time_assert_uint8IsOneByte  }
  PHYSFS_compile_time_assert_uint8IsOneByte = array [0..0] of Integer;

  { PHYSFS_compile_time_assert_sint8IsOneByte  }
  PHYSFS_compile_time_assert_sint8IsOneByte = array [0..0] of Integer;

  { PHYSFS_compile_time_assert_uint16IsTwoBytes  }
  PHYSFS_compile_time_assert_uint16IsTwoBytes = array [0..0] of Integer;

  { PHYSFS_compile_time_assert_sint16IsTwoBytes  }
  PHYSFS_compile_time_assert_sint16IsTwoBytes = array [0..0] of Integer;

  { PHYSFS_compile_time_assert_uint32IsFourBytes  }
  PHYSFS_compile_time_assert_uint32IsFourBytes = array [0..0] of Integer;

  { PHYSFS_compile_time_assert_sint32IsFourBytes  }
  PHYSFS_compile_time_assert_sint32IsFourBytes = array [0..0] of Integer;

  { PHYSFS_compile_time_assert_uint64IsEightBytes  }
  PHYSFS_compile_time_assert_uint64IsEightBytes = array [0..0] of Integer;

  { PHYSFS_compile_time_assert_sint64IsEightBytes  }
  PHYSFS_compile_time_assert_sint64IsEightBytes = array [0..0] of Integer;

  { PHYSFS_File  }
  PHYSFS_File = record
    opaque: Pointer;
  end;

  { PHYSFS_ArchiveInfo  }
  PHYSFS_ArchiveInfo = record
    extension: PUTF8Char;
    description: PUTF8Char;
    author: PUTF8Char;
    url: PUTF8Char;
    supportsSymlinks: Integer;
  end;

  { PHYSFS_Version  }
  PHYSFS_Version = record
    major: PHYSFS_uint8;
    minor: PHYSFS_uint8;
    patch: PHYSFS_uint8;
  end;

  { PHYSFS_Allocator  }
  PHYSFS_Allocator = record
    Init: function(): Integer; cdecl;
    Deinit: procedure(); cdecl;
    Malloc: function(p1: PHYSFS_uint64): Pointer; cdecl;
    Realloc: function(p1: Pointer; p2: PHYSFS_uint64): Pointer; cdecl;
    Free: procedure(p1: Pointer); cdecl;
  end;

  { PHYSFS_StringCallback  }
  PHYSFS_StringCallback = procedure(data: Pointer; const str: PUTF8Char); cdecl;

  { PHYSFS_EnumFilesCallback  }
  PHYSFS_EnumFilesCallback = procedure(data: Pointer; const origdir: PUTF8Char; const fname: PUTF8Char); cdecl;

  { PHYSFS_EnumerateCallback  }
  PHYSFS_EnumerateCallback = function(data: Pointer; const origdir: PUTF8Char; const fname: PUTF8Char): PHYSFS_EnumerateCallbackResult; cdecl;

  { PHYSFS_Stat_  }
  PHYSFS_Stat_ = record
    filesize: PHYSFS_sint64;
    modtime: PHYSFS_sint64;
    createtime: PHYSFS_sint64;
    accesstime: PHYSFS_sint64;
    filetype: PHYSFS_FileType;
    readonly: Integer;
  end;

  { PHYSFS_Io  }
  PHYSFS_Io = record
    version: PHYSFS_uint32;
    opaque: Pointer;
    read: function(io: PPHYSFS_Io; buf: Pointer; len: PHYSFS_uint64): PHYSFS_sint64; cdecl;
    write: function(io: PPHYSFS_Io; const buffer: Pointer; len: PHYSFS_uint64): PHYSFS_sint64; cdecl;
    seek: function(io: PPHYSFS_Io; offset: PHYSFS_uint64): Integer; cdecl;
    tell: function(io: PPHYSFS_Io): PHYSFS_sint64; cdecl;
    length: function(io: PPHYSFS_Io): PHYSFS_sint64; cdecl;
    duplicate: function(io: PPHYSFS_Io): PPHYSFS_Io; cdecl;
    flush: function(io: PPHYSFS_Io): Integer; cdecl;
    destroy: procedure(io: PPHYSFS_Io); cdecl;
  end;

  { PHYSFS_Archiver  }
  PHYSFS_Archiver = record
    version: PHYSFS_uint32;
    info: PHYSFS_ArchiveInfo;
    openArchive: function(io: PPHYSFS_Io; const name: PUTF8Char; forWrite: Integer; claimed: PInteger): Pointer; cdecl;
    enumerate: function(opaque: Pointer; const dirname: PUTF8Char; cb: PHYSFS_EnumerateCallback; const origdir: PUTF8Char; callbackdata: Pointer): PHYSFS_EnumerateCallbackResult; cdecl;
    openRead: function(opaque: Pointer; const fnm: PUTF8Char): PPHYSFS_Io; cdecl;
    openWrite: function(opaque: Pointer; const filename: PUTF8Char): PPHYSFS_Io; cdecl;
    openAppend: function(opaque: Pointer; const filename: PUTF8Char): PPHYSFS_Io; cdecl;
    remove: function(opaque: Pointer; const filename: PUTF8Char): Integer; cdecl;
    mkdir: function(opaque: Pointer; const filename: PUTF8Char): Integer; cdecl;
    stat: function(opaque: Pointer; const fn: PUTF8Char; stat: PPHYSFS_Stat_): Integer; cdecl;
    closeArchive: procedure(opaque: Pointer); cdecl;
  end;

  { nk_char  }
  nk_char = Int8;

  { nk_uchar  }
  nk_uchar = UInt8;

  { nk_byte  }
  nk_byte = UInt8;

  { Pnk_byte  }
  Pnk_byte = ^nk_byte;

  { nk_short  }
  nk_short = Int16;

  { nk_ushort  }
  nk_ushort = UInt16;

  { nk_int  }
  nk_int = Int32;

  { nk_uint  }
  nk_uint = UInt32;

  { Pnk_uint  }
  Pnk_uint = ^nk_uint;

  { nk_size  }
  nk_size = UIntPtr;

  { Pnk_size  }
  Pnk_size = ^nk_size;

  { nk_ptr  }
  nk_ptr = UIntPtr;

  { nk_bool  }
  nk_bool = Boolean;

  { Pnk_bool  }
  Pnk_bool = ^nk_bool;

  { nk_hash  }
  nk_hash = nk_uint;

  { nk_flags  }
  nk_flags = nk_uint;

  { Pnk_flags  }
  Pnk_flags = ^nk_flags;

  { nk_rune  }
  nk_rune = nk_uint;

  { Pnk_rune  }
  Pnk_rune = ^nk_rune;

  { _dummy_array0  }
  _dummy_array0 = array [0..0] of UTF8Char;

  { _dummy_array1  }
  _dummy_array1 = array [0..0] of UTF8Char;

  { _dummy_array2  }
  _dummy_array2 = array [0..0] of UTF8Char;

  { _dummy_array3  }
  _dummy_array3 = array [0..0] of UTF8Char;

  { _dummy_array4  }
  _dummy_array4 = array [0..0] of UTF8Char;

  { _dummy_array5  }
  _dummy_array5 = array [0..0] of UTF8Char;

  { _dummy_array6  }
  _dummy_array6 = array [0..0] of UTF8Char;

  { _dummy_array7  }
  _dummy_array7 = array [0..0] of UTF8Char;

  { _dummy_array8  }
  _dummy_array8 = array [0..0] of UTF8Char;

  { _dummy_array9  }
  _dummy_array9 = array [0..0] of UTF8Char;

  { nk_color  }
  nk_color = record
    r: nk_byte;
    g: nk_byte;
    b: nk_byte;
    a: nk_byte;
  end;

  { nk_colorf  }
  nk_colorf = record
    r: Single;
    g: Single;
    b: Single;
    a: Single;
  end;

  { nk_vec2  }
  nk_vec2 = record
    x: Single;
    y: Single;
  end;

  { nk_vec2i  }
  nk_vec2i = record
    x: Smallint;
    y: Smallint;
  end;

  { nk_rect  }
  nk_rect = record
    x: Single;
    y: Single;
    w: Single;
    h: Single;
  end;

  { nk_recti  }
  nk_recti = record
    x: Smallint;
    y: Smallint;
    w: Smallint;
    h: Smallint;
  end;

  { nk_glyph  }
  nk_glyph = array [0..3] of UTF8Char;

  { nk_handle  }
  nk_handle = record
    case Integer of
      0: (ptr: Pointer);
      1: (id: Integer);
  end;

  { nk_image  }
  nk_image = record
    handle: nk_handle;
    w: nk_ushort;
    h: nk_ushort;
    region: array [0..3] of nk_ushort;
  end;

  { nk_nine_slice  }
  nk_nine_slice = record
    img: nk_image;
    l: nk_ushort;
    t: nk_ushort;
    r: nk_ushort;
    b: nk_ushort;
  end;

  { nk_cursor  }
  nk_cursor = record
    img: nk_image;
    size: nk_vec2;
    offset: nk_vec2;
  end;

  { nk_scroll  }
  nk_scroll = record
    x: nk_uint;
    y: nk_uint;
  end;

  { nk_plugin_alloc  }
  nk_plugin_alloc = function(p1: nk_handle; old: Pointer; p3: nk_size): Pointer; cdecl;

  { nk_plugin_free  }
  nk_plugin_free = procedure(p1: nk_handle; old: Pointer); cdecl;

  { nk_plugin_filter  }
  nk_plugin_filter = function(const p1: Pnk_text_edit; unicode: nk_rune): nk_bool; cdecl;

  { nk_plugin_paste  }
  nk_plugin_paste = procedure(p1: nk_handle; p2: Pnk_text_edit); cdecl;

  { nk_plugin_copy  }
  nk_plugin_copy = procedure(p1: nk_handle; const p2: PUTF8Char; len: Integer); cdecl;

  { nk_allocator  }
  nk_allocator = record
    userdata: nk_handle;
    alloc: nk_plugin_alloc;
    free: nk_plugin_free;
  end;

  { nk_draw_null_texture  }
  nk_draw_null_texture = record
    texture: nk_handle;
    uv: nk_vec2;
  end;

  { nk_convert_config  }
  nk_convert_config = record
    global_alpha: Single;
    line_AA: nk_anti_aliasing;
    shape_AA: nk_anti_aliasing;
    circle_segment_count: Cardinal;
    arc_segment_count: Cardinal;
    curve_segment_count: Cardinal;
    null: nk_draw_null_texture;
    vertex_layout: Pnk_draw_vertex_layout_element;
    vertex_size: nk_size;
    vertex_alignment: nk_size;
  end;

  { nk_list_view  }
  nk_list_view = record
    _begin: Integer;
    _end: Integer;
    count: Integer;
    total_height: Integer;
    ctx: Pnk_context;
    scroll_pointer: Pnk_uint;
    scroll_value: nk_uint;
  end;

  { nk_text_width_f  }
  nk_text_width_f = function(p1: nk_handle; h: Single; const p3: PUTF8Char; len: Integer): Single; cdecl;

  { nk_query_font_glyph_f  }
  nk_query_font_glyph_f = procedure(handle: nk_handle; font_height: Single; glyph: Pnk_user_font_glyph; codepoint: nk_rune; next_codepoint: nk_rune); cdecl;

  { nk_user_font_glyph  }
  nk_user_font_glyph = record
    uv: array [0..1] of nk_vec2;
    offset: nk_vec2;
    width: Single;
    height: Single;
    xadvance: Single;
  end;

  { nk_user_font  }
  nk_user_font = record
    userdata: nk_handle;
    height: Single;
    width: nk_text_width_f;
  end;

  { nk_baked_font  }
  nk_baked_font = record
    height: Single;
    ascent: Single;
    descent: Single;
    glyph_offset: nk_rune;
    glyph_count: nk_rune;
    ranges: Pnk_rune;
  end;

  { nk_font_config  }
  nk_font_config = record
    next: Pnk_font_config;
    ttf_blob: Pointer;
    ttf_size: nk_size;
    ttf_data_owned_by_atlas: Byte;
    merge_mode: Byte;
    pixel_snap: Byte;
    oversample_v: Byte;
    oversample_h: Byte;
    padding: array [0..2] of Byte;
    size: Single;
    coord_type: nk_font_coord_type;
    spacing: nk_vec2;
    range: Pnk_rune;
    font: Pnk_baked_font;
    fallback_glyph: nk_rune;
    n: Pnk_font_config;
    p: Pnk_font_config;
  end;

  { nk_font_glyph  }
  nk_font_glyph = record
    codepoint: nk_rune;
    xadvance: Single;
    x0: Single;
    y0: Single;
    x1: Single;
    y1: Single;
    w: Single;
    h: Single;
    u0: Single;
    v0: Single;
    u1: Single;
    v1: Single;
  end;

  { nk_font  }
  nk_font = record
    next: Pnk_font;
    handle: nk_user_font;
    info: nk_baked_font;
    scale: Single;
    glyphs: Pnk_font_glyph;
    fallback: Pnk_font_glyph;
    fallback_codepoint: nk_rune;
    texture: nk_handle;
    config: Pnk_font_config;
  end;

  { nk_font_atlas  }
  nk_font_atlas = record
    pixel: Pointer;
    tex_width: Integer;
    tex_height: Integer;
    permanent: nk_allocator;
    temporary: nk_allocator;
    custom: nk_recti;
    cursors: array [0..6] of nk_cursor;
    glyph_count: Integer;
    glyphs: Pnk_font_glyph;
    default_font: Pnk_font;
    fonts: Pnk_font;
    config: Pnk_font_config;
    font_num: Integer;
  end;

  { nk_memory_status  }
  nk_memory_status = record
    memory: Pointer;
    _type: Cardinal;
    size: nk_size;
    allocated: nk_size;
    needed: nk_size;
    calls: nk_size;
  end;

  { nk_buffer_marker  }
  nk_buffer_marker = record
    active: nk_bool;
    offset: nk_size;
  end;

  { nk_memory  }
  nk_memory = record
    ptr: Pointer;
    size: nk_size;
  end;

  { nk_buffer  }
  nk_buffer = record
    marker: array [0..1] of nk_buffer_marker;
    pool: nk_allocator;
    _type: nk_allocation_type;
    memory: nk_memory;
    grow_factor: Single;
    allocated: nk_size;
    needed: nk_size;
    calls: nk_size;
    size: nk_size;
  end;

  { nk_str  }
  nk_str = record
    buffer: nk_buffer;
    len: Integer;
  end;

  { nk_clipboard  }
  nk_clipboard = record
    userdata: nk_handle;
    paste: nk_plugin_paste;
    copy: nk_plugin_copy;
  end;

  { nk_text_undo_record  }
  nk_text_undo_record = record
    where: Integer;
    insert_length: Smallint;
    delete_length: Smallint;
    char_storage: Smallint;
  end;

  { nk_text_undo_state  }
  nk_text_undo_state = record
    undo_rec: array [0..98] of nk_text_undo_record;
    undo_char: array [0..998] of nk_rune;
    undo_point: Smallint;
    redo_point: Smallint;
    undo_char_point: Smallint;
    redo_char_point: Smallint;
  end;

  { nk_text_edit  }
  nk_text_edit = record
    clip: nk_clipboard;
    _string: nk_str;
    filter: nk_plugin_filter;
    scrollbar: nk_vec2;
    cursor: Integer;
    select_start: Integer;
    select_end: Integer;
    mode: Byte;
    cursor_at_end_of_line: Byte;
    initialized: Byte;
    has_preferred_x: Byte;
    single_line: Byte;
    active: Byte;
    padding1: Byte;
    preferred_x: Single;
    undo: nk_text_undo_state;
  end;

  { nk_command  }
  nk_command = record
    _type: nk_command_type;
    next: nk_size;
  end;

  { nk_command_scissor  }
  nk_command_scissor = record
    header: nk_command;
    x: Smallint;
    y: Smallint;
    w: Word;
    h: Word;
  end;

  { nk_command_line  }
  nk_command_line = record
    header: nk_command;
    line_thickness: Word;
    _begin: nk_vec2i;
    _end: nk_vec2i;
    color: nk_color;
  end;

  { nk_command_curve  }
  nk_command_curve = record
    header: nk_command;
    line_thickness: Word;
    _begin: nk_vec2i;
    _end: nk_vec2i;
    ctrl: array [0..1] of nk_vec2i;
    color: nk_color;
  end;

  { nk_command_rect  }
  nk_command_rect = record
    header: nk_command;
    rounding: Word;
    line_thickness: Word;
    x: Smallint;
    y: Smallint;
    w: Word;
    h: Word;
    color: nk_color;
  end;

  { nk_command_rect_filled  }
  nk_command_rect_filled = record
    header: nk_command;
    rounding: Word;
    x: Smallint;
    y: Smallint;
    w: Word;
    h: Word;
    color: nk_color;
  end;

  { nk_command_rect_multi_color  }
  nk_command_rect_multi_color = record
    header: nk_command;
    x: Smallint;
    y: Smallint;
    w: Word;
    h: Word;
    left: nk_color;
    top: nk_color;
    bottom: nk_color;
    right: nk_color;
  end;

  { nk_command_triangle  }
  nk_command_triangle = record
    header: nk_command;
    line_thickness: Word;
    a: nk_vec2i;
    b: nk_vec2i;
    c: nk_vec2i;
    color: nk_color;
  end;

  { nk_command_triangle_filled  }
  nk_command_triangle_filled = record
    header: nk_command;
    a: nk_vec2i;
    b: nk_vec2i;
    c: nk_vec2i;
    color: nk_color;
  end;

  { nk_command_circle  }
  nk_command_circle = record
    header: nk_command;
    x: Smallint;
    y: Smallint;
    line_thickness: Word;
    w: Word;
    h: Word;
    color: nk_color;
  end;

  { nk_command_circle_filled  }
  nk_command_circle_filled = record
    header: nk_command;
    x: Smallint;
    y: Smallint;
    w: Word;
    h: Word;
    color: nk_color;
  end;

  { nk_command_arc  }
  nk_command_arc = record
    header: nk_command;
    cx: Smallint;
    cy: Smallint;
    r: Word;
    line_thickness: Word;
    a: array [0..1] of Single;
    color: nk_color;
  end;

  { nk_command_arc_filled  }
  nk_command_arc_filled = record
    header: nk_command;
    cx: Smallint;
    cy: Smallint;
    r: Word;
    a: array [0..1] of Single;
    color: nk_color;
  end;

  { nk_command_polygon  }
  nk_command_polygon = record
    header: nk_command;
    color: nk_color;
    line_thickness: Word;
    point_count: Word;
    points: array [0..0] of nk_vec2i;
  end;

  { nk_command_polygon_filled  }
  nk_command_polygon_filled = record
    header: nk_command;
    color: nk_color;
    point_count: Word;
    points: array [0..0] of nk_vec2i;
  end;

  { nk_command_polyline  }
  nk_command_polyline = record
    header: nk_command;
    color: nk_color;
    line_thickness: Word;
    point_count: Word;
    points: array [0..0] of nk_vec2i;
  end;

  { nk_command_image  }
  nk_command_image = record
    header: nk_command;
    x: Smallint;
    y: Smallint;
    w: Word;
    h: Word;
    img: nk_image;
    col: nk_color;
  end;

  { nk_command_custom_callback  }
  nk_command_custom_callback = procedure(canvas: Pointer; x: Smallint; y: Smallint; w: Word; h: Word; callback_data: nk_handle); cdecl;

  { nk_command_custom  }
  nk_command_custom = record
    header: nk_command;
    x: Smallint;
    y: Smallint;
    w: Word;
    h: Word;
    callback_data: nk_handle;
    callback: nk_command_custom_callback;
  end;

  { nk_command_text  }
  nk_command_text = record
    header: nk_command;
    font: Pnk_user_font;
    background: nk_color;
    foreground: nk_color;
    x: Smallint;
    y: Smallint;
    w: Word;
    h: Word;
    height: Single;
    length: Integer;
    _string: array [0..0] of UTF8Char;
  end;

  { nk_command_buffer  }
  nk_command_buffer = record
    base: Pnk_buffer;
    clip: nk_rect;
    use_clipping: Integer;
    userdata: nk_handle;
    _begin: nk_size;
    _end: nk_size;
    last: nk_size;
  end;

  { nk_mouse_button  }
  nk_mouse_button = record
    down: nk_bool;
    clicked: Cardinal;
    clicked_pos: nk_vec2;
  end;

  { nk_mouse  }
  nk_mouse = record
    buttons: array [0..3] of nk_mouse_button;
    pos: nk_vec2;
    prev: nk_vec2;
    delta: nk_vec2;
    scroll_delta: nk_vec2;
    grab: Byte;
    grabbed: Byte;
    ungrab: Byte;
  end;

  { nk_key  }
  nk_key = record
    down: nk_bool;
    clicked: Cardinal;
  end;

  { nk_keyboard  }
  nk_keyboard = record
    keys: array [0..29] of nk_key;
    text: array [0..15] of UTF8Char;
    text_len: Integer;
  end;

  { nk_input  }
  nk_input = record
    keyboard: nk_keyboard;
    mouse: nk_mouse;
  end;

  { nk_style_item_data  }
  nk_style_item_data = record
    case Integer of
      0: (color: nk_color);
      1: (image: nk_image);
      2: (slice: nk_nine_slice);
  end;

  { nk_style_item  }
  nk_style_item = record
    _type: nk_style_item_type;
    data: nk_style_item_data;
  end;

  { nk_style_text  }
  nk_style_text = record
    color: nk_color;
    padding: nk_vec2;
  end;

  { nk_style_button  }
  nk_style_button = record
    normal: nk_style_item;
    hover: nk_style_item;
    active: nk_style_item;
    border_color: nk_color;
    text_background: nk_color;
    text_normal: nk_color;
    text_hover: nk_color;
    text_active: nk_color;
    text_alignment: nk_flags;
    border: Single;
    rounding: Single;
    padding: nk_vec2;
    image_padding: nk_vec2;
    touch_padding: nk_vec2;
    userdata: nk_handle;
    draw_begin: procedure(p1: Pnk_command_buffer; userdata: nk_handle); cdecl;
    draw_end: procedure(p1: Pnk_command_buffer; userdata: nk_handle); cdecl;
  end;

  { nk_style_toggle  }
  nk_style_toggle = record
    normal: nk_style_item;
    hover: nk_style_item;
    active: nk_style_item;
    border_color: nk_color;
    cursor_normal: nk_style_item;
    cursor_hover: nk_style_item;
    text_normal: nk_color;
    text_hover: nk_color;
    text_active: nk_color;
    text_background: nk_color;
    text_alignment: nk_flags;
    padding: nk_vec2;
    touch_padding: nk_vec2;
    spacing: Single;
    border: Single;
    userdata: nk_handle;
    draw_begin: procedure(p1: Pnk_command_buffer; p2: nk_handle); cdecl;
    draw_end: procedure(p1: Pnk_command_buffer; p2: nk_handle); cdecl;
  end;

  { nk_style_selectable  }
  nk_style_selectable = record
    normal: nk_style_item;
    hover: nk_style_item;
    pressed: nk_style_item;
    normal_active: nk_style_item;
    hover_active: nk_style_item;
    pressed_active: nk_style_item;
    text_normal: nk_color;
    text_hover: nk_color;
    text_pressed: nk_color;
    text_normal_active: nk_color;
    text_hover_active: nk_color;
    text_pressed_active: nk_color;
    text_background: nk_color;
    text_alignment: nk_flags;
    rounding: Single;
    padding: nk_vec2;
    touch_padding: nk_vec2;
    image_padding: nk_vec2;
    userdata: nk_handle;
    draw_begin: procedure(p1: Pnk_command_buffer; p2: nk_handle); cdecl;
    draw_end: procedure(p1: Pnk_command_buffer; p2: nk_handle); cdecl;
  end;

  { nk_style_slider  }
  nk_style_slider = record
    normal: nk_style_item;
    hover: nk_style_item;
    active: nk_style_item;
    border_color: nk_color;
    bar_normal: nk_color;
    bar_hover: nk_color;
    bar_active: nk_color;
    bar_filled: nk_color;
    cursor_normal: nk_style_item;
    cursor_hover: nk_style_item;
    cursor_active: nk_style_item;
    border: Single;
    rounding: Single;
    bar_height: Single;
    padding: nk_vec2;
    spacing: nk_vec2;
    cursor_size: nk_vec2;
    show_buttons: Integer;
    inc_button: nk_style_button;
    dec_button: nk_style_button;
    inc_symbol: nk_symbol_type;
    dec_symbol: nk_symbol_type;
    userdata: nk_handle;
    draw_begin: procedure(p1: Pnk_command_buffer; p2: nk_handle); cdecl;
    draw_end: procedure(p1: Pnk_command_buffer; p2: nk_handle); cdecl;
  end;

  { nk_style_progress  }
  nk_style_progress = record
    normal: nk_style_item;
    hover: nk_style_item;
    active: nk_style_item;
    border_color: nk_color;
    cursor_normal: nk_style_item;
    cursor_hover: nk_style_item;
    cursor_active: nk_style_item;
    cursor_border_color: nk_color;
    rounding: Single;
    border: Single;
    cursor_border: Single;
    cursor_rounding: Single;
    padding: nk_vec2;
    userdata: nk_handle;
    draw_begin: procedure(p1: Pnk_command_buffer; p2: nk_handle); cdecl;
    draw_end: procedure(p1: Pnk_command_buffer; p2: nk_handle); cdecl;
  end;

  { nk_style_scrollbar  }
  nk_style_scrollbar = record
    normal: nk_style_item;
    hover: nk_style_item;
    active: nk_style_item;
    border_color: nk_color;
    cursor_normal: nk_style_item;
    cursor_hover: nk_style_item;
    cursor_active: nk_style_item;
    cursor_border_color: nk_color;
    border: Single;
    rounding: Single;
    border_cursor: Single;
    rounding_cursor: Single;
    padding: nk_vec2;
    show_buttons: Integer;
    inc_button: nk_style_button;
    dec_button: nk_style_button;
    inc_symbol: nk_symbol_type;
    dec_symbol: nk_symbol_type;
    userdata: nk_handle;
    draw_begin: procedure(p1: Pnk_command_buffer; p2: nk_handle); cdecl;
    draw_end: procedure(p1: Pnk_command_buffer; p2: nk_handle); cdecl;
  end;

  { nk_style_edit  }
  nk_style_edit = record
    normal: nk_style_item;
    hover: nk_style_item;
    active: nk_style_item;
    border_color: nk_color;
    scrollbar: nk_style_scrollbar;
    cursor_normal: nk_color;
    cursor_hover: nk_color;
    cursor_text_normal: nk_color;
    cursor_text_hover: nk_color;
    text_normal: nk_color;
    text_hover: nk_color;
    text_active: nk_color;
    selected_normal: nk_color;
    selected_hover: nk_color;
    selected_text_normal: nk_color;
    selected_text_hover: nk_color;
    border: Single;
    rounding: Single;
    cursor_size: Single;
    scrollbar_size: nk_vec2;
    padding: nk_vec2;
    row_padding: Single;
  end;

  { nk_style_property  }
  nk_style_property = record
    normal: nk_style_item;
    hover: nk_style_item;
    active: nk_style_item;
    border_color: nk_color;
    label_normal: nk_color;
    label_hover: nk_color;
    label_active: nk_color;
    sym_left: nk_symbol_type;
    sym_right: nk_symbol_type;
    border: Single;
    rounding: Single;
    padding: nk_vec2;
    edit: nk_style_edit;
    inc_button: nk_style_button;
    dec_button: nk_style_button;
    userdata: nk_handle;
    draw_begin: procedure(p1: Pnk_command_buffer; p2: nk_handle); cdecl;
    draw_end: procedure(p1: Pnk_command_buffer; p2: nk_handle); cdecl;
  end;

  { nk_style_chart  }
  nk_style_chart = record
    background: nk_style_item;
    border_color: nk_color;
    selected_color: nk_color;
    color: nk_color;
    border: Single;
    rounding: Single;
    padding: nk_vec2;
  end;

  { nk_style_combo  }
  nk_style_combo = record
    normal: nk_style_item;
    hover: nk_style_item;
    active: nk_style_item;
    border_color: nk_color;
    label_normal: nk_color;
    label_hover: nk_color;
    label_active: nk_color;
    symbol_normal: nk_color;
    symbol_hover: nk_color;
    symbol_active: nk_color;
    button: nk_style_button;
    sym_normal: nk_symbol_type;
    sym_hover: nk_symbol_type;
    sym_active: nk_symbol_type;
    border: Single;
    rounding: Single;
    content_padding: nk_vec2;
    button_padding: nk_vec2;
    spacing: nk_vec2;
  end;

  { nk_style_tab  }
  nk_style_tab = record
    background: nk_style_item;
    border_color: nk_color;
    text: nk_color;
    tab_maximize_button: nk_style_button;
    tab_minimize_button: nk_style_button;
    node_maximize_button: nk_style_button;
    node_minimize_button: nk_style_button;
    sym_minimize: nk_symbol_type;
    sym_maximize: nk_symbol_type;
    border: Single;
    rounding: Single;
    indent: Single;
    padding: nk_vec2;
    spacing: nk_vec2;
  end;

  { nk_style_window_header  }
  nk_style_window_header = record
    normal: nk_style_item;
    hover: nk_style_item;
    active: nk_style_item;
    close_button: nk_style_button;
    minimize_button: nk_style_button;
    close_symbol: nk_symbol_type;
    minimize_symbol: nk_symbol_type;
    maximize_symbol: nk_symbol_type;
    label_normal: nk_color;
    label_hover: nk_color;
    label_active: nk_color;
    align: nk_style_header_align;
    padding: nk_vec2;
    label_padding: nk_vec2;
    spacing: nk_vec2;
  end;

  { nk_style_window  }
  nk_style_window = record
    header: nk_style_window_header;
    fixed_background: nk_style_item;
    background: nk_color;
    border_color: nk_color;
    popup_border_color: nk_color;
    combo_border_color: nk_color;
    contextual_border_color: nk_color;
    menu_border_color: nk_color;
    group_border_color: nk_color;
    tooltip_border_color: nk_color;
    scaler: nk_style_item;
    border: Single;
    combo_border: Single;
    contextual_border: Single;
    menu_border: Single;
    group_border: Single;
    tooltip_border: Single;
    popup_border: Single;
    min_row_height_padding: Single;
    rounding: Single;
    spacing: nk_vec2;
    scrollbar_size: nk_vec2;
    min_size: nk_vec2;
    padding: nk_vec2;
    group_padding: nk_vec2;
    popup_padding: nk_vec2;
    combo_padding: nk_vec2;
    contextual_padding: nk_vec2;
    menu_padding: nk_vec2;
    tooltip_padding: nk_vec2;
  end;

  { nk_style  }
  nk_style = record
    font: Pnk_user_font;
    cursors: array [0..6] of Pnk_cursor;
    cursor_active: Pnk_cursor;
    cursor_last: Pnk_cursor;
    cursor_visible: Integer;
    text: nk_style_text;
    button: nk_style_button;
    contextual_button: nk_style_button;
    menu_button: nk_style_button;
    option: nk_style_toggle;
    checkbox: nk_style_toggle;
    selectable: nk_style_selectable;
    slider: nk_style_slider;
    progress: nk_style_progress;
    _property: nk_style_property;
    edit: nk_style_edit;
    chart: nk_style_chart;
    scrollh: nk_style_scrollbar;
    scrollv: nk_style_scrollbar;
    tab: nk_style_tab;
    combo: nk_style_combo;
    window: nk_style_window;
  end;

  { nk_chart_slot  }
  nk_chart_slot = record
    _type: nk_chart_type;
    color: nk_color;
    highlight: nk_color;
    min: Single;
    max: Single;
    range: Single;
    count: Integer;
    last: nk_vec2;
    index: Integer;
  end;

  { nk_chart  }
  nk_chart = record
    slot: Integer;
    x: Single;
    y: Single;
    w: Single;
    h: Single;
    slots: array [0..3] of nk_chart_slot;
  end;

  { nk_row_layout  }
  nk_row_layout = record
    _type: nk_panel_row_layout_type;
    index: Integer;
    height: Single;
    min_height: Single;
    columns: Integer;
    ratio: PSingle;
    item_width: Single;
    item_height: Single;
    item_offset: Single;
    filled: Single;
    item: nk_rect;
    tree_depth: Integer;
    templates: array [0..15] of Single;
  end;

  { nk_popup_buffer  }
  nk_popup_buffer = record
    _begin: nk_size;
    parent: nk_size;
    last: nk_size;
    _end: nk_size;
    active: nk_bool;
  end;

  { nk_menu_state  }
  nk_menu_state = record
    x: Single;
    y: Single;
    w: Single;
    h: Single;
    offset: nk_scroll;
  end;

  { nk_panel  }
  nk_panel = record
    _type: nk_panel_type;
    flags: nk_flags;
    bounds: nk_rect;
    offset_x: Pnk_uint;
    offset_y: Pnk_uint;
    at_x: Single;
    at_y: Single;
    max_x: Single;
    footer_height: Single;
    header_height: Single;
    border: Single;
    has_scrolling: Cardinal;
    clip: nk_rect;
    menu: nk_menu_state;
    row: nk_row_layout;
    chart: nk_chart;
    buffer: Pnk_command_buffer;
    parent: Pnk_panel;
  end;

  { nk_popup_state  }
  nk_popup_state = record
    win: Pnk_window;
    _type: nk_panel_type;
    buf: nk_popup_buffer;
    name: nk_hash;
    active: nk_bool;
    combo_count: Cardinal;
    con_count: Cardinal;
    con_old: Cardinal;
    active_con: Cardinal;
    header: nk_rect;
  end;

  { nk_edit_state  }
  nk_edit_state = record
    name: nk_hash;
    seq: Cardinal;
    old: Cardinal;
    active: Integer;
    prev: Integer;
    cursor: Integer;
    sel_start: Integer;
    sel_end: Integer;
    scrollbar: nk_scroll;
    mode: Byte;
    single_line: Byte;
  end;

  { nk_property_state  }
  nk_property_state = record
    active: Integer;
    prev: Integer;
    buffer: array [0..63] of UTF8Char;
    length: Integer;
    cursor: Integer;
    select_start: Integer;
    select_end: Integer;
    name: nk_hash;
    seq: Cardinal;
    old: Cardinal;
    state: Integer;
  end;

  { nk_window  }
  nk_window = record
    seq: Cardinal;
    name: nk_hash;
    name_string: array [0..63] of UTF8Char;
    flags: nk_flags;
    bounds: nk_rect;
    scrollbar: nk_scroll;
    buffer: nk_command_buffer;
    layout: Pnk_panel;
    scrollbar_hiding_timer: Single;
    _property: nk_property_state;
    popup: nk_popup_state;
    edit: nk_edit_state;
    scrolled: Cardinal;
    tables: Pnk_table;
    table_count: Cardinal;
    next: Pnk_window;
    prev: Pnk_window;
    parent: Pnk_window;
  end;

  { nk_config_stack_style_item_element  }
  nk_config_stack_style_item_element = record
    address: Pnk_style_item;
    old_value: nk_style_item;
  end;

  { nk_config_stack_float_element  }
  nk_config_stack_float_element = record
    address: PSingle;
    old_value: Single;
  end;

  { nk_config_stack_vec2_element  }
  nk_config_stack_vec2_element = record
    address: Pnk_vec2;
    old_value: nk_vec2;
  end;

  { nk_config_stack_flags_element  }
  nk_config_stack_flags_element = record
    address: Pnk_flags;
    old_value: nk_flags;
  end;

  { nk_config_stack_color_element  }
  nk_config_stack_color_element = record
    address: Pnk_color;
    old_value: nk_color;
  end;

  { nk_config_stack_user_font_element  }
  nk_config_stack_user_font_element = record
    address: PPnk_user_font;
    old_value: Pnk_user_font;
  end;

  { nk_config_stack_button_behavior_element  }
  nk_config_stack_button_behavior_element = record
    address: Pnk_button_behavior;
    old_value: nk_button_behavior;
  end;

  { nk_config_stack_style_item  }
  nk_config_stack_style_item = record
    head: Integer;
    elements: array [0..15] of nk_config_stack_style_item_element;
  end;

  { nk_config_stack_float  }
  nk_config_stack_float = record
    head: Integer;
    elements: array [0..31] of nk_config_stack_float_element;
  end;

  { nk_config_stack_vec2  }
  nk_config_stack_vec2 = record
    head: Integer;
    elements: array [0..15] of nk_config_stack_vec2_element;
  end;

  { nk_config_stack_flags  }
  nk_config_stack_flags = record
    head: Integer;
    elements: array [0..31] of nk_config_stack_flags_element;
  end;

  { nk_config_stack_color  }
  nk_config_stack_color = record
    head: Integer;
    elements: array [0..31] of nk_config_stack_color_element;
  end;

  { nk_config_stack_user_font  }
  nk_config_stack_user_font = record
    head: Integer;
    elements: array [0..7] of nk_config_stack_user_font_element;
  end;

  { nk_config_stack_button_behavior  }
  nk_config_stack_button_behavior = record
    head: Integer;
    elements: array [0..7] of nk_config_stack_button_behavior_element;
  end;

  { nk_configuration_stacks  }
  nk_configuration_stacks = record
    style_items: nk_config_stack_style_item;
    floats: nk_config_stack_float;
    vectors: nk_config_stack_vec2;
    flags: nk_config_stack_flags;
    colors: nk_config_stack_color;
    fonts: nk_config_stack_user_font;
    button_behaviors: nk_config_stack_button_behavior;
  end;

  { nk_table  }
  nk_table = record
    seq: Cardinal;
    size: Cardinal;
    keys: array [0..58] of nk_hash;
    values: array [0..58] of nk_uint;
    next: Pnk_table;
    prev: Pnk_table;
  end;

  { nk_page_data  }
  nk_page_data = record
    case Integer of
      0: (tbl: nk_table);
      1: (pan: nk_panel);
      2: (win: nk_window);
  end;

  { nk_page_element  }
  nk_page_element = record
    data: nk_page_data;
    next: Pnk_page_element;
    prev: Pnk_page_element;
  end;

  { nk_page  }
  nk_page = record
    size: Cardinal;
    next: Pnk_page;
    win: array [0..0] of nk_page_element;
  end;

  { nk_pool  }
  nk_pool = record
    alloc: nk_allocator;
    _type: nk_allocation_type;
    page_count: Cardinal;
    pages: Pnk_page;
    freelist: Pnk_page_element;
    capacity: Cardinal;
    size: nk_size;
    cap: nk_size;
  end;

  { nk_context  }
  nk_context = record
    input: nk_input;
    style: nk_style;
    memory: nk_buffer;
    clip: nk_clipboard;
    last_widget_state: nk_flags;
    button_behavior: nk_button_behavior;
    stacks: nk_configuration_stacks;
    delta_time_seconds: Single;
    text_edit: nk_text_edit;
    overlay: nk_command_buffer;
    build: Integer;
    use_pool: Integer;
    pool: nk_pool;
    _begin: Pnk_window;
    _end: Pnk_window;
    active: Pnk_window;
    current: Pnk_window;
    freelist: Pnk_page_element;
    count: Cardinal;
    seq: Cardinal;
  end;

  { uInt  }
  uInt = Cardinal;

  { uLong  }
  uLong = Cardinal;

  { zipFile  }
  zipFile = Pointer;

  { tm_zip_s  }
  tm_zip_s = record
    tm_sec: uInt;
    tm_min: uInt;
    tm_hour: uInt;
    tm_mday: uInt;
    tm_mon: uInt;
    tm_year: uInt;
  end;

  { tm_zip  }
  tm_zip = tm_zip_s;

  { zip_fileinfo  }
  zip_fileinfo = record
    tmz_date: tm_zip;
    dosDate: uLong;
    internal_fa: uLong;
    external_fa: uLong;
  end;

  { zipcharpc  }
  zipcharpc = PUTF8Char;

  { al_emit_user_event_dtor  }
  al_emit_user_event_dtor = procedure(p1: PALLEGRO_USER_EVENT); cdecl;

  { al_register_assert_handler_handler  }
  al_register_assert_handler_handler = procedure(const expr: PUTF8Char; const _file: PUTF8Char; line: Integer; const func: PUTF8Char); cdecl;

  { al_register_trace_handler_handler  }
  al_register_trace_handler_handler = procedure(const p1: PUTF8Char); cdecl;

  { al_for_each_fs_entry_callback  }
  al_for_each_fs_entry_callback = function(entry: PALLEGRO_FS_ENTRY; extra: Pointer): Integer; cdecl;

  { atexit_ptr_  }
  atexit_ptr_ = function: UInt64; cdecl;

  { al_install_system_atexit_ptr  }
  al_install_system_atexit_ptr = function(p1: atexit_ptr_): Integer; cdecl;

  { al_create_thread_proc  }
  al_create_thread_proc = function(thread: PALLEGRO_THREAD; arg: Pointer): Pointer; cdecl;

  { al_create_thread_with_stacksize_proc  }
  al_create_thread_with_stacksize_proc = function(thread: PALLEGRO_THREAD; arg: Pointer): Pointer; cdecl;

  { al_run_detached_thread_proc  }
  al_run_detached_thread_proc = function(arg: Pointer): Pointer; cdecl;

  { al_set_mixer_postprocess_callback_cb  }
  al_set_mixer_postprocess_callback_cb = procedure(buf: Pointer; samples: Cardinal; data: Pointer); cdecl;

  { al_register_sample_loader_loader  }
  al_register_sample_loader_loader = function(const filename: PUTF8Char): PALLEGRO_SAMPLE; cdecl;

  { al_register_sample_saver_saver  }
  al_register_sample_saver_saver = function(const filename: PUTF8Char; spl: PALLEGRO_SAMPLE): Boolean; cdecl;

  { al_register_audio_stream_loader_stream_loader  }
  al_register_audio_stream_loader_stream_loader = function(const filename: PUTF8Char; buffer_count: NativeUInt; samples: Cardinal): PALLEGRO_AUDIO_STREAM; cdecl;

  { al_register_sample_loader_f_loader  }
  al_register_sample_loader_f_loader = function(fp: PALLEGRO_FILE): PALLEGRO_SAMPLE; cdecl;

  { al_register_sample_saver_f_saver  }
  al_register_sample_saver_f_saver = function(fp: PALLEGRO_FILE; spl: PALLEGRO_SAMPLE): Boolean; cdecl;

  { al_register_audio_stream_loader_f_stream_loader  }
  al_register_audio_stream_loader_f_stream_loader = function(fp: PALLEGRO_FILE; buffer_count: NativeUInt; samples: Cardinal): PALLEGRO_AUDIO_STREAM; cdecl;

  { al_register_sample_identifier_identifier  }
  al_register_sample_identifier_identifier = function(fp: PALLEGRO_FILE): Boolean; cdecl;

  { al_register_font_loader_load  }
  al_register_font_loader_load = function(const filename: PUTF8Char; size: Integer; flags: Integer): PALLEGRO_FONT; cdecl;

  { al_do_multiline_text_cb  }
  al_do_multiline_text_cb = function(line_num: Integer; const line: PUTF8Char; size: Integer; extra: Pointer): Boolean; cdecl;

  { al_do_multiline_ustr_cb  }
  al_do_multiline_ustr_cb = function(line_num: Integer; const line: PALLEGRO_USTR; extra: Pointer): Boolean; cdecl;

  { al_triangulate_polygon_emit_triangle  }
  al_triangulate_polygon_emit_triangle = procedure(p1: Integer; p2: Integer; p3: Integer; p4: Pointer); cdecl;

  { al_draw_soft_triangle_init  }
  al_draw_soft_triangle_init = procedure(p1: UIntPtr; p2: PALLEGRO_VERTEX; p3: PALLEGRO_VERTEX; p4: PALLEGRO_VERTEX); cdecl;

  { al_draw_soft_triangle_first  }
  al_draw_soft_triangle_first = procedure(p1: UIntPtr; p2: Integer; p3: Integer; p4: Integer; p5: Integer); cdecl;

  { al_draw_soft_triangle_step  }
  al_draw_soft_triangle_step = procedure(p1: UIntPtr; p2: Integer); cdecl;

  { al_draw_soft_triangle_draw  }
  al_draw_soft_triangle_draw = procedure(p1: UIntPtr; p2: Integer; p3: Integer; p4: Integer); cdecl;

  { al_draw_soft_line_first  }
  al_draw_soft_line_first = procedure(p1: UIntPtr; p2: Integer; p3: Integer; p4: PALLEGRO_VERTEX; p5: PALLEGRO_VERTEX); cdecl;

  { al_draw_soft_line_step  }
  al_draw_soft_line_step = procedure(p1: UIntPtr; p2: Integer); cdecl;

  { al_draw_soft_line_draw  }
  al_draw_soft_line_draw = procedure(p1: UIntPtr; p2: Integer; p3: Integer); cdecl;

  { PLRESULT  }
  PLRESULT = ^LRESULT;

  { al_win_add_window_callback_callback  }
  al_win_add_window_callback_callback = function(display: PALLEGRO_DISPLAY; _message: UINT; wparam: WPARAM; lparam: LPARAM; result: PLRESULT; userdata: Pointer): Boolean; cdecl;

  { al_win_remove_window_callback_callback  }
  al_win_remove_window_callback_callback = function(display: PALLEGRO_DISPLAY; _message: UINT; wparam: WPARAM; lparam: LPARAM; result: PLRESULT; userdata: Pointer): Boolean; cdecl;

  { PHYSFS_mountMemory_del  }
  PHYSFS_mountMemory_del = procedure(p1: Pointer); cdecl;

  { nk_plot_function_value_getter  }
  nk_plot_function_value_getter = function(user: Pointer; index: Integer): Single; cdecl;

  { nk_combo_callback_item_getter  }
  nk_combo_callback_item_getter = procedure(p1: Pointer; p2: Integer; p3: PPUTF8Char); cdecl;

  { nk_combobox_callback_item_getter  }
  nk_combobox_callback_item_getter = procedure(p1: Pointer; p2: Integer; p3: PPUTF8Char); cdecl;

var
  _al_trace_prefix: function(const channel: PUTF8Char; level: Integer; const _file: PUTF8Char; line: Integer; const _function: PUTF8Char): Boolean; cdecl;
  _al_trace_suffix: procedure(const msg: PUTF8Char) varargs; cdecl;
  al_acknowledge_drawing_halt: procedure(display: PALLEGRO_DISPLAY); cdecl;
  al_acknowledge_drawing_resume: procedure(display: PALLEGRO_DISPLAY); cdecl;
  al_acknowledge_resize: function(display: PALLEGRO_DISPLAY): Boolean; cdecl;
  al_add_config_comment: procedure(config: PALLEGRO_CONFIG; const section: PUTF8Char; const comment: PUTF8Char); cdecl;
  al_add_config_section: procedure(config: PALLEGRO_CONFIG; const name: PUTF8Char); cdecl;
  al_add_new_bitmap_flag: procedure(flag: Integer); cdecl;
  al_add_timer_count: procedure(timer: PALLEGRO_TIMER; diff: Int64); cdecl;
  al_append_menu_item: function(parent: PALLEGRO_MENU; const title: PUTF8Char; id: UInt16; flags: Integer; icon: PALLEGRO_BITMAP; submenu: PALLEGRO_MENU): Integer; cdecl;
  al_append_native_text_log: procedure(textlog: PALLEGRO_TEXTLOG; const format: PUTF8Char) varargs; cdecl;
  al_append_path_component: procedure(path: PALLEGRO_PATH; const s: PUTF8Char); cdecl;
  al_apply_window_constraints: procedure(display: PALLEGRO_DISPLAY; onoff: Boolean); cdecl;
  al_attach_audio_stream_to_mixer: function(stream: PALLEGRO_AUDIO_STREAM; mixer: PALLEGRO_MIXER): Boolean; cdecl;
  al_attach_audio_stream_to_voice: function(stream: PALLEGRO_AUDIO_STREAM; voice: PALLEGRO_VOICE): Boolean; cdecl;
  al_attach_mixer_to_mixer: function(stream: PALLEGRO_MIXER; mixer: PALLEGRO_MIXER): Boolean; cdecl;
  al_attach_mixer_to_voice: function(mixer: PALLEGRO_MIXER; voice: PALLEGRO_VOICE): Boolean; cdecl;
  al_attach_sample_instance_to_mixer: function(stream: PALLEGRO_SAMPLE_INSTANCE; mixer: PALLEGRO_MIXER): Boolean; cdecl;
  al_attach_sample_instance_to_voice: function(stream: PALLEGRO_SAMPLE_INSTANCE; voice: PALLEGRO_VOICE): Boolean; cdecl;
  al_attach_shader_source: function(shader: PALLEGRO_SHADER; _type: ALLEGRO_SHADER_TYPE; const source: PUTF8Char): Boolean; cdecl;
  al_attach_shader_source_file: function(shader: PALLEGRO_SHADER; _type: ALLEGRO_SHADER_TYPE; const filename: PUTF8Char): Boolean; cdecl;
  al_backup_dirty_bitmap: procedure(bitmap: PALLEGRO_BITMAP); cdecl;
  al_backup_dirty_bitmaps: procedure(display: PALLEGRO_DISPLAY); cdecl;
  al_broadcast_cond: procedure(cond: PALLEGRO_COND); cdecl;
  al_build_camera_transform: procedure(trans: PALLEGRO_TRANSFORM; position_x: Single; position_y: Single; position_z: Single; look_x: Single; look_y: Single; look_z: Single; up_x: Single; up_y: Single; up_z: Single); cdecl;
  al_build_menu: function(info: PALLEGRO_MENU_INFO): PALLEGRO_MENU; cdecl;
  al_build_shader: function(shader: PALLEGRO_SHADER): Boolean; cdecl;
  al_build_transform: procedure(trans: PALLEGRO_TRANSFORM; x: Single; y: Single; sx: Single; sy: Single; theta: Single); cdecl;
  al_calculate_arc: procedure(dest: PSingle; stride: Integer; cx: Single; cy: Single; rx: Single; ry: Single; start_theta: Single; delta_theta: Single; thickness: Single; num_points: Integer); cdecl;
  al_calculate_ribbon: procedure(dest: PSingle; dest_stride: Integer; const points: PSingle; points_stride: Integer; thickness: Single; num_segments: Integer); cdecl;
  al_calculate_spline: procedure(dest: PSingle; stride: Integer; points: PSingle; thickness: Single; num_segments: Integer); cdecl;
  al_calloc_with_context: function(count: NativeUInt; n: NativeUInt; line: Integer; const _file: PUTF8Char; const func: PUTF8Char): Pointer; cdecl;
  al_change_directory: function(const path: PUTF8Char): Boolean; cdecl;
  al_check_inverse: function(const trans: PALLEGRO_TRANSFORM; tol: Single): Integer; cdecl;
  al_clear_depth_buffer: procedure(x: Single); cdecl;
  al_clear_keyboard_state: procedure(display: PALLEGRO_DISPLAY); cdecl;
  al_clear_to_color: procedure(color: ALLEGRO_COLOR); cdecl;
  al_clipboard_has_text: function(display: PALLEGRO_DISPLAY): Boolean; cdecl;
  al_clone_bitmap: function(bitmap: PALLEGRO_BITMAP): PALLEGRO_BITMAP; cdecl;
  al_clone_menu: function(menu: PALLEGRO_MENU): PALLEGRO_MENU; cdecl;
  al_clone_menu_for_popup: function(menu: PALLEGRO_MENU): PALLEGRO_MENU; cdecl;
  al_clone_path: function(const path: PALLEGRO_PATH): PALLEGRO_PATH; cdecl;
  al_close_directory: function(e: PALLEGRO_FS_ENTRY): Boolean; cdecl;
  al_close_native_text_log: procedure(textlog: PALLEGRO_TEXTLOG); cdecl;
  al_close_video: procedure(video: PALLEGRO_VIDEO); cdecl;
  al_color_cmyk: function(c: Single; m: Single; y: Single; k: Single): ALLEGRO_COLOR; cdecl;
  al_color_cmyk_to_rgb: procedure(cyan: Single; magenta: Single; yellow: Single; key: Single; red: PSingle; green: PSingle; blue: PSingle); cdecl;
  al_color_distance_ciede2000: function(c1: ALLEGRO_COLOR; c2: ALLEGRO_COLOR): Double; cdecl;
  al_color_hsl: function(h: Single; s: Single; l: Single): ALLEGRO_COLOR; cdecl;
  al_color_hsl_to_rgb: procedure(hue: Single; saturation: Single; lightness: Single; red: PSingle; green: PSingle; blue: PSingle); cdecl;
  al_color_hsv: function(h: Single; s: Single; v: Single): ALLEGRO_COLOR; cdecl;
  al_color_hsv_to_rgb: procedure(hue: Single; saturation: Single; value: Single; red: PSingle; green: PSingle; blue: PSingle); cdecl;
  al_color_html: function(const _string: PUTF8Char): ALLEGRO_COLOR; cdecl;
  al_color_html_to_rgb: function(const _string: PUTF8Char; red: PSingle; green: PSingle; blue: PSingle): Boolean; cdecl;
  al_color_lab: function(l: Single; a: Single; b: Single): ALLEGRO_COLOR; cdecl;
  al_color_lab_to_rgb: procedure(l: Single; a: Single; b: Single; red: PSingle; green: PSingle; blue: PSingle); cdecl;
  al_color_lch: function(l: Single; c: Single; h: Single): ALLEGRO_COLOR; cdecl;
  al_color_lch_to_rgb: procedure(l: Single; c: Single; h: Single; red: PSingle; green: PSingle; blue: PSingle); cdecl;
  al_color_linear: function(r: Single; g: Single; b: Single): ALLEGRO_COLOR; cdecl;
  al_color_linear_to_rgb: procedure(x: Single; y: Single; z: Single; red: PSingle; green: PSingle; blue: PSingle); cdecl;
  al_color_name: function(const name: PUTF8Char): ALLEGRO_COLOR; cdecl;
  al_color_name_to_rgb: function(const name: PUTF8Char; r: PSingle; g: PSingle; b: PSingle): Boolean; cdecl;
  al_color_oklab: function(l: Single; a: Single; b: Single): ALLEGRO_COLOR; cdecl;
  al_color_oklab_to_rgb: procedure(l: Single; a: Single; b: Single; red: PSingle; green: PSingle; blue: PSingle); cdecl;
  al_color_rgb_to_cmyk: procedure(red: Single; green: Single; blue: Single; cyan: PSingle; magenta: PSingle; yellow: PSingle; key: PSingle); cdecl;
  al_color_rgb_to_hsl: procedure(red: Single; green: Single; blue: Single; hue: PSingle; saturation: PSingle; lightness: PSingle); cdecl;
  al_color_rgb_to_hsv: procedure(red: Single; green: Single; blue: Single; hue: PSingle; saturation: PSingle; value: PSingle); cdecl;
  al_color_rgb_to_html: procedure(red: Single; green: Single; blue: Single; _string: PUTF8Char); cdecl;
  al_color_rgb_to_lab: procedure(red: Single; green: Single; blue: Single; l: PSingle; a: PSingle; b: PSingle); cdecl;
  al_color_rgb_to_lch: procedure(red: Single; green: Single; blue: Single; l: PSingle; c: PSingle; h: PSingle); cdecl;
  al_color_rgb_to_linear: procedure(red: Single; green: Single; blue: Single; x: PSingle; y: PSingle; z: PSingle); cdecl;
  al_color_rgb_to_name: function(r: Single; g: Single; b: Single): PUTF8Char; cdecl;
  al_color_rgb_to_oklab: procedure(red: Single; green: Single; blue: Single; l: PSingle; a: PSingle; b: PSingle); cdecl;
  al_color_rgb_to_xyy: procedure(red: Single; green: Single; blue: Single; x: PSingle; y: PSingle; y2: PSingle); cdecl;
  al_color_rgb_to_xyz: procedure(red: Single; green: Single; blue: Single; x: PSingle; y: PSingle; z: PSingle); cdecl;
  al_color_rgb_to_yuv: procedure(red: Single; green: Single; blue: Single; y: PSingle; u: PSingle; v: PSingle); cdecl;
  al_color_xyy: function(x: Single; y: Single; y2: Single): ALLEGRO_COLOR; cdecl;
  al_color_xyy_to_rgb: procedure(x: Single; y: Single; y2: Single; red: PSingle; green: PSingle; blue: PSingle); cdecl;
  al_color_xyz: function(x: Single; y: Single; z: Single): ALLEGRO_COLOR; cdecl;
  al_color_xyz_to_rgb: procedure(x: Single; y: Single; z: Single; red: PSingle; green: PSingle; blue: PSingle); cdecl;
  al_color_yuv: function(y: Single; u: Single; v: Single): ALLEGRO_COLOR; cdecl;
  al_color_yuv_to_rgb: procedure(y: Single; u: Single; v: Single; red: PSingle; green: PSingle; blue: PSingle); cdecl;
  al_compose_transform: procedure(trans: PALLEGRO_TRANSFORM; const other: PALLEGRO_TRANSFORM); cdecl;
  al_convert_bitmap: procedure(bitmap: PALLEGRO_BITMAP); cdecl;
  al_convert_mask_to_alpha: procedure(bitmap: PALLEGRO_BITMAP; mask_color: ALLEGRO_COLOR); cdecl;
  al_convert_memory_bitmaps: procedure(); cdecl;
  al_copy_transform: procedure(dest: PALLEGRO_TRANSFORM; const src: PALLEGRO_TRANSFORM); cdecl;
  al_create_audio_recorder: function(fragment_count: NativeUInt; samples: Cardinal; freq: Cardinal; depth: ALLEGRO_AUDIO_DEPTH; chan_conf: ALLEGRO_CHANNEL_CONF): PALLEGRO_AUDIO_RECORDER; cdecl;
  al_create_audio_stream: function(buffer_count: NativeUInt; samples: Cardinal; freq: Cardinal; depth: ALLEGRO_AUDIO_DEPTH; chan_conf: ALLEGRO_CHANNEL_CONF): PALLEGRO_AUDIO_STREAM; cdecl;
  al_create_bitmap: function(w: Integer; h: Integer): PALLEGRO_BITMAP; cdecl;
  al_create_builtin_font: function(): PALLEGRO_FONT; cdecl;
  al_create_cond: function(): PALLEGRO_COND; cdecl;
  al_create_config: function(): PALLEGRO_CONFIG; cdecl;
  al_create_display: function(w: Integer; h: Integer): PALLEGRO_DISPLAY; cdecl;
  al_create_event_queue: function(): PALLEGRO_EVENT_QUEUE; cdecl;
  al_create_file_handle: function(const vt: PALLEGRO_FILE_INTERFACE; userdata: Pointer): PALLEGRO_FILE; cdecl;
  al_create_fs_entry: function(const path: PUTF8Char): PALLEGRO_FS_ENTRY; cdecl;
  al_create_index_buffer: function(index_size: Integer; const initial_data: Pointer; num_indices: Integer; flags: Integer): PALLEGRO_INDEX_BUFFER; cdecl;
  al_create_menu: function(): PALLEGRO_MENU; cdecl;
  al_create_mixer: function(freq: Cardinal; depth: ALLEGRO_AUDIO_DEPTH; chan_conf: ALLEGRO_CHANNEL_CONF): PALLEGRO_MIXER; cdecl;
  al_create_mouse_cursor: function(sprite: PALLEGRO_BITMAP; xfocus: Integer; yfocus: Integer): PALLEGRO_MOUSE_CURSOR; cdecl;
  al_create_mutex: function(): PALLEGRO_MUTEX; cdecl;
  al_create_mutex_recursive: function(): PALLEGRO_MUTEX; cdecl;
  al_create_native_file_dialog: function(const initial_path: PUTF8Char; const title: PUTF8Char; const patterns: PUTF8Char; mode: Integer): PALLEGRO_FILECHOOSER; cdecl;
  al_create_path: function(const str: PUTF8Char): PALLEGRO_PATH; cdecl;
  al_create_path_for_directory: function(const str: PUTF8Char): PALLEGRO_PATH; cdecl;
  al_create_popup_menu: function(): PALLEGRO_MENU; cdecl;
  al_create_sample: function(buf: Pointer; samples: Cardinal; freq: Cardinal; depth: ALLEGRO_AUDIO_DEPTH; chan_conf: ALLEGRO_CHANNEL_CONF; free_buf: Boolean): PALLEGRO_SAMPLE; cdecl;
  al_create_sample_instance: function(data: PALLEGRO_SAMPLE): PALLEGRO_SAMPLE_INSTANCE; cdecl;
  al_create_shader: function(_platform: ALLEGRO_SHADER_PLATFORM): PALLEGRO_SHADER; cdecl;
  al_create_sub_bitmap: function(parent: PALLEGRO_BITMAP; x: Integer; y: Integer; w: Integer; h: Integer): PALLEGRO_BITMAP; cdecl;
  al_create_thread: function(proc: al_create_thread_proc; arg: Pointer): PALLEGRO_THREAD; cdecl;
  al_create_thread_with_stacksize: function(proc: al_create_thread_with_stacksize_proc; arg: Pointer; stacksize: NativeUInt): PALLEGRO_THREAD; cdecl;
  al_create_timer: function(speed_secs: Double): PALLEGRO_TIMER; cdecl;
  al_create_vertex_buffer: function(decl: PALLEGRO_VERTEX_DECL; const initial_data: Pointer; num_vertices: Integer; flags: Integer): PALLEGRO_VERTEX_BUFFER; cdecl;
  al_create_vertex_decl: function(const elements: PALLEGRO_VERTEX_ELEMENT; stride: Integer): PALLEGRO_VERTEX_DECL; cdecl;
  al_create_voice: function(freq: Cardinal; depth: ALLEGRO_AUDIO_DEPTH; chan_conf: ALLEGRO_CHANNEL_CONF): PALLEGRO_VOICE; cdecl;
  al_cstr: function(const us: PALLEGRO_USTR): PUTF8Char; cdecl;
  al_cstr_dup: function(const us: PALLEGRO_USTR): PUTF8Char; cdecl;
  al_destroy_audio_recorder: procedure(r: PALLEGRO_AUDIO_RECORDER); cdecl;
  al_destroy_audio_stream: procedure(stream: PALLEGRO_AUDIO_STREAM); cdecl;
  al_destroy_bitmap: procedure(bitmap: PALLEGRO_BITMAP); cdecl;
  al_destroy_cond: procedure(cond: PALLEGRO_COND); cdecl;
  al_destroy_config: procedure(config: PALLEGRO_CONFIG); cdecl;
  al_destroy_display: procedure(display: PALLEGRO_DISPLAY); cdecl;
  al_destroy_event_queue: procedure(p1: PALLEGRO_EVENT_QUEUE); cdecl;
  al_destroy_font: procedure(f: PALLEGRO_FONT); cdecl;
  al_destroy_fs_entry: procedure(e: PALLEGRO_FS_ENTRY); cdecl;
  al_destroy_index_buffer: procedure(buffer: PALLEGRO_INDEX_BUFFER); cdecl;
  al_destroy_menu: procedure(menu: PALLEGRO_MENU); cdecl;
  al_destroy_mixer: procedure(mixer: PALLEGRO_MIXER); cdecl;
  al_destroy_mouse_cursor: procedure(p1: PALLEGRO_MOUSE_CURSOR); cdecl;
  al_destroy_mutex: procedure(mutex: PALLEGRO_MUTEX); cdecl;
  al_destroy_native_file_dialog: procedure(dialog: PALLEGRO_FILECHOOSER); cdecl;
  al_destroy_path: procedure(path: PALLEGRO_PATH); cdecl;
  al_destroy_sample: procedure(spl: PALLEGRO_SAMPLE); cdecl;
  al_destroy_sample_instance: procedure(spl: PALLEGRO_SAMPLE_INSTANCE); cdecl;
  al_destroy_shader: procedure(shader: PALLEGRO_SHADER); cdecl;
  al_destroy_thread: procedure(thread: PALLEGRO_THREAD); cdecl;
  al_destroy_timer: procedure(timer: PALLEGRO_TIMER); cdecl;
  al_destroy_user_event_source: procedure(p1: PALLEGRO_EVENT_SOURCE); cdecl;
  al_destroy_vertex_buffer: procedure(buffer: PALLEGRO_VERTEX_BUFFER); cdecl;
  al_destroy_vertex_decl: procedure(decl: PALLEGRO_VERTEX_DECL); cdecl;
  al_destroy_voice: procedure(voice: PALLEGRO_VOICE); cdecl;
  al_detach_audio_stream: function(stream: PALLEGRO_AUDIO_STREAM): Boolean; cdecl;
  al_detach_mixer: function(mixer: PALLEGRO_MIXER): Boolean; cdecl;
  al_detach_sample_instance: function(spl: PALLEGRO_SAMPLE_INSTANCE): Boolean; cdecl;
  al_detach_voice: procedure(voice: PALLEGRO_VOICE); cdecl;
  al_disable_menu_event_source: procedure(menu: PALLEGRO_MENU); cdecl;
  al_do_multiline_text: procedure(const font: PALLEGRO_FONT; max_width: Single; const text: PUTF8Char; cb: al_do_multiline_text_cb; extra: Pointer); cdecl;
  al_do_multiline_ustr: procedure(const font: PALLEGRO_FONT; max_width: Single; const ustr: PALLEGRO_USTR; cb: al_do_multiline_ustr_cb; extra: Pointer); cdecl;
  al_drain_audio_stream: procedure(stream: PALLEGRO_AUDIO_STREAM); cdecl;
  al_draw_arc: procedure(cx: Single; cy: Single; r: Single; start_theta: Single; delta_theta: Single; color: ALLEGRO_COLOR; thickness: Single); cdecl;
  al_draw_bitmap: procedure(bitmap: PALLEGRO_BITMAP; dx: Single; dy: Single; flags: Integer); cdecl;
  al_draw_bitmap_region: procedure(bitmap: PALLEGRO_BITMAP; sx: Single; sy: Single; sw: Single; sh: Single; dx: Single; dy: Single; flags: Integer); cdecl;
  al_draw_circle: procedure(cx: Single; cy: Single; r: Single; color: ALLEGRO_COLOR; thickness: Single); cdecl;
  al_draw_ellipse: procedure(cx: Single; cy: Single; rx: Single; ry: Single; color: ALLEGRO_COLOR; thickness: Single); cdecl;
  al_draw_elliptical_arc: procedure(cx: Single; cy: Single; rx: Single; ry: Single; start_theta: Single; delta_theta: Single; color: ALLEGRO_COLOR; thickness: Single); cdecl;
  al_draw_filled_circle: procedure(cx: Single; cy: Single; r: Single; color: ALLEGRO_COLOR); cdecl;
  al_draw_filled_ellipse: procedure(cx: Single; cy: Single; rx: Single; ry: Single; color: ALLEGRO_COLOR); cdecl;
  al_draw_filled_pieslice: procedure(cx: Single; cy: Single; r: Single; start_theta: Single; delta_theta: Single; color: ALLEGRO_COLOR); cdecl;
  al_draw_filled_polygon: procedure(const vertices: PSingle; vertex_count: Integer; color: ALLEGRO_COLOR); cdecl;
  al_draw_filled_polygon_with_holes: procedure(const vertices: PSingle; const vertex_counts: PInteger; color: ALLEGRO_COLOR); cdecl;
  al_draw_filled_rectangle: procedure(x1: Single; y1: Single; x2: Single; y2: Single; color: ALLEGRO_COLOR); cdecl;
  al_draw_filled_rounded_rectangle: procedure(x1: Single; y1: Single; x2: Single; y2: Single; rx: Single; ry: Single; color: ALLEGRO_COLOR); cdecl;
  al_draw_filled_triangle: procedure(x1: Single; y1: Single; x2: Single; y2: Single; x3: Single; y3: Single; color: ALLEGRO_COLOR); cdecl;
  al_draw_glyph: procedure(const font: PALLEGRO_FONT; color: ALLEGRO_COLOR; x: Single; y: Single; codepoint: Integer); cdecl;
  al_draw_indexed_buffer: function(vertex_buffer: PALLEGRO_VERTEX_BUFFER; texture: PALLEGRO_BITMAP; index_buffer: PALLEGRO_INDEX_BUFFER; start: Integer; _end: Integer; _type: Integer): Integer; cdecl;
  al_draw_indexed_prim: function(const vtxs: Pointer; const decl: PALLEGRO_VERTEX_DECL; texture: PALLEGRO_BITMAP; const indices: PInteger; num_vtx: Integer; _type: Integer): Integer; cdecl;
  al_draw_justified_text: procedure(const font: PALLEGRO_FONT; color: ALLEGRO_COLOR; x1: Single; x2: Single; y: Single; diff: Single; flags: Integer; const text: PUTF8Char); cdecl;
  al_draw_justified_textf: procedure(const font: PALLEGRO_FONT; color: ALLEGRO_COLOR; x1: Single; x2: Single; y: Single; diff: Single; flags: Integer; const format: PUTF8Char) varargs; cdecl;
  al_draw_justified_ustr: procedure(const font: PALLEGRO_FONT; color: ALLEGRO_COLOR; x1: Single; x2: Single; y: Single; diff: Single; flags: Integer; const text: PALLEGRO_USTR); cdecl;
  al_draw_line: procedure(x1: Single; y1: Single; x2: Single; y2: Single; color: ALLEGRO_COLOR; thickness: Single); cdecl;
  al_draw_multiline_text: procedure(const font: PALLEGRO_FONT; color: ALLEGRO_COLOR; x: Single; y: Single; max_width: Single; line_height: Single; flags: Integer; const text: PUTF8Char); cdecl;
  al_draw_multiline_textf: procedure(const font: PALLEGRO_FONT; color: ALLEGRO_COLOR; x: Single; y: Single; max_width: Single; line_height: Single; flags: Integer; const format: PUTF8Char) varargs; cdecl;
  al_draw_multiline_ustr: procedure(const font: PALLEGRO_FONT; color: ALLEGRO_COLOR; x: Single; y: Single; max_width: Single; line_height: Single; flags: Integer; const text: PALLEGRO_USTR); cdecl;
  al_draw_pieslice: procedure(cx: Single; cy: Single; r: Single; start_theta: Single; delta_theta: Single; color: ALLEGRO_COLOR; thickness: Single); cdecl;
  al_draw_pixel: procedure(x: Single; y: Single; color: ALLEGRO_COLOR); cdecl;
  al_draw_polygon: procedure(const vertices: PSingle; vertex_count: Integer; join_style: Integer; color: ALLEGRO_COLOR; thickness: Single; miter_limit: Single); cdecl;
  al_draw_polyline: procedure(const vertices: PSingle; vertex_stride: Integer; vertex_count: Integer; join_style: Integer; cap_style: Integer; color: ALLEGRO_COLOR; thickness: Single; miter_limit: Single); cdecl;
  al_draw_prim: function(const vtxs: Pointer; const decl: PALLEGRO_VERTEX_DECL; texture: PALLEGRO_BITMAP; start: Integer; _end: Integer; _type: Integer): Integer; cdecl;
  al_draw_rectangle: procedure(x1: Single; y1: Single; x2: Single; y2: Single; color: ALLEGRO_COLOR; thickness: Single); cdecl;
  al_draw_ribbon: procedure(const points: PSingle; points_stride: Integer; color: ALLEGRO_COLOR; thickness: Single; num_segments: Integer); cdecl;
  al_draw_rotated_bitmap: procedure(bitmap: PALLEGRO_BITMAP; cx: Single; cy: Single; dx: Single; dy: Single; angle: Single; flags: Integer); cdecl;
  al_draw_rounded_rectangle: procedure(x1: Single; y1: Single; x2: Single; y2: Single; rx: Single; ry: Single; color: ALLEGRO_COLOR; thickness: Single); cdecl;
  al_draw_scaled_bitmap: procedure(bitmap: PALLEGRO_BITMAP; sx: Single; sy: Single; sw: Single; sh: Single; dx: Single; dy: Single; dw: Single; dh: Single; flags: Integer); cdecl;
  al_draw_scaled_rotated_bitmap: procedure(bitmap: PALLEGRO_BITMAP; cx: Single; cy: Single; dx: Single; dy: Single; xscale: Single; yscale: Single; angle: Single; flags: Integer); cdecl;
  al_draw_soft_line: procedure(v1: PALLEGRO_VERTEX; v2: PALLEGRO_VERTEX; state: UIntPtr; first: al_draw_soft_line_first; step: al_draw_soft_line_step; draw: al_draw_soft_line_draw); cdecl;
  al_draw_soft_triangle: procedure(v1: PALLEGRO_VERTEX; v2: PALLEGRO_VERTEX; v3: PALLEGRO_VERTEX; state: UIntPtr; init: al_draw_soft_triangle_init; first: al_draw_soft_triangle_first; step: al_draw_soft_triangle_step; draw: al_draw_soft_triangle_draw); cdecl;
  al_draw_spline: procedure(points: PSingle; color: ALLEGRO_COLOR; thickness: Single); cdecl;
  al_draw_text: procedure(const font: PALLEGRO_FONT; color: ALLEGRO_COLOR; x: Single; y: Single; flags: Integer; const text: PUTF8Char); cdecl;
  al_draw_textf: procedure(const font: PALLEGRO_FONT; color: ALLEGRO_COLOR; x: Single; y: Single; flags: Integer; const format: PUTF8Char) varargs; cdecl;
  al_draw_tinted_bitmap: procedure(bitmap: PALLEGRO_BITMAP; tint: ALLEGRO_COLOR; dx: Single; dy: Single; flags: Integer); cdecl;
  al_draw_tinted_bitmap_region: procedure(bitmap: PALLEGRO_BITMAP; tint: ALLEGRO_COLOR; sx: Single; sy: Single; sw: Single; sh: Single; dx: Single; dy: Single; flags: Integer); cdecl;
  al_draw_tinted_rotated_bitmap: procedure(bitmap: PALLEGRO_BITMAP; tint: ALLEGRO_COLOR; cx: Single; cy: Single; dx: Single; dy: Single; angle: Single; flags: Integer); cdecl;
  al_draw_tinted_scaled_bitmap: procedure(bitmap: PALLEGRO_BITMAP; tint: ALLEGRO_COLOR; sx: Single; sy: Single; sw: Single; sh: Single; dx: Single; dy: Single; dw: Single; dh: Single; flags: Integer); cdecl;
  al_draw_tinted_scaled_rotated_bitmap: procedure(bitmap: PALLEGRO_BITMAP; tint: ALLEGRO_COLOR; cx: Single; cy: Single; dx: Single; dy: Single; xscale: Single; yscale: Single; angle: Single; flags: Integer); cdecl;
  al_draw_tinted_scaled_rotated_bitmap_region: procedure(bitmap: PALLEGRO_BITMAP; sx: Single; sy: Single; sw: Single; sh: Single; tint: ALLEGRO_COLOR; cx: Single; cy: Single; dx: Single; dy: Single; xscale: Single; yscale: Single; angle: Single; flags: Integer); cdecl;
  al_draw_triangle: procedure(x1: Single; y1: Single; x2: Single; y2: Single; x3: Single; y3: Single; color: ALLEGRO_COLOR; thickness: Single); cdecl;
  al_draw_ustr: procedure(const font: PALLEGRO_FONT; color: ALLEGRO_COLOR; x: Single; y: Single; flags: Integer; const ustr: PALLEGRO_USTR); cdecl;
  al_draw_vertex_buffer: function(vertex_buffer: PALLEGRO_VERTEX_BUFFER; texture: PALLEGRO_BITMAP; start: Integer; _end: Integer; _type: Integer): Integer; cdecl;
  al_drop_next_event: function(p1: PALLEGRO_EVENT_QUEUE): Boolean; cdecl;
  al_drop_path_tail: procedure(path: PALLEGRO_PATH); cdecl;
  al_emit_user_event: function(p1: PALLEGRO_EVENT_SOURCE; p2: PALLEGRO_EVENT; dtor: al_emit_user_event_dtor): Boolean; cdecl;
  al_enable_menu_event_source: function(menu: PALLEGRO_MENU): PALLEGRO_EVENT_SOURCE; cdecl;
  al_fclearerr: procedure(f: PALLEGRO_FILE); cdecl;
  al_fclose: function(f: PALLEGRO_FILE): Boolean; cdecl;
  al_feof: function(f: PALLEGRO_FILE): Boolean; cdecl;
  al_ferrmsg: function(f: PALLEGRO_FILE): PUTF8Char; cdecl;
  al_ferror: function(f: PALLEGRO_FILE): Integer; cdecl;
  al_fflush: function(f: PALLEGRO_FILE): Boolean; cdecl;
  al_fget_ustr: function(f: PALLEGRO_FILE): PALLEGRO_USTR; cdecl;
  al_fgetc: function(f: PALLEGRO_FILE): Integer; cdecl;
  al_fgets: function(f: PALLEGRO_FILE; const p: PUTF8Char; max: NativeUInt): PUTF8Char; cdecl;
  al_filename_exists: function(const path: PUTF8Char): Boolean; cdecl;
  al_fill_silence: procedure(buf: Pointer; samples: Cardinal; depth: ALLEGRO_AUDIO_DEPTH; chan_conf: ALLEGRO_CHANNEL_CONF); cdecl;
  al_find_menu: function(haystack: PALLEGRO_MENU; id: UInt16): PALLEGRO_MENU; cdecl;
  al_find_menu_item: function(haystack: PALLEGRO_MENU; id: UInt16; menu: PPALLEGRO_MENU; index: PInteger): Boolean; cdecl;
  al_fixatan: function(x: al_fixed): al_fixed; cdecl;
  al_fixatan2: function(y: al_fixed; x: al_fixed): al_fixed; cdecl;
  al_fixhypot: function(x: al_fixed; y: al_fixed): al_fixed; cdecl;
  al_fixsqrt: function(x: al_fixed): al_fixed; cdecl;
  al_flip_display: procedure(); cdecl;
  al_flush_event_queue: procedure(p1: PALLEGRO_EVENT_QUEUE); cdecl;
  al_fopen: function(const path: PUTF8Char; const mode: PUTF8Char): PALLEGRO_FILE; cdecl;
  al_fopen_fd: function(fd: Integer; const mode: PUTF8Char): PALLEGRO_FILE; cdecl;
  al_fopen_interface: function(const vt: PALLEGRO_FILE_INTERFACE; const path: PUTF8Char; const mode: PUTF8Char): PALLEGRO_FILE; cdecl;
  al_fopen_slice: function(fp: PALLEGRO_FILE; initial_size: NativeUInt; const mode: PUTF8Char): PALLEGRO_FILE; cdecl;
  al_for_each_fs_entry: function(dir: PALLEGRO_FS_ENTRY; callback: al_for_each_fs_entry_callback; extra: Pointer): Integer; cdecl;
  al_fprintf: function(f: PALLEGRO_FILE; const format: PUTF8Char): Integer varargs; cdecl;
  al_fputc: function(f: PALLEGRO_FILE; c: Integer): Integer; cdecl;
  al_fputs: function(f: PALLEGRO_FILE; const p: PUTF8Char): Integer; cdecl;
  al_fread: function(f: PALLEGRO_FILE; ptr: Pointer; size: NativeUInt): NativeUInt; cdecl;
  al_fread16be: function(f: PALLEGRO_FILE): Int16; cdecl;
  al_fread16le: function(f: PALLEGRO_FILE): Int16; cdecl;
  al_fread32be: function(f: PALLEGRO_FILE): Int32; cdecl;
  al_fread32le: function(f: PALLEGRO_FILE): Int32; cdecl;
  al_free_with_context: procedure(ptr: Pointer; line: Integer; const _file: PUTF8Char; const func: PUTF8Char); cdecl;
  al_fs_entry_exists: function(e: PALLEGRO_FS_ENTRY): Boolean; cdecl;
  al_fseek: function(f: PALLEGRO_FILE; offset: Int64; whence: Integer): Boolean; cdecl;
  al_fsize: function(f: PALLEGRO_FILE): Int64; cdecl;
  al_ftell: function(f: PALLEGRO_FILE): Int64; cdecl;
  al_fungetc: function(f: PALLEGRO_FILE; c: Integer): Integer; cdecl;
  al_fwrite: function(f: PALLEGRO_FILE; const ptr: Pointer; size: NativeUInt): NativeUInt; cdecl;
  al_fwrite16be: function(f: PALLEGRO_FILE; w: Int16): NativeUInt; cdecl;
  al_fwrite16le: function(f: PALLEGRO_FILE; w: Int16): NativeUInt; cdecl;
  al_fwrite32be: function(f: PALLEGRO_FILE; l: Int32): NativeUInt; cdecl;
  al_fwrite32le: function(f: PALLEGRO_FILE; l: Int32): NativeUInt; cdecl;
  al_get_allegro_acodec_version: function(): UInt32; cdecl;
  al_get_allegro_audio_version: function(): UInt32; cdecl;
  al_get_allegro_color_version: function(): UInt32; cdecl;
  al_get_allegro_font_version: function(): UInt32; cdecl;
  al_get_allegro_image_version: function(): UInt32; cdecl;
  al_get_allegro_memfile_version: function(): UInt32; cdecl;
  al_get_allegro_native_dialog_version: function(): UInt32; cdecl;
  al_get_allegro_physfs_version: function(): UInt32; cdecl;
  al_get_allegro_primitives_version: function(): UInt32; cdecl;
  al_get_allegro_ttf_version: function(): UInt32; cdecl;
  al_get_allegro_version: function(): UInt32; cdecl;
  al_get_allegro_video_version: function(): UInt32; cdecl;
  al_get_app_name: function(): PUTF8Char; cdecl;
  al_get_audio_depth_size: function(conf: ALLEGRO_AUDIO_DEPTH): NativeUInt; cdecl;
  al_get_audio_device_name: function(const device: PALLEGRO_AUDIO_DEVICE): PUTF8Char; cdecl;
  al_get_audio_output_device: function(index: Integer): PALLEGRO_AUDIO_DEVICE; cdecl;
  al_get_audio_recorder_event: function(event: PALLEGRO_EVENT): PALLEGRO_AUDIO_RECORDER_EVENT; cdecl;
  al_get_audio_recorder_event_source: function(r: PALLEGRO_AUDIO_RECORDER): PALLEGRO_EVENT_SOURCE; cdecl;
  al_get_audio_stream_attached: function(const spl: PALLEGRO_AUDIO_STREAM): Boolean; cdecl;
  al_get_audio_stream_channels: function(const stream: PALLEGRO_AUDIO_STREAM): ALLEGRO_CHANNEL_CONF; cdecl;
  al_get_audio_stream_depth: function(const stream: PALLEGRO_AUDIO_STREAM): ALLEGRO_AUDIO_DEPTH; cdecl;
  al_get_audio_stream_event_source: function(stream: PALLEGRO_AUDIO_STREAM): PALLEGRO_EVENT_SOURCE; cdecl;
  al_get_audio_stream_fragment: function(const stream: PALLEGRO_AUDIO_STREAM): Pointer; cdecl;
  al_get_audio_stream_fragments: function(const stream: PALLEGRO_AUDIO_STREAM): Cardinal; cdecl;
  al_get_audio_stream_frequency: function(const stream: PALLEGRO_AUDIO_STREAM): Cardinal; cdecl;
  al_get_audio_stream_gain: function(const stream: PALLEGRO_AUDIO_STREAM): Single; cdecl;
  al_get_audio_stream_length: function(const stream: PALLEGRO_AUDIO_STREAM): Cardinal; cdecl;
  al_get_audio_stream_length_secs: function(stream: PALLEGRO_AUDIO_STREAM): Double; cdecl;
  al_get_audio_stream_pan: function(const stream: PALLEGRO_AUDIO_STREAM): Single; cdecl;
  al_get_audio_stream_played_samples: function(const stream: PALLEGRO_AUDIO_STREAM): UInt64; cdecl;
  al_get_audio_stream_playing: function(const spl: PALLEGRO_AUDIO_STREAM): Boolean; cdecl;
  al_get_audio_stream_playmode: function(const stream: PALLEGRO_AUDIO_STREAM): ALLEGRO_PLAYMODE; cdecl;
  al_get_audio_stream_position_secs: function(stream: PALLEGRO_AUDIO_STREAM): Double; cdecl;
  al_get_audio_stream_speed: function(const stream: PALLEGRO_AUDIO_STREAM): Single; cdecl;
  al_get_available_audio_stream_fragments: function(const stream: PALLEGRO_AUDIO_STREAM): Cardinal; cdecl;
  al_get_backbuffer: function(display: PALLEGRO_DISPLAY): PALLEGRO_BITMAP; cdecl;
  al_get_bitmap_blend_color: function(): ALLEGRO_COLOR; cdecl;
  al_get_bitmap_blender: procedure(op: PInteger; src: PInteger; dst: PInteger); cdecl;
  al_get_bitmap_depth: function(bitmap: PALLEGRO_BITMAP): Integer; cdecl;
  al_get_bitmap_flags: function(bitmap: PALLEGRO_BITMAP): Integer; cdecl;
  al_get_bitmap_format: function(bitmap: PALLEGRO_BITMAP): Integer; cdecl;
  al_get_bitmap_height: function(bitmap: PALLEGRO_BITMAP): Integer; cdecl;
  al_get_bitmap_samples: function(bitmap: PALLEGRO_BITMAP): Integer; cdecl;
  al_get_bitmap_width: function(bitmap: PALLEGRO_BITMAP): Integer; cdecl;
  al_get_bitmap_x: function(bitmap: PALLEGRO_BITMAP): Integer; cdecl;
  al_get_bitmap_y: function(bitmap: PALLEGRO_BITMAP): Integer; cdecl;
  al_get_blend_color: function(): ALLEGRO_COLOR; cdecl;
  al_get_blender: procedure(op: PInteger; source: PInteger; dest: PInteger); cdecl;
  al_get_channel_count: function(conf: ALLEGRO_CHANNEL_CONF): NativeUInt; cdecl;
  al_get_clipboard_text: function(display: PALLEGRO_DISPLAY): PUTF8Char; cdecl;
  al_get_clipping_rectangle: procedure(x: PInteger; y: PInteger; w: PInteger; h: PInteger); cdecl;
  al_get_config_value: function(const config: PALLEGRO_CONFIG; const section: PUTF8Char; const key: PUTF8Char): PUTF8Char; cdecl;
  al_get_cpu_count: function(): Integer; cdecl;
  al_get_current_directory: function(): PUTF8Char; cdecl;
  al_get_current_display: function(): PALLEGRO_DISPLAY; cdecl;
  al_get_current_inverse_transform: function(): PALLEGRO_TRANSFORM; cdecl;
  al_get_current_projection_transform: function(): PALLEGRO_TRANSFORM; cdecl;
  al_get_current_transform: function(): PALLEGRO_TRANSFORM; cdecl;
  al_get_default_menu_event_source: function(): PALLEGRO_EVENT_SOURCE; cdecl;
  al_get_default_mixer: function(): PALLEGRO_MIXER; cdecl;
  al_get_default_shader_source: function(_platform: ALLEGRO_SHADER_PLATFORM; _type: ALLEGRO_SHADER_TYPE): PUTF8Char; cdecl;
  al_get_default_voice: function(): PALLEGRO_VOICE; cdecl;
  al_get_display_event_source: function(display: PALLEGRO_DISPLAY): PALLEGRO_EVENT_SOURCE; cdecl;
  al_get_display_flags: function(display: PALLEGRO_DISPLAY): Integer; cdecl;
  al_get_display_format: function(display: PALLEGRO_DISPLAY): Integer; cdecl;
  al_get_display_height: function(display: PALLEGRO_DISPLAY): Integer; cdecl;
  al_get_display_menu: function(display: PALLEGRO_DISPLAY): PALLEGRO_MENU; cdecl;
  al_get_display_mode: function(index: Integer; mode: PALLEGRO_DISPLAY_MODE): PALLEGRO_DISPLAY_MODE; cdecl;
  al_get_display_option: function(display: PALLEGRO_DISPLAY; option: Integer): Integer; cdecl;
  al_get_display_orientation: function(display: PALLEGRO_DISPLAY): Integer; cdecl;
  al_get_display_refresh_rate: function(display: PALLEGRO_DISPLAY): Integer; cdecl;
  al_get_display_width: function(display: PALLEGRO_DISPLAY): Integer; cdecl;
  al_get_errno: function(): Integer; cdecl;
  al_get_event_source_data: function(const p1: PALLEGRO_EVENT_SOURCE): IntPtr; cdecl;
  al_get_fallback_font: function(font: PALLEGRO_FONT): PALLEGRO_FONT; cdecl;
  al_get_file_userdata: function(f: PALLEGRO_FILE): Pointer; cdecl;
  al_get_first_config_entry: function(const config: PALLEGRO_CONFIG; const section: PUTF8Char; iterator: PPALLEGRO_CONFIG_ENTRY): PUTF8Char; cdecl;
  al_get_first_config_section: function(const config: PALLEGRO_CONFIG; iterator: PPALLEGRO_CONFIG_SECTION): PUTF8Char; cdecl;
  al_get_font_ascent: function(const f: PALLEGRO_FONT): Integer; cdecl;
  al_get_font_descent: function(const f: PALLEGRO_FONT): Integer; cdecl;
  al_get_font_line_height: function(const f: PALLEGRO_FONT): Integer; cdecl;
  al_get_font_ranges: function(font: PALLEGRO_FONT; ranges_count: Integer; ranges: PInteger): Integer; cdecl;
  al_get_fs_entry_atime: function(e: PALLEGRO_FS_ENTRY): Longint; cdecl;
  al_get_fs_entry_ctime: function(e: PALLEGRO_FS_ENTRY): Longint; cdecl;
  al_get_fs_entry_mode: function(e: PALLEGRO_FS_ENTRY): UInt32; cdecl;
  al_get_fs_entry_mtime: function(e: PALLEGRO_FS_ENTRY): Longint; cdecl;
  al_get_fs_entry_name: function(e: PALLEGRO_FS_ENTRY): PUTF8Char; cdecl;
  al_get_fs_entry_size: function(e: PALLEGRO_FS_ENTRY): longint; cdecl;
  al_get_fs_interface: function(): PALLEGRO_FS_INTERFACE; cdecl;
  al_get_glyph: function(const f: PALLEGRO_FONT; prev_codepoint: Integer; codepoint: Integer; glyph: PALLEGRO_GLYPH): Boolean; cdecl;
  al_get_glyph_advance: function(const f: PALLEGRO_FONT; codepoint1: Integer; codepoint2: Integer): Integer; cdecl;
  al_get_glyph_dimensions: function(const f: PALLEGRO_FONT; codepoint: Integer; bbx: PInteger; bby: PInteger; bbw: PInteger; bbh: PInteger): Boolean; cdecl;
  al_get_glyph_width: function(const f: PALLEGRO_FONT; codepoint: Integer): Integer; cdecl;
  al_get_haptic_autocenter: function(p1: PALLEGRO_HAPTIC): Double; cdecl;
  al_get_haptic_capabilities: function(p1: PALLEGRO_HAPTIC): Integer; cdecl;
  al_get_haptic_effect_duration: function(p1: PALLEGRO_HAPTIC_EFFECT): Double; cdecl;
  al_get_haptic_from_display: function(p1: PALLEGRO_DISPLAY): PALLEGRO_HAPTIC; cdecl;
  al_get_haptic_from_joystick: function(p1: PALLEGRO_JOYSTICK): PALLEGRO_HAPTIC; cdecl;
  al_get_haptic_from_keyboard: function(p1: PALLEGRO_KEYBOARD): PALLEGRO_HAPTIC; cdecl;
  al_get_haptic_from_mouse: function(p1: PALLEGRO_MOUSE): PALLEGRO_HAPTIC; cdecl;
  al_get_haptic_from_touch_input: function(p1: PALLEGRO_TOUCH_INPUT): PALLEGRO_HAPTIC; cdecl;
  al_get_haptic_gain: function(p1: PALLEGRO_HAPTIC): Double; cdecl;
  al_get_index_buffer_size: function(buffer: PALLEGRO_INDEX_BUFFER): Integer; cdecl;
  al_get_joystick: function(joyn: Integer): PALLEGRO_JOYSTICK; cdecl;
  al_get_joystick_active: function(p1: PALLEGRO_JOYSTICK): Boolean; cdecl;
  al_get_joystick_axis_name: function(p1: PALLEGRO_JOYSTICK; stick: Integer; axis: Integer): PUTF8Char; cdecl;
  al_get_joystick_button_name: function(p1: PALLEGRO_JOYSTICK; buttonn: Integer): PUTF8Char; cdecl;
  al_get_joystick_event_source: function(): PALLEGRO_EVENT_SOURCE; cdecl;
  al_get_joystick_name: function(p1: PALLEGRO_JOYSTICK): PUTF8Char; cdecl;
  al_get_joystick_num_axes: function(p1: PALLEGRO_JOYSTICK; stick: Integer): Integer; cdecl;
  al_get_joystick_num_buttons: function(p1: PALLEGRO_JOYSTICK): Integer; cdecl;
  al_get_joystick_num_sticks: function(p1: PALLEGRO_JOYSTICK): Integer; cdecl;
  al_get_joystick_state: procedure(p1: PALLEGRO_JOYSTICK; ret_state: PALLEGRO_JOYSTICK_STATE); cdecl;
  al_get_joystick_stick_flags: function(p1: PALLEGRO_JOYSTICK; stick: Integer): Integer; cdecl;
  al_get_joystick_stick_name: function(p1: PALLEGRO_JOYSTICK; stick: Integer): PUTF8Char; cdecl;
  al_get_keyboard_event_source: function(): PALLEGRO_EVENT_SOURCE; cdecl;
  al_get_keyboard_state: procedure(ret_state: PALLEGRO_KEYBOARD_STATE); cdecl;
  al_get_max_haptic_effects: function(p1: PALLEGRO_HAPTIC): Integer; cdecl;
  al_get_menu_item_caption: function(menu: PALLEGRO_MENU; pos: Integer): PUTF8Char; cdecl;
  al_get_menu_item_flags: function(menu: PALLEGRO_MENU; pos: Integer): Integer; cdecl;
  al_get_menu_item_icon: function(menu: PALLEGRO_MENU; pos: Integer): PALLEGRO_BITMAP; cdecl;
  al_get_mixer_attached: function(const mixer: PALLEGRO_MIXER): Boolean; cdecl;
  al_get_mixer_channels: function(const mixer: PALLEGRO_MIXER): ALLEGRO_CHANNEL_CONF; cdecl;
  al_get_mixer_depth: function(const mixer: PALLEGRO_MIXER): ALLEGRO_AUDIO_DEPTH; cdecl;
  al_get_mixer_frequency: function(const mixer: PALLEGRO_MIXER): Cardinal; cdecl;
  al_get_mixer_gain: function(const mixer: PALLEGRO_MIXER): Single; cdecl;
  al_get_mixer_playing: function(const mixer: PALLEGRO_MIXER): Boolean; cdecl;
  al_get_mixer_quality: function(const mixer: PALLEGRO_MIXER): ALLEGRO_MIXER_QUALITY; cdecl;
  al_get_monitor_dpi: function(adapter: Integer): Integer; cdecl;
  al_get_monitor_info: function(adapter: Integer; info: PALLEGRO_MONITOR_INFO): Boolean; cdecl;
  al_get_monitor_refresh_rate: function(adapter: Integer): Integer; cdecl;
  al_get_mouse_cursor_position: function(ret_x: PInteger; ret_y: PInteger): Boolean; cdecl;
  al_get_mouse_emulation_mode: function(): Integer; cdecl;
  al_get_mouse_event_source: function(): PALLEGRO_EVENT_SOURCE; cdecl;
  al_get_mouse_num_axes: function(): Cardinal; cdecl;
  al_get_mouse_num_buttons: function(): Cardinal; cdecl;
  al_get_mouse_state: procedure(ret_state: PALLEGRO_MOUSE_STATE); cdecl;
  al_get_mouse_state_axis: function(const state: PALLEGRO_MOUSE_STATE; axis: Integer): Integer; cdecl;
  al_get_mouse_wheel_precision: function(): Integer; cdecl;
  al_get_native_file_dialog_count: function(const dialog: PALLEGRO_FILECHOOSER): Integer; cdecl;
  al_get_native_file_dialog_path: function(const dialog: PALLEGRO_FILECHOOSER; index: NativeUInt): PUTF8Char; cdecl;
  al_get_native_text_log_event_source: function(textlog: PALLEGRO_TEXTLOG): PALLEGRO_EVENT_SOURCE; cdecl;
  al_get_new_bitmap_depth: function(): Integer; cdecl;
  al_get_new_bitmap_flags: function(): Integer; cdecl;
  al_get_new_bitmap_format: function(): Integer; cdecl;
  al_get_new_bitmap_samples: function(): Integer; cdecl;
  al_get_new_display_adapter: function(): Integer; cdecl;
  al_get_new_display_flags: function(): Integer; cdecl;
  al_get_new_display_option: function(option: Integer; importance: PInteger): Integer; cdecl;
  al_get_new_display_refresh_rate: function(): Integer; cdecl;
  al_get_new_file_interface: function(): PALLEGRO_FILE_INTERFACE; cdecl;
  al_get_new_window_position: procedure(x: PInteger; y: PInteger); cdecl;
  al_get_new_window_title: function(): PUTF8Char; cdecl;
  al_get_next_config_entry: function(iterator: PPALLEGRO_CONFIG_ENTRY): PUTF8Char; cdecl;
  al_get_next_config_section: function(iterator: PPALLEGRO_CONFIG_SECTION): PUTF8Char; cdecl;
  al_get_next_event: function(p1: PALLEGRO_EVENT_QUEUE; ret_event: PALLEGRO_EVENT): Boolean; cdecl;
  al_get_num_audio_output_devices: function(): Integer; cdecl;
  al_get_num_display_modes: function(): Integer; cdecl;
  al_get_num_joysticks: function(): Integer; cdecl;
  al_get_num_video_adapters: function(): Integer; cdecl;
  al_get_org_name: function(): PUTF8Char; cdecl;
  al_get_parent_bitmap: function(bitmap: PALLEGRO_BITMAP): PALLEGRO_BITMAP; cdecl;
  al_get_path_basename: function(const path: PALLEGRO_PATH): PUTF8Char; cdecl;
  al_get_path_component: function(const path: PALLEGRO_PATH; i: Integer): PUTF8Char; cdecl;
  al_get_path_drive: function(const path: PALLEGRO_PATH): PUTF8Char; cdecl;
  al_get_path_extension: function(const path: PALLEGRO_PATH): PUTF8Char; cdecl;
  al_get_path_filename: function(const path: PALLEGRO_PATH): PUTF8Char; cdecl;
  al_get_path_num_components: function(const path: PALLEGRO_PATH): Integer; cdecl;
  al_get_path_tail: function(const path: PALLEGRO_PATH): PUTF8Char; cdecl;
  al_get_pixel: function(bitmap: PALLEGRO_BITMAP; x: Integer; y: Integer): ALLEGRO_COLOR; cdecl;
  al_get_pixel_block_height: function(format: Integer): Integer; cdecl;
  al_get_pixel_block_size: function(format: Integer): Integer; cdecl;
  al_get_pixel_block_width: function(format: Integer): Integer; cdecl;
  al_get_pixel_format_bits: function(format: Integer): Integer; cdecl;
  al_get_pixel_size: function(format: Integer): Integer; cdecl;
  al_get_ram_size: function(): Integer; cdecl;
  al_get_sample: function(spl: PALLEGRO_SAMPLE_INSTANCE): PALLEGRO_SAMPLE; cdecl;
  al_get_sample_channels: function(const spl: PALLEGRO_SAMPLE): ALLEGRO_CHANNEL_CONF; cdecl;
  al_get_sample_data: function(const spl: PALLEGRO_SAMPLE): Pointer; cdecl;
  al_get_sample_depth: function(const spl: PALLEGRO_SAMPLE): ALLEGRO_AUDIO_DEPTH; cdecl;
  al_get_sample_frequency: function(const spl: PALLEGRO_SAMPLE): Cardinal; cdecl;
  al_get_sample_instance_attached: function(const spl: PALLEGRO_SAMPLE_INSTANCE): Boolean; cdecl;
  al_get_sample_instance_channels: function(const spl: PALLEGRO_SAMPLE_INSTANCE): ALLEGRO_CHANNEL_CONF; cdecl;
  al_get_sample_instance_depth: function(const spl: PALLEGRO_SAMPLE_INSTANCE): ALLEGRO_AUDIO_DEPTH; cdecl;
  al_get_sample_instance_frequency: function(const spl: PALLEGRO_SAMPLE_INSTANCE): Cardinal; cdecl;
  al_get_sample_instance_gain: function(const spl: PALLEGRO_SAMPLE_INSTANCE): Single; cdecl;
  al_get_sample_instance_length: function(const spl: PALLEGRO_SAMPLE_INSTANCE): Cardinal; cdecl;
  al_get_sample_instance_pan: function(const spl: PALLEGRO_SAMPLE_INSTANCE): Single; cdecl;
  al_get_sample_instance_playing: function(const spl: PALLEGRO_SAMPLE_INSTANCE): Boolean; cdecl;
  al_get_sample_instance_playmode: function(const spl: PALLEGRO_SAMPLE_INSTANCE): ALLEGRO_PLAYMODE; cdecl;
  al_get_sample_instance_position: function(const spl: PALLEGRO_SAMPLE_INSTANCE): Cardinal; cdecl;
  al_get_sample_instance_speed: function(const spl: PALLEGRO_SAMPLE_INSTANCE): Single; cdecl;
  al_get_sample_instance_time: function(const spl: PALLEGRO_SAMPLE_INSTANCE): Single; cdecl;
  al_get_sample_length: function(const spl: PALLEGRO_SAMPLE): Cardinal; cdecl;
  al_get_separate_bitmap_blender: procedure(op: PInteger; src: PInteger; dst: PInteger; alpha_op: PInteger; alpha_src: PInteger; alpha_dst: PInteger); cdecl;
  al_get_separate_blender: procedure(op: PInteger; source: PInteger; dest: PInteger; alpha_op: PInteger; alpha_src: PInteger; alpha_dest: PInteger); cdecl;
  al_get_shader_log: function(shader: PALLEGRO_SHADER): PUTF8Char; cdecl;
  al_get_shader_platform: function(shader: PALLEGRO_SHADER): ALLEGRO_SHADER_PLATFORM; cdecl;
  al_get_standard_path: function(id: Integer): PALLEGRO_PATH; cdecl;
  al_get_system_config: function(): PALLEGRO_CONFIG; cdecl;
  al_get_system_driver: function(): PALLEGRO_SYSTEM; cdecl;
  al_get_system_id: function(): ALLEGRO_SYSTEM_ID; cdecl;
  al_get_target_bitmap: function(): PALLEGRO_BITMAP; cdecl;
  al_get_text_dimensions: procedure(const f: PALLEGRO_FONT; const text: PUTF8Char; bbx: PInteger; bby: PInteger; bbw: PInteger; bbh: PInteger); cdecl;
  al_get_text_width: function(const f: PALLEGRO_FONT; const str: PUTF8Char): Integer; cdecl;
  al_get_thread_should_stop: function(outer: PALLEGRO_THREAD): Boolean; cdecl;
  al_get_time: function(): Double; cdecl;
  al_get_timer_count: function(const timer: PALLEGRO_TIMER): Int64; cdecl;
  al_get_timer_event_source: function(timer: PALLEGRO_TIMER): PALLEGRO_EVENT_SOURCE; cdecl;
  al_get_timer_speed: function(const timer: PALLEGRO_TIMER): Double; cdecl;
  al_get_timer_started: function(const timer: PALLEGRO_TIMER): Boolean; cdecl;
  al_get_touch_input_event_source: function(): PALLEGRO_EVENT_SOURCE; cdecl;
  al_get_touch_input_mouse_emulation_event_source: function(): PALLEGRO_EVENT_SOURCE; cdecl;
  al_get_touch_input_state: procedure(ret_state: PALLEGRO_TOUCH_INPUT_STATE); cdecl;
  al_get_ustr_dimensions: procedure(const f: PALLEGRO_FONT; const text: PALLEGRO_USTR; bbx: PInteger; bby: PInteger; bbw: PInteger; bbh: PInteger); cdecl;
  al_get_ustr_width: function(const f: PALLEGRO_FONT; const ustr: PALLEGRO_USTR): Integer; cdecl;
  al_get_vertex_buffer_size: function(buffer: PALLEGRO_VERTEX_BUFFER): Integer; cdecl;
  al_get_video_audio_rate: function(video: PALLEGRO_VIDEO): Double; cdecl;
  al_get_video_event_source: function(video: PALLEGRO_VIDEO): PALLEGRO_EVENT_SOURCE; cdecl;
  al_get_video_fps: function(video: PALLEGRO_VIDEO): Double; cdecl;
  al_get_video_frame: function(video: PALLEGRO_VIDEO): PALLEGRO_BITMAP; cdecl;
  al_get_video_position: function(video: PALLEGRO_VIDEO; which: ALLEGRO_VIDEO_POSITION_TYPE): Double; cdecl;
  al_get_video_scaled_height: function(video: PALLEGRO_VIDEO): Single; cdecl;
  al_get_video_scaled_width: function(video: PALLEGRO_VIDEO): Single; cdecl;
  al_get_voice_channels: function(const voice: PALLEGRO_VOICE): ALLEGRO_CHANNEL_CONF; cdecl;
  al_get_voice_depth: function(const voice: PALLEGRO_VOICE): ALLEGRO_AUDIO_DEPTH; cdecl;
  al_get_voice_frequency: function(const voice: PALLEGRO_VOICE): Cardinal; cdecl;
  al_get_voice_playing: function(const voice: PALLEGRO_VOICE): Boolean; cdecl;
  al_get_voice_position: function(const voice: PALLEGRO_VOICE): Cardinal; cdecl;
  al_get_win_window_handle: function(display: PALLEGRO_DISPLAY): HWND; cdecl;
  al_get_window_constraints: function(display: PALLEGRO_DISPLAY; min_w: PInteger; min_h: PInteger; max_w: PInteger; max_h: PInteger): Boolean; cdecl;
  al_get_window_position: procedure(display: PALLEGRO_DISPLAY; x: PInteger; y: PInteger); cdecl;
  al_grab_font_from_bitmap: function(bmp: PALLEGRO_BITMAP; n: Integer; ranges: PInteger): PALLEGRO_FONT; cdecl;
  al_grab_mouse: function(display: PALLEGRO_DISPLAY): Boolean; cdecl;
  al_hide_mouse_cursor: function(display: PALLEGRO_DISPLAY): Boolean; cdecl;
  al_hold_bitmap_drawing: procedure(hold: Boolean); cdecl;
  al_horizontal_shear_transform: procedure(trans: PALLEGRO_TRANSFORM; theta: Single); cdecl;
  al_identify_bitmap: function(const filename: PUTF8Char): PUTF8Char; cdecl;
  al_identify_bitmap_f: function(fp: PALLEGRO_FILE): PUTF8Char; cdecl;
  al_identify_sample: function(const filename: PUTF8Char): PUTF8Char; cdecl;
  al_identify_sample_f: function(fp: PALLEGRO_FILE): PUTF8Char; cdecl;
  al_identify_video: function(const filename: PUTF8Char): PUTF8Char; cdecl;
  al_identify_video_f: function(fp: PALLEGRO_FILE): PUTF8Char; cdecl;
  al_identity_transform: procedure(trans: PALLEGRO_TRANSFORM); cdecl;
  al_inhibit_screensaver: function(inhibit: Boolean): Boolean; cdecl;
  al_init_acodec_addon: function(): Boolean; cdecl;
  al_init_font_addon: function(): Boolean; cdecl;
  al_init_image_addon: function(): Boolean; cdecl;
  al_init_native_dialog_addon: function(): Boolean; cdecl;
  al_init_primitives_addon: function(): Boolean; cdecl;
  al_init_timeout: procedure(timeout: PALLEGRO_TIMEOUT; seconds: Double); cdecl;
  al_init_ttf_addon: function(): Boolean; cdecl;
  al_init_user_event_source: procedure(p1: PALLEGRO_EVENT_SOURCE); cdecl;
  al_init_video_addon: function(): Boolean; cdecl;
  al_insert_menu_item: function(parent: PALLEGRO_MENU; pos: Integer; const title: PUTF8Char; id: UInt16; flags: Integer; icon: PALLEGRO_BITMAP; submenu: PALLEGRO_MENU): Integer; cdecl;
  al_insert_path_component: procedure(path: PALLEGRO_PATH; i: Integer; const s: PUTF8Char); cdecl;
  al_install_audio: function(): Boolean; cdecl;
  al_install_haptic: function(): Boolean; cdecl;
  al_install_joystick: function(): Boolean; cdecl;
  al_install_keyboard: function(): Boolean; cdecl;
  al_install_mouse: function(): Boolean; cdecl;
  al_install_system: function(version: Integer; atexit_ptr: al_install_system_atexit_ptr): Boolean; cdecl;
  al_install_touch_input: function(): Boolean; cdecl;
  al_invert_transform: procedure(trans: PALLEGRO_TRANSFORM); cdecl;
  al_is_acodec_addon_initialized: function(): Boolean; cdecl;
  al_is_audio_installed: function(): Boolean; cdecl;
  al_is_audio_recorder_recording: function(r: PALLEGRO_AUDIO_RECORDER): Boolean; cdecl;
  al_is_bitmap_drawing_held: function(): Boolean; cdecl;
  al_is_bitmap_locked: function(bitmap: PALLEGRO_BITMAP): Boolean; cdecl;
  al_is_color_valid: function(color: ALLEGRO_COLOR): Boolean; cdecl;
  al_is_compatible_bitmap: function(bitmap: PALLEGRO_BITMAP): Boolean; cdecl;
  al_is_display_haptic: function(p1: PALLEGRO_DISPLAY): Boolean; cdecl;
  al_is_event_queue_empty: function(p1: PALLEGRO_EVENT_QUEUE): Boolean; cdecl;
  al_is_event_queue_paused: function(const p1: PALLEGRO_EVENT_QUEUE): Boolean; cdecl;
  al_is_event_source_registered: function(p1: PALLEGRO_EVENT_QUEUE; p2: PALLEGRO_EVENT_SOURCE): Boolean; cdecl;
  al_is_font_addon_initialized: function(): Boolean; cdecl;
  al_is_haptic_active: function(p1: PALLEGRO_HAPTIC): Boolean; cdecl;
  al_is_haptic_capable: function(p1: PALLEGRO_HAPTIC; p2: Integer): Boolean; cdecl;
  al_is_haptic_effect_ok: function(p1: PALLEGRO_HAPTIC; p2: PALLEGRO_HAPTIC_EFFECT): Boolean; cdecl;
  al_is_haptic_effect_playing: function(p1: PALLEGRO_HAPTIC_EFFECT_ID): Boolean; cdecl;
  al_is_haptic_installed: function(): Boolean; cdecl;
  al_is_image_addon_initialized: function(): Boolean; cdecl;
  al_is_joystick_haptic: function(p1: PALLEGRO_JOYSTICK): Boolean; cdecl;
  al_is_joystick_installed: function(): Boolean; cdecl;
  al_is_keyboard_haptic: function(p1: PALLEGRO_KEYBOARD): Boolean; cdecl;
  al_is_keyboard_installed: function(): Boolean; cdecl;
  al_is_mouse_haptic: function(p1: PALLEGRO_MOUSE): Boolean; cdecl;
  al_is_mouse_installed: function(): Boolean; cdecl;
  al_is_native_dialog_addon_initialized: function(): Boolean; cdecl;
  al_is_primitives_addon_initialized: function(): Boolean; cdecl;
  al_is_sub_bitmap: function(bitmap: PALLEGRO_BITMAP): Boolean; cdecl;
  al_is_system_installed: function(): Boolean; cdecl;
  al_is_touch_input_haptic: function(p1: PALLEGRO_TOUCH_INPUT): Boolean; cdecl;
  al_is_touch_input_installed: function(): Boolean; cdecl;
  al_is_ttf_addon_initialized: function(): Boolean; cdecl;
  al_is_video_addon_initialized: function(): Boolean; cdecl;
  al_is_video_playing: function(video: PALLEGRO_VIDEO): Boolean; cdecl;
  al_join_paths: function(path: PALLEGRO_PATH; const tail: PALLEGRO_PATH): Boolean; cdecl;
  al_join_thread: procedure(outer: PALLEGRO_THREAD; ret_value: PPointer); cdecl;
  al_key_down: function(const p1: PALLEGRO_KEYBOARD_STATE; keycode: Integer): Boolean; cdecl;
  al_keycode_to_name: function(keycode: Integer): PUTF8Char; cdecl;
  al_load_audio_stream: function(const filename: PUTF8Char; buffer_count: NativeUInt; samples: Cardinal): PALLEGRO_AUDIO_STREAM; cdecl;
  al_load_audio_stream_f: function(fp: PALLEGRO_FILE; const ident: PUTF8Char; buffer_count: NativeUInt; samples: Cardinal): PALLEGRO_AUDIO_STREAM; cdecl;
  al_load_bitmap: function(const filename: PUTF8Char): PALLEGRO_BITMAP; cdecl;
  al_load_bitmap_f: function(fp: PALLEGRO_FILE; const ident: PUTF8Char): PALLEGRO_BITMAP; cdecl;
  al_load_bitmap_flags: function(const filename: PUTF8Char; flags: Integer): PALLEGRO_BITMAP; cdecl;
  al_load_bitmap_flags_f: function(fp: PALLEGRO_FILE; const ident: PUTF8Char; flags: Integer): PALLEGRO_BITMAP; cdecl;
  al_load_bitmap_font: function(const filename: PUTF8Char): PALLEGRO_FONT; cdecl;
  al_load_bitmap_font_flags: function(const filename: PUTF8Char; flags: Integer): PALLEGRO_FONT; cdecl;
  al_load_config_file: function(const filename: PUTF8Char): PALLEGRO_CONFIG; cdecl;
  al_load_config_file_f: function(filename: PALLEGRO_FILE): PALLEGRO_CONFIG; cdecl;
  al_load_font: function(const filename: PUTF8Char; size: Integer; flags: Integer): PALLEGRO_FONT; cdecl;
  al_load_sample: function(const filename: PUTF8Char): PALLEGRO_SAMPLE; cdecl;
  al_load_sample_f: function(fp: PALLEGRO_FILE; const ident: PUTF8Char): PALLEGRO_SAMPLE; cdecl;
  al_load_ttf_font: function(const filename: PUTF8Char; size: Integer; flags: Integer): PALLEGRO_FONT; cdecl;
  al_load_ttf_font_f: function(_file: PALLEGRO_FILE; const filename: PUTF8Char; size: Integer; flags: Integer): PALLEGRO_FONT; cdecl;
  al_load_ttf_font_stretch: function(const filename: PUTF8Char; w: Integer; h: Integer; flags: Integer): PALLEGRO_FONT; cdecl;
  al_load_ttf_font_stretch_f: function(_file: PALLEGRO_FILE; const filename: PUTF8Char; w: Integer; h: Integer; flags: Integer): PALLEGRO_FONT; cdecl;
  al_lock_bitmap: function(bitmap: PALLEGRO_BITMAP; format: Integer; flags: Integer): PALLEGRO_LOCKED_REGION; cdecl;
  al_lock_bitmap_blocked: function(bitmap: PALLEGRO_BITMAP; flags: Integer): PALLEGRO_LOCKED_REGION; cdecl;
  al_lock_bitmap_region: function(bitmap: PALLEGRO_BITMAP; x: Integer; y: Integer; width: Integer; height: Integer; format: Integer; flags: Integer): PALLEGRO_LOCKED_REGION; cdecl;
  al_lock_bitmap_region_blocked: function(bitmap: PALLEGRO_BITMAP; x_block: Integer; y_block: Integer; width_block: Integer; height_block: Integer; flags: Integer): PALLEGRO_LOCKED_REGION; cdecl;
  al_lock_index_buffer: function(buffer: PALLEGRO_INDEX_BUFFER; offset: Integer; length: Integer; flags: Integer): Pointer; cdecl;
  al_lock_mutex: procedure(mutex: PALLEGRO_MUTEX); cdecl;
  al_lock_sample_id: function(spl_id: PALLEGRO_SAMPLE_ID): PALLEGRO_SAMPLE_INSTANCE; cdecl;
  al_lock_vertex_buffer: function(buffer: PALLEGRO_VERTEX_BUFFER; offset: Integer; length: Integer; flags: Integer): Pointer; cdecl;
  al_make_directory: function(const path: PUTF8Char): Boolean; cdecl;
  al_make_path_canonical: function(path: PALLEGRO_PATH): Boolean; cdecl;
  al_make_temp_file: function(const tmpl: PUTF8Char; ret_path: PPALLEGRO_PATH): PALLEGRO_FILE; cdecl;
  al_malloc_with_context: function(n: NativeUInt; line: Integer; const _file: PUTF8Char; const func: PUTF8Char): Pointer; cdecl;
  al_map_rgb: function(r: Byte; g: Byte; b: Byte): ALLEGRO_COLOR; cdecl;
  al_map_rgb_f: function(r: Single; g: Single; b: Single): ALLEGRO_COLOR; cdecl;
  al_map_rgba: function(r: Byte; g: Byte; b: Byte; a: Byte): ALLEGRO_COLOR; cdecl;
  al_map_rgba_f: function(r: Single; g: Single; b: Single; a: Single): ALLEGRO_COLOR; cdecl;
  al_merge_config: function(const cfg1: PALLEGRO_CONFIG; const cfg2: PALLEGRO_CONFIG): PALLEGRO_CONFIG; cdecl;
  al_merge_config_into: procedure(master: PALLEGRO_CONFIG; const add: PALLEGRO_CONFIG); cdecl;
  al_mouse_button_down: function(const state: PALLEGRO_MOUSE_STATE; button: Integer): Boolean; cdecl;
  al_open_directory: function(e: PALLEGRO_FS_ENTRY): Boolean; cdecl;
  al_open_fs_entry: function(e: PALLEGRO_FS_ENTRY; const mode: PUTF8Char): PALLEGRO_FILE; cdecl;
  al_open_memfile: function(mem: Pointer; size: Int64; const mode: PUTF8Char): PALLEGRO_FILE; cdecl;
  al_open_native_text_log: function(const title: PUTF8Char; flags: Integer): PALLEGRO_TEXTLOG; cdecl;
  al_open_video: function(const filename: PUTF8Char): PALLEGRO_VIDEO; cdecl;
  al_orthographic_transform: procedure(trans: PALLEGRO_TRANSFORM; left: Single; top: Single; n: Single; right: Single; bottom: Single; f: Single); cdecl;
  al_path_cstr: function(const path: PALLEGRO_PATH; delim: UTF8Char): PUTF8Char; cdecl;
  al_path_ustr: function(const path: PALLEGRO_PATH; delim: UTF8Char): PALLEGRO_USTR; cdecl;
  al_pause_event_queue: procedure(p1: PALLEGRO_EVENT_QUEUE; p2: Boolean); cdecl;
  al_peek_next_event: function(p1: PALLEGRO_EVENT_QUEUE; ret_event: PALLEGRO_EVENT): Boolean; cdecl;
  al_perspective_transform: procedure(trans: PALLEGRO_TRANSFORM; left: Single; top: Single; n: Single; right: Single; bottom: Single; f: Single); cdecl;
  al_play_haptic_effect: function(p1: PALLEGRO_HAPTIC_EFFECT_ID; p2: Integer): Boolean; cdecl;
  al_play_sample: function(data: PALLEGRO_SAMPLE; gain: Single; pan: Single; speed: Single; loop: ALLEGRO_PLAYMODE; ret_id: PALLEGRO_SAMPLE_ID): Boolean; cdecl;
  al_play_sample_instance: function(spl: PALLEGRO_SAMPLE_INSTANCE): Boolean; cdecl;
  al_popup_menu: function(popup: PALLEGRO_MENU; display: PALLEGRO_DISPLAY): Boolean; cdecl;
  al_premul_rgba: function(r: Byte; g: Byte; b: Byte; a: Byte): ALLEGRO_COLOR; cdecl;
  al_premul_rgba_f: function(r: Single; g: Single; b: Single; a: Single): ALLEGRO_COLOR; cdecl;
  al_put_blended_pixel: procedure(x: Integer; y: Integer; color: ALLEGRO_COLOR); cdecl;
  al_put_pixel: procedure(x: Integer; y: Integer; color: ALLEGRO_COLOR); cdecl;
  al_read_directory: function(e: PALLEGRO_FS_ENTRY): PALLEGRO_FS_ENTRY; cdecl;
  al_realloc_with_context: function(ptr: Pointer; n: NativeUInt; line: Integer; const _file: PUTF8Char; const func: PUTF8Char): Pointer; cdecl;
  al_rebase_path: function(const head: PALLEGRO_PATH; tail: PALLEGRO_PATH): Boolean; cdecl;
  al_reconfigure_joysticks: function(): Boolean; cdecl;
  al_ref_buffer: function(info: PALLEGRO_USTR_INFO; const s: PUTF8Char; size: NativeUInt): PALLEGRO_USTR; cdecl;
  al_ref_cstr: function(info: PALLEGRO_USTR_INFO; const s: PUTF8Char): PALLEGRO_USTR; cdecl;
  al_ref_ustr: function(info: PALLEGRO_USTR_INFO; const us: PALLEGRO_USTR; start_pos: Integer; end_pos: Integer): PALLEGRO_USTR; cdecl;
  al_register_assert_handler: procedure(handler: al_register_assert_handler_handler); cdecl;
  al_register_audio_stream_loader: function(const ext: PUTF8Char; stream_loader: al_register_audio_stream_loader_stream_loader): Boolean; cdecl;
  al_register_audio_stream_loader_f: function(const ext: PUTF8Char; stream_loader: al_register_audio_stream_loader_f_stream_loader): Boolean; cdecl;
  al_register_bitmap_identifier: function(const ext: PUTF8Char; identifier: ALLEGRO_IIO_IDENTIFIER_FUNCTION): Boolean; cdecl;
  al_register_bitmap_loader: function(const ext: PUTF8Char; loader: ALLEGRO_IIO_LOADER_FUNCTION): Boolean; cdecl;
  al_register_bitmap_loader_f: function(const ext: PUTF8Char; fs_loader: ALLEGRO_IIO_FS_LOADER_FUNCTION): Boolean; cdecl;
  al_register_bitmap_saver: function(const ext: PUTF8Char; saver: ALLEGRO_IIO_SAVER_FUNCTION): Boolean; cdecl;
  al_register_bitmap_saver_f: function(const ext: PUTF8Char; fs_saver: ALLEGRO_IIO_FS_SAVER_FUNCTION): Boolean; cdecl;
  al_register_event_source: procedure(p1: PALLEGRO_EVENT_QUEUE; p2: PALLEGRO_EVENT_SOURCE); cdecl;
  al_register_font_loader: function(const ext: PUTF8Char; load: al_register_font_loader_load): Boolean; cdecl;
  al_register_sample_identifier: function(const ext: PUTF8Char; identifier: al_register_sample_identifier_identifier): Boolean; cdecl;
  al_register_sample_loader: function(const ext: PUTF8Char; loader: al_register_sample_loader_loader): Boolean; cdecl;
  al_register_sample_loader_f: function(const ext: PUTF8Char; loader: al_register_sample_loader_f_loader): Boolean; cdecl;
  al_register_sample_saver: function(const ext: PUTF8Char; saver: al_register_sample_saver_saver): Boolean; cdecl;
  al_register_sample_saver_f: function(const ext: PUTF8Char; saver: al_register_sample_saver_f_saver): Boolean; cdecl;
  al_register_trace_handler: procedure(handler: al_register_trace_handler_handler); cdecl;
  al_release_haptic: function(p1: PALLEGRO_HAPTIC): Boolean; cdecl;
  al_release_haptic_effect: function(p1: PALLEGRO_HAPTIC_EFFECT_ID): Boolean; cdecl;
  al_release_joystick: procedure(p1: PALLEGRO_JOYSTICK); cdecl;
  al_remove_config_key: function(config: PALLEGRO_CONFIG; const section: PUTF8Char; const key: PUTF8Char): Boolean; cdecl;
  al_remove_config_section: function(config: PALLEGRO_CONFIG; const section: PUTF8Char): Boolean; cdecl;
  al_remove_display_menu: function(display: PALLEGRO_DISPLAY): PALLEGRO_MENU; cdecl;
  al_remove_filename: function(const path: PUTF8Char): Boolean; cdecl;
  al_remove_fs_entry: function(e: PALLEGRO_FS_ENTRY): Boolean; cdecl;
  al_remove_menu_item: function(menu: PALLEGRO_MENU; pos: Integer): Boolean; cdecl;
  al_remove_path_component: procedure(path: PALLEGRO_PATH; i: Integer); cdecl;
  al_reparent_bitmap: procedure(bitmap: PALLEGRO_BITMAP; parent: PALLEGRO_BITMAP; x: Integer; y: Integer; w: Integer; h: Integer); cdecl;
  al_replace_path_component: procedure(path: PALLEGRO_PATH; i: Integer; const s: PUTF8Char); cdecl;
  al_reserve_samples: function(reserve_samples: Integer): Boolean; cdecl;
  al_reset_bitmap_blender: procedure(); cdecl;
  al_reset_clipping_rectangle: procedure(); cdecl;
  al_reset_new_display_options: procedure(); cdecl;
  al_resize_display: function(display: PALLEGRO_DISPLAY; width: Integer; height: Integer): Boolean; cdecl;
  al_rest: procedure(seconds: Double); cdecl;
  al_restore_default_mixer: function(): Boolean; cdecl;
  al_restore_state: procedure(const state: PALLEGRO_STATE); cdecl;
  al_resume_timer: procedure(timer: PALLEGRO_TIMER); cdecl;
  al_rewind_audio_stream: function(stream: PALLEGRO_AUDIO_STREAM): Boolean; cdecl;
  al_rotate_transform: procedure(trans: PALLEGRO_TRANSFORM; theta: Single); cdecl;
  al_rotate_transform_3d: procedure(trans: PALLEGRO_TRANSFORM; x: Single; y: Single; z: Single; angle: Single); cdecl;
  al_rumble_haptic: function(p1: PALLEGRO_HAPTIC; p2: Double; p3: Double; p4: PALLEGRO_HAPTIC_EFFECT_ID): Boolean; cdecl;
  al_run_detached_thread: procedure(proc: al_run_detached_thread_proc; arg: Pointer); cdecl;
  al_save_bitmap: function(const filename: PUTF8Char; bitmap: PALLEGRO_BITMAP): Boolean; cdecl;
  al_save_bitmap_f: function(fp: PALLEGRO_FILE; const ident: PUTF8Char; bitmap: PALLEGRO_BITMAP): Boolean; cdecl;
  al_save_config_file: function(const filename: PUTF8Char; const config: PALLEGRO_CONFIG): Boolean; cdecl;
  al_save_config_file_f: function(_file: PALLEGRO_FILE; const config: PALLEGRO_CONFIG): Boolean; cdecl;
  al_save_sample: function(const filename: PUTF8Char; spl: PALLEGRO_SAMPLE): Boolean; cdecl;
  al_save_sample_f: function(fp: PALLEGRO_FILE; const ident: PUTF8Char; spl: PALLEGRO_SAMPLE): Boolean; cdecl;
  al_scale_transform: procedure(trans: PALLEGRO_TRANSFORM; sx: Single; sy: Single); cdecl;
  al_scale_transform_3d: procedure(trans: PALLEGRO_TRANSFORM; sx: Single; sy: Single; sz: Single); cdecl;
  al_seek_audio_stream_secs: function(stream: PALLEGRO_AUDIO_STREAM; time: Double): Boolean; cdecl;
  al_seek_video: function(video: PALLEGRO_VIDEO; pos_in_seconds: Double): Boolean; cdecl;
  al_set_app_name: procedure(const app_name: PUTF8Char); cdecl;
  al_set_audio_stream_channel_matrix: function(stream: PALLEGRO_AUDIO_STREAM; const matrix: PSingle): Boolean; cdecl;
  al_set_audio_stream_fragment: function(stream: PALLEGRO_AUDIO_STREAM; val: Pointer): Boolean; cdecl;
  al_set_audio_stream_gain: function(stream: PALLEGRO_AUDIO_STREAM; val: Single): Boolean; cdecl;
  al_set_audio_stream_loop_secs: function(stream: PALLEGRO_AUDIO_STREAM; start: Double; _end: Double): Boolean; cdecl;
  al_set_audio_stream_pan: function(stream: PALLEGRO_AUDIO_STREAM; val: Single): Boolean; cdecl;
  al_set_audio_stream_playing: function(stream: PALLEGRO_AUDIO_STREAM; val: Boolean): Boolean; cdecl;
  al_set_audio_stream_playmode: function(stream: PALLEGRO_AUDIO_STREAM; val: ALLEGRO_PLAYMODE): Boolean; cdecl;
  al_set_audio_stream_speed: function(stream: PALLEGRO_AUDIO_STREAM; val: Single): Boolean; cdecl;
  al_set_bitmap_blend_color: procedure(color: ALLEGRO_COLOR); cdecl;
  al_set_bitmap_blender: procedure(op: Integer; src: Integer; dst: Integer); cdecl;
  al_set_blend_color: procedure(color: ALLEGRO_COLOR); cdecl;
  al_set_blender: procedure(op: Integer; source: Integer; dest: Integer); cdecl;
  al_set_clipboard_text: function(display: PALLEGRO_DISPLAY; const text: PUTF8Char): Boolean; cdecl;
  al_set_clipping_rectangle: procedure(x: Integer; y: Integer; width: Integer; height: Integer); cdecl;
  al_set_config_value: procedure(config: PALLEGRO_CONFIG; const section: PUTF8Char; const key: PUTF8Char; const value: PUTF8Char); cdecl;
  al_set_default_mixer: function(mixer: PALLEGRO_MIXER): Boolean; cdecl;
  al_set_default_voice: procedure(voice: PALLEGRO_VOICE); cdecl;
  al_set_display_flag: function(display: PALLEGRO_DISPLAY; flag: Integer; onoff: Boolean): Boolean; cdecl;
  al_set_display_icon: procedure(display: PALLEGRO_DISPLAY; icon: PALLEGRO_BITMAP); cdecl;
  al_set_display_icons: procedure(display: PALLEGRO_DISPLAY; num_icons: Integer; icons: PPALLEGRO_BITMAP); cdecl;
  al_set_display_menu: function(display: PALLEGRO_DISPLAY; menu: PALLEGRO_MENU): Boolean; cdecl;
  al_set_display_option: procedure(display: PALLEGRO_DISPLAY; option: Integer; value: Integer); cdecl;
  al_set_errno: procedure(errnum: Integer); cdecl;
  al_set_event_source_data: procedure(p1: PALLEGRO_EVENT_SOURCE; data: IntPtr); cdecl;
  al_set_exe_name: procedure(const path: PUTF8Char); cdecl;
  al_set_fallback_font: procedure(font: PALLEGRO_FONT; fallback: PALLEGRO_FONT); cdecl;
  al_set_fs_interface: procedure(const vtable: PALLEGRO_FS_INTERFACE); cdecl;
  al_set_haptic_autocenter: function(p1: PALLEGRO_HAPTIC; p2: Double): Boolean; cdecl;
  al_set_haptic_gain: function(p1: PALLEGRO_HAPTIC; p2: Double): Boolean; cdecl;
  al_set_keyboard_leds: function(leds: Integer): Boolean; cdecl;
  al_set_memory_interface: procedure(iface: PALLEGRO_MEMORY_INTERFACE); cdecl;
  al_set_menu_item_caption: procedure(menu: PALLEGRO_MENU; pos: Integer; const caption: PUTF8Char); cdecl;
  al_set_menu_item_flags: procedure(menu: PALLEGRO_MENU; pos: Integer; flags: Integer); cdecl;
  al_set_menu_item_icon: procedure(menu: PALLEGRO_MENU; pos: Integer; icon: PALLEGRO_BITMAP); cdecl;
  al_set_mixer_frequency: function(mixer: PALLEGRO_MIXER; val: Cardinal): Boolean; cdecl;
  al_set_mixer_gain: function(mixer: PALLEGRO_MIXER; gain: Single): Boolean; cdecl;
  al_set_mixer_playing: function(mixer: PALLEGRO_MIXER; val: Boolean): Boolean; cdecl;
  al_set_mixer_postprocess_callback: function(mixer: PALLEGRO_MIXER; cb: al_set_mixer_postprocess_callback_cb; data: Pointer): Boolean; cdecl;
  al_set_mixer_quality: function(mixer: PALLEGRO_MIXER; val: ALLEGRO_MIXER_QUALITY): Boolean; cdecl;
  al_set_mouse_axis: function(axis: Integer; value: Integer): Boolean; cdecl;
  al_set_mouse_cursor: function(display: PALLEGRO_DISPLAY; cursor: PALLEGRO_MOUSE_CURSOR): Boolean; cdecl;
  al_set_mouse_emulation_mode: procedure(mode: Integer); cdecl;
  al_set_mouse_w: function(w: Integer): Boolean; cdecl;
  al_set_mouse_wheel_precision: procedure(precision: Integer); cdecl;
  al_set_mouse_xy: function(display: PALLEGRO_DISPLAY; x: Integer; y: Integer): Boolean; cdecl;
  al_set_mouse_z: function(z: Integer): Boolean; cdecl;
  al_set_new_bitmap_depth: procedure(depth: Integer); cdecl;
  al_set_new_bitmap_flags: procedure(flags: Integer); cdecl;
  al_set_new_bitmap_format: procedure(format: Integer); cdecl;
  al_set_new_bitmap_samples: procedure(samples: Integer); cdecl;
  al_set_new_display_adapter: procedure(adapter: Integer); cdecl;
  al_set_new_display_flags: procedure(flags: Integer); cdecl;
  al_set_new_display_option: procedure(option: Integer; value: Integer; importance: Integer); cdecl;
  al_set_new_display_refresh_rate: procedure(refresh_rate: Integer); cdecl;
  al_set_new_file_interface: procedure(const file_interface: PALLEGRO_FILE_INTERFACE); cdecl;
  al_set_new_window_position: procedure(x: Integer; y: Integer); cdecl;
  al_set_new_window_title: procedure(const title: PUTF8Char); cdecl;
  al_set_org_name: procedure(const org_name: PUTF8Char); cdecl;
  al_set_path_drive: procedure(path: PALLEGRO_PATH; const drive: PUTF8Char); cdecl;
  al_set_path_extension: function(path: PALLEGRO_PATH; const extension: PUTF8Char): Boolean; cdecl;
  al_set_path_filename: procedure(path: PALLEGRO_PATH; const filename: PUTF8Char); cdecl;
  al_set_physfs_file_interface: procedure(); cdecl;
  al_set_render_state: procedure(state: ALLEGRO_RENDER_STATE; value: Integer); cdecl;
  al_set_sample: function(spl: PALLEGRO_SAMPLE_INSTANCE; data: PALLEGRO_SAMPLE): Boolean; cdecl;
  al_set_sample_instance_channel_matrix: function(spl: PALLEGRO_SAMPLE_INSTANCE; const matrix: PSingle): Boolean; cdecl;
  al_set_sample_instance_gain: function(spl: PALLEGRO_SAMPLE_INSTANCE; val: Single): Boolean; cdecl;
  al_set_sample_instance_length: function(spl: PALLEGRO_SAMPLE_INSTANCE; val: Cardinal): Boolean; cdecl;
  al_set_sample_instance_pan: function(spl: PALLEGRO_SAMPLE_INSTANCE; val: Single): Boolean; cdecl;
  al_set_sample_instance_playing: function(spl: PALLEGRO_SAMPLE_INSTANCE; val: Boolean): Boolean; cdecl;
  al_set_sample_instance_playmode: function(spl: PALLEGRO_SAMPLE_INSTANCE; val: ALLEGRO_PLAYMODE): Boolean; cdecl;
  al_set_sample_instance_position: function(spl: PALLEGRO_SAMPLE_INSTANCE; val: Cardinal): Boolean; cdecl;
  al_set_sample_instance_speed: function(spl: PALLEGRO_SAMPLE_INSTANCE; val: Single): Boolean; cdecl;
  al_set_separate_bitmap_blender: procedure(op: Integer; src: Integer; dst: Integer; alpha_op: Integer; alpha_src: Integer; alpha_dst: Integer); cdecl;
  al_set_separate_blender: procedure(op: Integer; source: Integer; dest: Integer; alpha_op: Integer; alpha_source: Integer; alpha_dest: Integer); cdecl;
  al_set_shader_bool: function(const name: PUTF8Char; b: Boolean): Boolean; cdecl;
  al_set_shader_float: function(const name: PUTF8Char; f: Single): Boolean; cdecl;
  al_set_shader_float_vector: function(const name: PUTF8Char; num_components: Integer; const f: PSingle; num_elems: Integer): Boolean; cdecl;
  al_set_shader_int: function(const name: PUTF8Char; i: Integer): Boolean; cdecl;
  al_set_shader_int_vector: function(const name: PUTF8Char; num_components: Integer; const i: PInteger; num_elems: Integer): Boolean; cdecl;
  al_set_shader_matrix: function(const name: PUTF8Char; const matrix: PALLEGRO_TRANSFORM): Boolean; cdecl;
  al_set_shader_sampler: function(const name: PUTF8Char; bitmap: PALLEGRO_BITMAP; _unit: Integer): Boolean; cdecl;
  al_set_standard_file_interface: procedure(); cdecl;
  al_set_standard_fs_interface: procedure(); cdecl;
  al_set_system_mouse_cursor: function(display: PALLEGRO_DISPLAY; cursor_id: ALLEGRO_SYSTEM_MOUSE_CURSOR): Boolean; cdecl;
  al_set_target_backbuffer: procedure(display: PALLEGRO_DISPLAY); cdecl;
  al_set_target_bitmap: procedure(bitmap: PALLEGRO_BITMAP); cdecl;
  al_set_thread_should_stop: procedure(outer: PALLEGRO_THREAD); cdecl;
  al_set_timer_count: procedure(timer: PALLEGRO_TIMER; count: Int64); cdecl;
  al_set_timer_speed: procedure(timer: PALLEGRO_TIMER; speed_secs: Double); cdecl;
  al_set_video_playing: procedure(video: PALLEGRO_VIDEO; playing: Boolean); cdecl;
  al_set_voice_playing: function(voice: PALLEGRO_VOICE; val: Boolean): Boolean; cdecl;
  al_set_voice_position: function(voice: PALLEGRO_VOICE; val: Cardinal): Boolean; cdecl;
  al_set_window_constraints: function(display: PALLEGRO_DISPLAY; min_w: Integer; min_h: Integer; max_w: Integer; max_h: Integer): Boolean; cdecl;
  al_set_window_position: procedure(display: PALLEGRO_DISPLAY; x: Integer; y: Integer); cdecl;
  al_set_window_title: procedure(display: PALLEGRO_DISPLAY; const title: PUTF8Char); cdecl;
  al_show_mouse_cursor: function(display: PALLEGRO_DISPLAY): Boolean; cdecl;
  al_show_native_file_dialog: function(display: PALLEGRO_DISPLAY; dialog: PALLEGRO_FILECHOOSER): Boolean; cdecl;
  al_show_native_message_box: function(display: PALLEGRO_DISPLAY; const title: PUTF8Char; const heading: PUTF8Char; const text: PUTF8Char; const buttons: PUTF8Char; flags: Integer): Integer; cdecl;
  al_shutdown_font_addon: procedure(); cdecl;
  al_shutdown_image_addon: procedure(); cdecl;
  al_shutdown_native_dialog_addon: procedure(); cdecl;
  al_shutdown_primitives_addon: procedure(); cdecl;
  al_shutdown_ttf_addon: procedure(); cdecl;
  al_shutdown_video_addon: procedure(); cdecl;
  al_signal_cond: procedure(cond: PALLEGRO_COND); cdecl;
  al_start_audio_recorder: function(r: PALLEGRO_AUDIO_RECORDER): Boolean; cdecl;
  al_start_thread: procedure(outer: PALLEGRO_THREAD); cdecl;
  al_start_timer: procedure(timer: PALLEGRO_TIMER); cdecl;
  al_start_video: procedure(video: PALLEGRO_VIDEO; mixer: PALLEGRO_MIXER); cdecl;
  al_start_video_with_voice: procedure(video: PALLEGRO_VIDEO; voice: PALLEGRO_VOICE); cdecl;
  al_stop_audio_recorder: procedure(r: PALLEGRO_AUDIO_RECORDER); cdecl;
  al_stop_haptic_effect: function(p1: PALLEGRO_HAPTIC_EFFECT_ID): Boolean; cdecl;
  al_stop_sample: procedure(spl_id: PALLEGRO_SAMPLE_ID); cdecl;
  al_stop_sample_instance: function(spl: PALLEGRO_SAMPLE_INSTANCE): Boolean; cdecl;
  al_stop_samples: procedure(); cdecl;
  al_stop_timer: procedure(timer: PALLEGRO_TIMER); cdecl;
  al_store_state: procedure(state: PALLEGRO_STATE; flags: Integer); cdecl;
  al_toggle_menu_item_flags: function(menu: PALLEGRO_MENU; pos: Integer; flags: Integer): Integer; cdecl;
  al_transform_coordinates: procedure(const trans: PALLEGRO_TRANSFORM; x: PSingle; y: PSingle); cdecl;
  al_transform_coordinates_3d: procedure(const trans: PALLEGRO_TRANSFORM; x: PSingle; y: PSingle; z: PSingle); cdecl;
  al_transform_coordinates_3d_projective: procedure(const trans: PALLEGRO_TRANSFORM; x: PSingle; y: PSingle; z: PSingle); cdecl;
  al_transform_coordinates_4d: procedure(const trans: PALLEGRO_TRANSFORM; x: PSingle; y: PSingle; z: PSingle; w: PSingle); cdecl;
  al_translate_transform: procedure(trans: PALLEGRO_TRANSFORM; x: Single; y: Single); cdecl;
  al_translate_transform_3d: procedure(trans: PALLEGRO_TRANSFORM; x: Single; y: Single; z: Single); cdecl;
  al_transpose_transform: procedure(trans: PALLEGRO_TRANSFORM); cdecl;
  al_triangulate_polygon: function(const vertices: PSingle; vertex_stride: NativeUInt; const vertex_counts: PInteger; emit_triangle: al_triangulate_polygon_emit_triangle; userdata: Pointer): Boolean; cdecl;
  al_ungrab_mouse: function(): Boolean; cdecl;
  al_uninstall_audio: procedure(); cdecl;
  al_uninstall_haptic: procedure(); cdecl;
  al_uninstall_joystick: procedure(); cdecl;
  al_uninstall_keyboard: procedure(); cdecl;
  al_uninstall_mouse: procedure(); cdecl;
  al_uninstall_system: procedure(); cdecl;
  al_uninstall_touch_input: procedure(); cdecl;
  al_unlock_bitmap: procedure(bitmap: PALLEGRO_BITMAP); cdecl;
  al_unlock_index_buffer: procedure(buffer: PALLEGRO_INDEX_BUFFER); cdecl;
  al_unlock_mutex: procedure(mutex: PALLEGRO_MUTEX); cdecl;
  al_unlock_sample_id: procedure(spl_id: PALLEGRO_SAMPLE_ID); cdecl;
  al_unlock_vertex_buffer: procedure(buffer: PALLEGRO_VERTEX_BUFFER); cdecl;
  al_unmap_rgb: procedure(color: ALLEGRO_COLOR; r: PByte; g: PByte; b: PByte); cdecl;
  al_unmap_rgb_f: procedure(color: ALLEGRO_COLOR; r: PSingle; g: PSingle; b: PSingle); cdecl;
  al_unmap_rgba: procedure(color: ALLEGRO_COLOR; r: PByte; g: PByte; b: PByte; a: PByte); cdecl;
  al_unmap_rgba_f: procedure(color: ALLEGRO_COLOR; r: PSingle; g: PSingle; b: PSingle; a: PSingle); cdecl;
  al_unref_user_event: procedure(p1: PALLEGRO_USER_EVENT); cdecl;
  al_unregister_event_source: procedure(p1: PALLEGRO_EVENT_QUEUE; p2: PALLEGRO_EVENT_SOURCE); cdecl;
  al_update_display_region: procedure(x: Integer; y: Integer; width: Integer; height: Integer); cdecl;
  al_update_fs_entry: function(e: PALLEGRO_FS_ENTRY): Boolean; cdecl;
  al_upload_and_play_haptic_effect: function(p1: PALLEGRO_HAPTIC; p2: PALLEGRO_HAPTIC_EFFECT; p3: PALLEGRO_HAPTIC_EFFECT_ID; p4: Integer): Boolean; cdecl;
  al_upload_haptic_effect: function(p1: PALLEGRO_HAPTIC; p2: PALLEGRO_HAPTIC_EFFECT; p3: PALLEGRO_HAPTIC_EFFECT_ID): Boolean; cdecl;
  al_use_projection_transform: procedure(const trans: PALLEGRO_TRANSFORM); cdecl;
  al_use_shader: function(shader: PALLEGRO_SHADER): Boolean; cdecl;
  al_use_transform: procedure(const trans: PALLEGRO_TRANSFORM); cdecl;
  al_ustr_append: function(us1: PALLEGRO_USTR; const us2: PALLEGRO_USTR): Boolean; cdecl;
  al_ustr_append_chr: function(us: PALLEGRO_USTR; c: Int32): NativeUInt; cdecl;
  al_ustr_append_cstr: function(us: PALLEGRO_USTR; const s: PUTF8Char): Boolean; cdecl;
  al_ustr_appendf: function(us: PALLEGRO_USTR; const fmt: PUTF8Char): Boolean varargs; cdecl;
  al_ustr_assign: function(us1: PALLEGRO_USTR; const us2: PALLEGRO_USTR): Boolean; cdecl;
  al_ustr_assign_cstr: function(us1: PALLEGRO_USTR; const s: PUTF8Char): Boolean; cdecl;
  al_ustr_assign_substr: function(us1: PALLEGRO_USTR; const us2: PALLEGRO_USTR; start_pos: Integer; end_pos: Integer): Boolean; cdecl;
  al_ustr_compare: function(const u: PALLEGRO_USTR; const v: PALLEGRO_USTR): Integer; cdecl;
  al_ustr_dup: function(const us: PALLEGRO_USTR): PALLEGRO_USTR; cdecl;
  al_ustr_dup_substr: function(const us: PALLEGRO_USTR; start_pos: Integer; end_pos: Integer): PALLEGRO_USTR; cdecl;
  al_ustr_empty_string: function(): PALLEGRO_USTR; cdecl;
  al_ustr_encode_utf16: function(const us: PALLEGRO_USTR; s: PUInt16; n: NativeUInt): NativeUInt; cdecl;
  al_ustr_equal: function(const us1: PALLEGRO_USTR; const us2: PALLEGRO_USTR): Boolean; cdecl;
  al_ustr_find_chr: function(const us: PALLEGRO_USTR; start_pos: Integer; c: Int32): Integer; cdecl;
  al_ustr_find_cset: function(const us: PALLEGRO_USTR; start_pos: Integer; const reject: PALLEGRO_USTR): Integer; cdecl;
  al_ustr_find_cset_cstr: function(const us: PALLEGRO_USTR; start_pos: Integer; const reject: PUTF8Char): Integer; cdecl;
  al_ustr_find_cstr: function(const haystack: PALLEGRO_USTR; start_pos: Integer; const needle: PUTF8Char): Integer; cdecl;
  al_ustr_find_replace: function(us: PALLEGRO_USTR; start_pos: Integer; const find: PALLEGRO_USTR; const replace: PALLEGRO_USTR): Boolean; cdecl;
  al_ustr_find_replace_cstr: function(us: PALLEGRO_USTR; start_pos: Integer; const find: PUTF8Char; const replace: PUTF8Char): Boolean; cdecl;
  al_ustr_find_set: function(const us: PALLEGRO_USTR; start_pos: Integer; const accept: PALLEGRO_USTR): Integer; cdecl;
  al_ustr_find_set_cstr: function(const us: PALLEGRO_USTR; start_pos: Integer; const accept: PUTF8Char): Integer; cdecl;
  al_ustr_find_str: function(const haystack: PALLEGRO_USTR; start_pos: Integer; const needle: PALLEGRO_USTR): Integer; cdecl;
  al_ustr_free: procedure(us: PALLEGRO_USTR); cdecl;
  al_ustr_get: function(const us: PALLEGRO_USTR; pos: Integer): Int32; cdecl;
  al_ustr_get_next: function(const us: PALLEGRO_USTR; pos: PInteger): Int32; cdecl;
  al_ustr_has_prefix: function(const u: PALLEGRO_USTR; const v: PALLEGRO_USTR): Boolean; cdecl;
  al_ustr_has_prefix_cstr: function(const u: PALLEGRO_USTR; const s: PUTF8Char): Boolean; cdecl;
  al_ustr_has_suffix: function(const u: PALLEGRO_USTR; const v: PALLEGRO_USTR): Boolean; cdecl;
  al_ustr_has_suffix_cstr: function(const us1: PALLEGRO_USTR; const s: PUTF8Char): Boolean; cdecl;
  al_ustr_insert: function(us1: PALLEGRO_USTR; pos: Integer; const us2: PALLEGRO_USTR): Boolean; cdecl;
  al_ustr_insert_chr: function(us: PALLEGRO_USTR; pos: Integer; c: Int32): NativeUInt; cdecl;
  al_ustr_insert_cstr: function(us: PALLEGRO_USTR; pos: Integer; const us2: PUTF8Char): Boolean; cdecl;
  al_ustr_length: function(const us: PALLEGRO_USTR): NativeUInt; cdecl;
  al_ustr_ltrim_ws: function(us: PALLEGRO_USTR): Boolean; cdecl;
  al_ustr_ncompare: function(const us1: PALLEGRO_USTR; const us2: PALLEGRO_USTR; n: Integer): Integer; cdecl;
  al_ustr_new: function(const s: PUTF8Char): PALLEGRO_USTR; cdecl;
  al_ustr_new_from_buffer: function(const s: PUTF8Char; size: NativeUInt): PALLEGRO_USTR; cdecl;
  al_ustr_new_from_utf16: function(const s: PUInt16): PALLEGRO_USTR; cdecl;
  al_ustr_newf: function(const fmt: PUTF8Char): PALLEGRO_USTR varargs; cdecl;
  al_ustr_next: function(const us: PALLEGRO_USTR; pos: PInteger): Boolean; cdecl;
  al_ustr_offset: function(const us: PALLEGRO_USTR; index: Integer): Integer; cdecl;
  al_ustr_prev: function(const us: PALLEGRO_USTR; pos: PInteger): Boolean; cdecl;
  al_ustr_prev_get: function(const us: PALLEGRO_USTR; pos: PInteger): Int32; cdecl;
  al_ustr_remove_chr: function(us: PALLEGRO_USTR; pos: Integer): Boolean; cdecl;
  al_ustr_remove_range: function(us: PALLEGRO_USTR; start_pos: Integer; end_pos: Integer): Boolean; cdecl;
  al_ustr_replace_range: function(us1: PALLEGRO_USTR; start_pos1: Integer; end_pos1: Integer; const us2: PALLEGRO_USTR): Boolean; cdecl;
  al_ustr_rfind_chr: function(const us: PALLEGRO_USTR; start_pos: Integer; c: Int32): Integer; cdecl;
  al_ustr_rfind_cstr: function(const haystack: PALLEGRO_USTR; start_pos: Integer; const needle: PUTF8Char): Integer; cdecl;
  al_ustr_rfind_str: function(const haystack: PALLEGRO_USTR; start_pos: Integer; const needle: PALLEGRO_USTR): Integer; cdecl;
  al_ustr_rtrim_ws: function(us: PALLEGRO_USTR): Boolean; cdecl;
  al_ustr_set_chr: function(us: PALLEGRO_USTR; pos: Integer; c: Int32): NativeUInt; cdecl;
  al_ustr_size: function(const us: PALLEGRO_USTR): NativeUInt; cdecl;
  al_ustr_size_utf16: function(const us: PALLEGRO_USTR): NativeUInt; cdecl;
  al_ustr_to_buffer: procedure(const us: PALLEGRO_USTR; buffer: PUTF8Char; size: Integer); cdecl;
  al_ustr_trim_ws: function(us: PALLEGRO_USTR): Boolean; cdecl;
  al_ustr_truncate: function(us: PALLEGRO_USTR; start_pos: Integer): Boolean; cdecl;
  al_ustr_vappendf: function(us: PALLEGRO_USTR; const fmt: PUTF8Char; ap: Pointer): Boolean; cdecl;
  al_utf16_encode: function(s: PUInt16; c: Int32): NativeUInt; cdecl;
  al_utf16_width: function(c: Integer): NativeUInt; cdecl;
  al_utf8_encode: function(s: PUTF8Char; c: Int32): NativeUInt; cdecl;
  al_utf8_width: function(c: Int32): NativeUInt; cdecl;
  al_vertical_shear_transform: procedure(trans: PALLEGRO_TRANSFORM; theta: Single); cdecl;
  al_vfprintf: function(f: PALLEGRO_FILE; const format: PUTF8Char; args: Pointer): Integer; cdecl;
  al_wait_cond: procedure(cond: PALLEGRO_COND; mutex: PALLEGRO_MUTEX); cdecl;
  al_wait_cond_until: function(cond: PALLEGRO_COND; mutex: PALLEGRO_MUTEX; const timeout: PALLEGRO_TIMEOUT): Integer; cdecl;
  al_wait_for_event: procedure(p1: PALLEGRO_EVENT_QUEUE; ret_event: PALLEGRO_EVENT); cdecl;
  al_wait_for_event_timed: function(p1: PALLEGRO_EVENT_QUEUE; ret_event: PALLEGRO_EVENT; secs: Single): Boolean; cdecl;
  al_wait_for_event_until: function(queue: PALLEGRO_EVENT_QUEUE; ret_event: PALLEGRO_EVENT; timeout: PALLEGRO_TIMEOUT): Boolean; cdecl;
  al_wait_for_vsync: function(): Boolean; cdecl;
  al_win_add_window_callback: function(display: PALLEGRO_DISPLAY; callback: al_win_add_window_callback_callback; userdata: Pointer): Boolean; cdecl;
  al_win_remove_window_callback: function(display: PALLEGRO_DISPLAY; callback: al_win_remove_window_callback_callback; userdata: Pointer): Boolean; cdecl;
  nk__begin: function(p1: Pnk_context): Pnk_command; cdecl;
  nk__next: function(p1: Pnk_context; const p2: Pnk_command): Pnk_command; cdecl;
  nk_begin: function(ctx: Pnk_context; const title: PUTF8Char; bounds: nk_rect; flags: nk_flags): nk_bool; cdecl;
  nk_begin_titled: function(ctx: Pnk_context; const name: PUTF8Char; const title: PUTF8Char; bounds: nk_rect; flags: nk_flags): nk_bool; cdecl;
  nk_buffer_clear: procedure(p1: Pnk_buffer); cdecl;
  nk_buffer_free: procedure(p1: Pnk_buffer); cdecl;
  nk_buffer_info: procedure(p1: Pnk_memory_status; p2: Pnk_buffer); cdecl;
  nk_buffer_init: procedure(p1: Pnk_buffer; const p2: Pnk_allocator; size: nk_size); cdecl;
  nk_buffer_init_default: procedure(p1: Pnk_buffer); cdecl;
  nk_buffer_init_fixed: procedure(p1: Pnk_buffer; memory: Pointer; size: nk_size); cdecl;
  nk_buffer_mark: procedure(p1: Pnk_buffer; _type: nk_buffer_allocation_type); cdecl;
  nk_buffer_memory: function(p1: Pnk_buffer): Pointer; cdecl;
  nk_buffer_memory_const: function(const p1: Pnk_buffer): Pointer; cdecl;
  nk_buffer_push: procedure(p1: Pnk_buffer; _type: nk_buffer_allocation_type; const memory: Pointer; size: nk_size; align: nk_size); cdecl;
  nk_buffer_reset: procedure(p1: Pnk_buffer; _type: nk_buffer_allocation_type); cdecl;
  nk_buffer_total: function(p1: Pnk_buffer): nk_size; cdecl;
  nk_button_color: function(p1: Pnk_context; p2: nk_color): nk_bool; cdecl;
  nk_button_image: function(p1: Pnk_context; img: nk_image): nk_bool; cdecl;
  nk_button_image_label: function(p1: Pnk_context; img: nk_image; const p3: PUTF8Char; text_alignment: nk_flags): nk_bool; cdecl;
  nk_button_image_label_styled: function(p1: Pnk_context; const p2: Pnk_style_button; img: nk_image; const p4: PUTF8Char; text_alignment: nk_flags): nk_bool; cdecl;
  nk_button_image_styled: function(p1: Pnk_context; const p2: Pnk_style_button; img: nk_image): nk_bool; cdecl;
  nk_button_image_text: function(p1: Pnk_context; img: nk_image; const p3: PUTF8Char; p4: Integer; alignment: nk_flags): nk_bool; cdecl;
  nk_button_image_text_styled: function(p1: Pnk_context; const p2: Pnk_style_button; img: nk_image; const p4: PUTF8Char; p5: Integer; alignment: nk_flags): nk_bool; cdecl;
  nk_button_label: function(p1: Pnk_context; const title: PUTF8Char): nk_bool; cdecl;
  nk_button_label_styled: function(p1: Pnk_context; const p2: Pnk_style_button; const title: PUTF8Char): nk_bool; cdecl;
  nk_button_pop_behavior: function(p1: Pnk_context): nk_bool; cdecl;
  nk_button_push_behavior: function(p1: Pnk_context; p2: nk_button_behavior): nk_bool; cdecl;
  nk_button_set_behavior: procedure(p1: Pnk_context; p2: nk_button_behavior); cdecl;
  nk_button_symbol: function(p1: Pnk_context; p2: nk_symbol_type): nk_bool; cdecl;
  nk_button_symbol_label: function(p1: Pnk_context; p2: nk_symbol_type; const p3: PUTF8Char; text_alignment: nk_flags): nk_bool; cdecl;
  nk_button_symbol_label_styled: function(ctx: Pnk_context; const style: Pnk_style_button; symbol: nk_symbol_type; const title: PUTF8Char; align: nk_flags): nk_bool; cdecl;
  nk_button_symbol_styled: function(p1: Pnk_context; const p2: Pnk_style_button; p3: nk_symbol_type): nk_bool; cdecl;
  nk_button_symbol_text: function(p1: Pnk_context; p2: nk_symbol_type; const p3: PUTF8Char; p4: Integer; alignment: nk_flags): nk_bool; cdecl;
  nk_button_symbol_text_styled: function(p1: Pnk_context; const p2: Pnk_style_button; p3: nk_symbol_type; const p4: PUTF8Char; p5: Integer; alignment: nk_flags): nk_bool; cdecl;
  nk_button_text: function(p1: Pnk_context; const title: PUTF8Char; len: Integer): nk_bool; cdecl;
  nk_button_text_styled: function(p1: Pnk_context; const p2: Pnk_style_button; const title: PUTF8Char; len: Integer): nk_bool; cdecl;
  nk_chart_add_slot: procedure(ctx: Pnk_context; const p2: nk_chart_type; count: Integer; min_value: Single; max_value: Single); cdecl;
  nk_chart_add_slot_colored: procedure(ctx: Pnk_context; const p2: nk_chart_type; p3: nk_color; active: nk_color; count: Integer; min_value: Single; max_value: Single); cdecl;
  nk_chart_begin: function(p1: Pnk_context; p2: nk_chart_type; num: Integer; min: Single; max: Single): nk_bool; cdecl;
  nk_chart_begin_colored: function(p1: Pnk_context; p2: nk_chart_type; p3: nk_color; active: nk_color; num: Integer; min: Single; max: Single): nk_bool; cdecl;
  nk_chart_end: procedure(p1: Pnk_context); cdecl;
  nk_chart_push: function(p1: Pnk_context; p2: Single): nk_flags; cdecl;
  nk_chart_push_slot: function(p1: Pnk_context; p2: Single; p3: Integer): nk_flags; cdecl;
  nk_check_flags_label: function(p1: Pnk_context; const p2: PUTF8Char; flags: Cardinal; value: Cardinal): Cardinal; cdecl;
  nk_check_flags_text: function(p1: Pnk_context; const p2: PUTF8Char; p3: Integer; flags: Cardinal; value: Cardinal): Cardinal; cdecl;
  nk_check_label: function(p1: Pnk_context; const p2: PUTF8Char; active: nk_bool): nk_bool; cdecl;
  nk_check_text: function(p1: Pnk_context; const p2: PUTF8Char; p3: Integer; active: nk_bool): nk_bool; cdecl;
  nk_checkbox_flags_label: function(p1: Pnk_context; const p2: PUTF8Char; flags: PCardinal; value: Cardinal): nk_bool; cdecl;
  nk_checkbox_flags_text: function(p1: Pnk_context; const p2: PUTF8Char; p3: Integer; flags: PCardinal; value: Cardinal): nk_bool; cdecl;
  nk_checkbox_label: function(p1: Pnk_context; const p2: PUTF8Char; active: Pnk_bool): nk_bool; cdecl;
  nk_checkbox_text: function(p1: Pnk_context; const p2: PUTF8Char; p3: Integer; active: Pnk_bool): nk_bool; cdecl;
  nk_clear: procedure(p1: Pnk_context); cdecl;
  nk_color_cf: function(p1: nk_color): nk_colorf; cdecl;
  nk_color_d: procedure(r: PDouble; g: PDouble; b: PDouble; a: PDouble; p5: nk_color); cdecl;
  nk_color_dv: procedure(rgba_out: PDouble; p2: nk_color); cdecl;
  nk_color_f: procedure(r: PSingle; g: PSingle; b: PSingle; a: PSingle; p5: nk_color); cdecl;
  nk_color_fv: procedure(rgba_out: PSingle; p2: nk_color); cdecl;
  nk_color_hex_rgb: procedure(output: PUTF8Char; p2: nk_color); cdecl;
  nk_color_hex_rgba: procedure(output: PUTF8Char; p2: nk_color); cdecl;
  nk_color_hsv_b: procedure(out_h: Pnk_byte; out_s: Pnk_byte; out_v: Pnk_byte; p4: nk_color); cdecl;
  nk_color_hsv_bv: procedure(hsv_out: Pnk_byte; p2: nk_color); cdecl;
  nk_color_hsv_f: procedure(out_h: PSingle; out_s: PSingle; out_v: PSingle; p4: nk_color); cdecl;
  nk_color_hsv_fv: procedure(hsv_out: PSingle; p2: nk_color); cdecl;
  nk_color_hsv_i: procedure(out_h: PInteger; out_s: PInteger; out_v: PInteger; p4: nk_color); cdecl;
  nk_color_hsv_iv: procedure(hsv_out: PInteger; p2: nk_color); cdecl;
  nk_color_hsva_b: procedure(h: Pnk_byte; s: Pnk_byte; v: Pnk_byte; a: Pnk_byte; p5: nk_color); cdecl;
  nk_color_hsva_bv: procedure(hsva_out: Pnk_byte; p2: nk_color); cdecl;
  nk_color_hsva_f: procedure(out_h: PSingle; out_s: PSingle; out_v: PSingle; out_a: PSingle; p5: nk_color); cdecl;
  nk_color_hsva_fv: procedure(hsva_out: PSingle; p2: nk_color); cdecl;
  nk_color_hsva_i: procedure(h: PInteger; s: PInteger; v: PInteger; a: PInteger; p5: nk_color); cdecl;
  nk_color_hsva_iv: procedure(hsva_out: PInteger; p2: nk_color); cdecl;
  nk_color_pick: function(p1: Pnk_context; p2: Pnk_colorf; p3: nk_color_format): nk_bool; cdecl;
  nk_color_picker: function(p1: Pnk_context; p2: nk_colorf; p3: nk_color_format): nk_colorf; cdecl;
  nk_color_u32: function(p1: nk_color): nk_uint; cdecl;
  nk_colorf_hsva_f: procedure(out_h: PSingle; out_s: PSingle; out_v: PSingle; out_a: PSingle; _in: nk_colorf); cdecl;
  nk_colorf_hsva_fv: procedure(hsva: PSingle; _in: nk_colorf); cdecl;
  nk_combo: function(p1: Pnk_context; items: PPUTF8Char; count: Integer; selected: Integer; item_height: Integer; size: nk_vec2): Integer; cdecl;
  nk_combo_begin_color: function(p1: Pnk_context; color: nk_color; size: nk_vec2): nk_bool; cdecl;
  nk_combo_begin_image: function(p1: Pnk_context; img: nk_image; size: nk_vec2): nk_bool; cdecl;
  nk_combo_begin_image_label: function(p1: Pnk_context; const selected: PUTF8Char; p3: nk_image; size: nk_vec2): nk_bool; cdecl;
  nk_combo_begin_image_text: function(p1: Pnk_context; const selected: PUTF8Char; p3: Integer; p4: nk_image; size: nk_vec2): nk_bool; cdecl;
  nk_combo_begin_label: function(p1: Pnk_context; const selected: PUTF8Char; size: nk_vec2): nk_bool; cdecl;
  nk_combo_begin_symbol: function(p1: Pnk_context; p2: nk_symbol_type; size: nk_vec2): nk_bool; cdecl;
  nk_combo_begin_symbol_label: function(p1: Pnk_context; const selected: PUTF8Char; p3: nk_symbol_type; size: nk_vec2): nk_bool; cdecl;
  nk_combo_begin_symbol_text: function(p1: Pnk_context; const selected: PUTF8Char; p3: Integer; p4: nk_symbol_type; size: nk_vec2): nk_bool; cdecl;
  nk_combo_begin_text: function(p1: Pnk_context; const selected: PUTF8Char; p3: Integer; size: nk_vec2): nk_bool; cdecl;
  nk_combo_callback: function(p1: Pnk_context; item_getter: nk_combo_callback_item_getter; userdata: Pointer; selected: Integer; count: Integer; item_height: Integer; size: nk_vec2): Integer; cdecl;
  nk_combo_close: procedure(p1: Pnk_context); cdecl;
  nk_combo_end: procedure(p1: Pnk_context); cdecl;
  nk_combo_item_image_label: function(p1: Pnk_context; p2: nk_image; const p3: PUTF8Char; alignment: nk_flags): nk_bool; cdecl;
  nk_combo_item_image_text: function(p1: Pnk_context; p2: nk_image; const p3: PUTF8Char; p4: Integer; alignment: nk_flags): nk_bool; cdecl;
  nk_combo_item_label: function(p1: Pnk_context; const p2: PUTF8Char; alignment: nk_flags): nk_bool; cdecl;
  nk_combo_item_symbol_label: function(p1: Pnk_context; p2: nk_symbol_type; const p3: PUTF8Char; alignment: nk_flags): nk_bool; cdecl;
  nk_combo_item_symbol_text: function(p1: Pnk_context; p2: nk_symbol_type; const p3: PUTF8Char; p4: Integer; alignment: nk_flags): nk_bool; cdecl;
  nk_combo_item_text: function(p1: Pnk_context; const p2: PUTF8Char; p3: Integer; alignment: nk_flags): nk_bool; cdecl;
  nk_combo_separator: function(p1: Pnk_context; const items_separated_by_separator: PUTF8Char; separator: Integer; selected: Integer; count: Integer; item_height: Integer; size: nk_vec2): Integer; cdecl;
  nk_combo_string: function(p1: Pnk_context; const items_separated_by_zeros: PUTF8Char; selected: Integer; count: Integer; item_height: Integer; size: nk_vec2): Integer; cdecl;
  nk_combobox: procedure(p1: Pnk_context; items: PPUTF8Char; count: Integer; selected: PInteger; item_height: Integer; size: nk_vec2); cdecl;
  nk_combobox_callback: procedure(p1: Pnk_context; item_getter: nk_combobox_callback_item_getter; p3: Pointer; selected: PInteger; count: Integer; item_height: Integer; size: nk_vec2); cdecl;
  nk_combobox_separator: procedure(p1: Pnk_context; const items_separated_by_separator: PUTF8Char; separator: Integer; selected: PInteger; count: Integer; item_height: Integer; size: nk_vec2); cdecl;
  nk_combobox_string: procedure(p1: Pnk_context; const items_separated_by_zeros: PUTF8Char; selected: PInteger; count: Integer; item_height: Integer; size: nk_vec2); cdecl;
  nk_contextual_begin: function(p1: Pnk_context; p2: nk_flags; p3: nk_vec2; trigger_bounds: nk_rect): nk_bool; cdecl;
  nk_contextual_close: procedure(p1: Pnk_context); cdecl;
  nk_contextual_end: procedure(p1: Pnk_context); cdecl;
  nk_contextual_item_image_label: function(p1: Pnk_context; p2: nk_image; const p3: PUTF8Char; alignment: nk_flags): nk_bool; cdecl;
  nk_contextual_item_image_text: function(p1: Pnk_context; p2: nk_image; const p3: PUTF8Char; len: Integer; alignment: nk_flags): nk_bool; cdecl;
  nk_contextual_item_label: function(p1: Pnk_context; const p2: PUTF8Char; align: nk_flags): nk_bool; cdecl;
  nk_contextual_item_symbol_label: function(p1: Pnk_context; p2: nk_symbol_type; const p3: PUTF8Char; alignment: nk_flags): nk_bool; cdecl;
  nk_contextual_item_symbol_text: function(p1: Pnk_context; p2: nk_symbol_type; const p3: PUTF8Char; p4: Integer; alignment: nk_flags): nk_bool; cdecl;
  nk_contextual_item_text: function(p1: Pnk_context; const p2: PUTF8Char; p3: Integer; align: nk_flags): nk_bool; cdecl;
  nk_draw_image: procedure(p1: Pnk_command_buffer; p2: nk_rect; const p3: Pnk_image; p4: nk_color); cdecl;
  nk_draw_nine_slice: procedure(p1: Pnk_command_buffer; p2: nk_rect; const p3: Pnk_nine_slice; p4: nk_color); cdecl;
  nk_draw_text: procedure(p1: Pnk_command_buffer; p2: nk_rect; const text: PUTF8Char; len: Integer; const p5: Pnk_user_font; p6: nk_color; p7: nk_color); cdecl;
  nk_edit_buffer: function(p1: Pnk_context; p2: nk_flags; p3: Pnk_text_edit; p4: nk_plugin_filter): nk_flags; cdecl;
  nk_edit_focus: procedure(p1: Pnk_context; flags: nk_flags); cdecl;
  nk_edit_string: function(p1: Pnk_context; p2: nk_flags; buffer: PUTF8Char; len: PInteger; max: Integer; p6: nk_plugin_filter): nk_flags; cdecl;
  nk_edit_string_zero_terminated: function(p1: Pnk_context; p2: nk_flags; buffer: PUTF8Char; max: Integer; p5: nk_plugin_filter): nk_flags; cdecl;
  nk_edit_unfocus: procedure(p1: Pnk_context); cdecl;
  nk_end: procedure(ctx: Pnk_context); cdecl;
  nk_fill_arc: procedure(p1: Pnk_command_buffer; cx: Single; cy: Single; radius: Single; a_min: Single; a_max: Single; p7: nk_color); cdecl;
  nk_fill_circle: procedure(p1: Pnk_command_buffer; p2: nk_rect; p3: nk_color); cdecl;
  nk_fill_polygon: procedure(p1: Pnk_command_buffer; p2: PSingle; point_count: Integer; p4: nk_color); cdecl;
  nk_fill_rect: procedure(p1: Pnk_command_buffer; p2: nk_rect; rounding: Single; p4: nk_color); cdecl;
  nk_fill_rect_multi_color: procedure(p1: Pnk_command_buffer; p2: nk_rect; left: nk_color; top: nk_color; right: nk_color; bottom: nk_color); cdecl;
  nk_fill_triangle: procedure(p1: Pnk_command_buffer; x0: Single; y0: Single; x1: Single; y1: Single; x2: Single; y2: Single; p8: nk_color); cdecl;
  nk_filter_ascii: function(const p1: Pnk_text_edit; unicode: nk_rune): nk_bool; cdecl;
  nk_filter_binary: function(const p1: Pnk_text_edit; unicode: nk_rune): nk_bool; cdecl;
  nk_filter_decimal: function(const p1: Pnk_text_edit; unicode: nk_rune): nk_bool; cdecl;
  nk_filter_default: function(const p1: Pnk_text_edit; unicode: nk_rune): nk_bool; cdecl;
  nk_filter_float: function(const p1: Pnk_text_edit; unicode: nk_rune): nk_bool; cdecl;
  nk_filter_hex: function(const p1: Pnk_text_edit; unicode: nk_rune): nk_bool; cdecl;
  nk_filter_oct: function(const p1: Pnk_text_edit; unicode: nk_rune): nk_bool; cdecl;
  nk_font_atlas_add: function(p1: Pnk_font_atlas; const p2: Pnk_font_config): Pnk_font; cdecl;
  nk_font_atlas_add_compressed: function(p1: Pnk_font_atlas; memory: Pointer; size: nk_size; height: Single; const p5: Pnk_font_config): Pnk_font; cdecl;
  nk_font_atlas_add_compressed_base85: function(p1: Pnk_font_atlas; const data: PUTF8Char; height: Single; const config: Pnk_font_config): Pnk_font; cdecl;
  nk_font_atlas_add_default: function(p1: Pnk_font_atlas; height: Single; const p3: Pnk_font_config): Pnk_font; cdecl;
  nk_font_atlas_add_from_file: function(atlas: Pnk_font_atlas; const file_path: PUTF8Char; height: Single; const p4: Pnk_font_config): Pnk_font; cdecl;
  nk_font_atlas_add_from_memory: function(atlas: Pnk_font_atlas; memory: Pointer; size: nk_size; height: Single; const config: Pnk_font_config): Pnk_font; cdecl;
  nk_font_atlas_bake: function(p1: Pnk_font_atlas; width: PInteger; height: PInteger; p4: nk_font_atlas_format): Pointer; cdecl;
  nk_font_atlas_begin: procedure(p1: Pnk_font_atlas); cdecl;
  nk_font_atlas_cleanup: procedure(atlas: Pnk_font_atlas); cdecl;
  nk_font_atlas_clear: procedure(p1: Pnk_font_atlas); cdecl;
  nk_font_atlas_end: procedure(p1: Pnk_font_atlas; tex: nk_handle; p3: Pnk_draw_null_texture); cdecl;
  nk_font_atlas_init: procedure(p1: Pnk_font_atlas; p2: Pnk_allocator); cdecl;
  nk_font_atlas_init_custom: procedure(p1: Pnk_font_atlas; persistent: Pnk_allocator; transient: Pnk_allocator); cdecl;
  nk_font_atlas_init_default: procedure(p1: Pnk_font_atlas); cdecl;
  nk_font_chinese_glyph_ranges: function(): Pnk_rune; cdecl;
  nk_font_config_: function(pixel_height: Single): nk_font_config; cdecl;
  nk_font_cyrillic_glyph_ranges: function(): Pnk_rune; cdecl;
  nk_font_default_glyph_ranges: function(): Pnk_rune; cdecl;
  nk_font_find_glyph: function(p1: Pnk_font; unicode: nk_rune): Pnk_font_glyph; cdecl;
  nk_font_korean_glyph_ranges: function(): Pnk_rune; cdecl;
  nk_free: procedure(p1: Pnk_context); cdecl;
  nk_get_null_rect: function(): nk_rect; cdecl;
  nk_group_begin: function(p1: Pnk_context; const title: PUTF8Char; p3: nk_flags): nk_bool; cdecl;
  nk_group_begin_titled: function(p1: Pnk_context; const name: PUTF8Char; const title: PUTF8Char; p4: nk_flags): nk_bool; cdecl;
  nk_group_end: procedure(p1: Pnk_context); cdecl;
  nk_group_get_scroll: procedure(p1: Pnk_context; const id: PUTF8Char; x_offset: Pnk_uint; y_offset: Pnk_uint); cdecl;
  nk_group_scrolled_begin: function(p1: Pnk_context; off: Pnk_scroll; const title: PUTF8Char; p4: nk_flags): nk_bool; cdecl;
  nk_group_scrolled_end: procedure(p1: Pnk_context); cdecl;
  nk_group_scrolled_offset_begin: function(p1: Pnk_context; x_offset: Pnk_uint; y_offset: Pnk_uint; const title: PUTF8Char; flags: nk_flags): nk_bool; cdecl;
  nk_group_set_scroll: procedure(p1: Pnk_context; const id: PUTF8Char; x_offset: nk_uint; y_offset: nk_uint); cdecl;
  nk_handle_id: function(p1: Integer): nk_handle; cdecl;
  nk_handle_ptr: function(p1: Pointer): nk_handle; cdecl;
  nk_hsv: function(h: Integer; s: Integer; v: Integer): nk_color; cdecl;
  nk_hsv_bv: function(const hsv: Pnk_byte): nk_color; cdecl;
  nk_hsv_f: function(h: Single; s: Single; v: Single): nk_color; cdecl;
  nk_hsv_fv: function(const hsv: PSingle): nk_color; cdecl;
  nk_hsv_iv: function(const hsv: PInteger): nk_color; cdecl;
  nk_hsva: function(h: Integer; s: Integer; v: Integer; a: Integer): nk_color; cdecl;
  nk_hsva_bv: function(const hsva: Pnk_byte): nk_color; cdecl;
  nk_hsva_colorf: function(h: Single; s: Single; v: Single; a: Single): nk_colorf; cdecl;
  nk_hsva_colorfv: function(c: PSingle): nk_colorf; cdecl;
  nk_hsva_f: function(h: Single; s: Single; v: Single; a: Single): nk_color; cdecl;
  nk_hsva_fv: function(const hsva: PSingle): nk_color; cdecl;
  nk_hsva_iv: function(const hsva: PInteger): nk_color; cdecl;
  nk_image_: procedure(p1: Pnk_context; p2: nk_image); cdecl;
  nk_image_color: procedure(p1: Pnk_context; p2: nk_image; p3: nk_color); cdecl;
  nk_image_handle: function(p1: nk_handle): nk_image; cdecl;
  nk_image_id: function(p1: Integer): nk_image; cdecl;
  nk_image_is_subimage: function(const img: Pnk_image): nk_bool; cdecl;
  nk_image_ptr: function(p1: Pointer): nk_image; cdecl;
  nk_init: function(p1: Pnk_context; p2: Pnk_allocator; const p3: Pnk_user_font): nk_bool; cdecl;
  nk_init_custom: function(p1: Pnk_context; cmds: Pnk_buffer; pool: Pnk_buffer; const p4: Pnk_user_font): nk_bool; cdecl;
  nk_init_default: function(p1: Pnk_context; const p2: Pnk_user_font): nk_bool; cdecl;
  nk_init_fixed: function(p1: Pnk_context; memory: Pointer; size: nk_size; const p4: Pnk_user_font): nk_bool; cdecl;
  nk_input_any_mouse_click_in_rect: function(const p1: Pnk_input; p2: nk_rect): nk_bool; cdecl;
  nk_input_begin: procedure(p1: Pnk_context); cdecl;
  nk_input_button: procedure(p1: Pnk_context; p2: nk_buttons; x: Integer; y: Integer; down: nk_bool); cdecl;
  nk_input_char: procedure(p1: Pnk_context; p2: UTF8Char); cdecl;
  nk_input_end: procedure(p1: Pnk_context); cdecl;
  nk_input_glyph: procedure(p1: Pnk_context; const p2: nk_glyph); cdecl;
  nk_input_has_mouse_click: function(const p1: Pnk_input; p2: nk_buttons): nk_bool; cdecl;
  nk_input_has_mouse_click_down_in_rect: function(const p1: Pnk_input; p2: nk_buttons; p3: nk_rect; down: nk_bool): nk_bool; cdecl;
  nk_input_has_mouse_click_in_rect: function(const p1: Pnk_input; p2: nk_buttons; p3: nk_rect): nk_bool; cdecl;
  nk_input_is_key_down: function(const p1: Pnk_input; p2: nk_keys): nk_bool; cdecl;
  nk_input_is_key_pressed: function(const p1: Pnk_input; p2: nk_keys): nk_bool; cdecl;
  nk_input_is_key_released: function(const p1: Pnk_input; p2: nk_keys): nk_bool; cdecl;
  nk_input_is_mouse_click_down_in_rect: function(const i: Pnk_input; id: nk_buttons; b: nk_rect; down: nk_bool): nk_bool; cdecl;
  nk_input_is_mouse_click_in_rect: function(const p1: Pnk_input; p2: nk_buttons; p3: nk_rect): nk_bool; cdecl;
  nk_input_is_mouse_down: function(const p1: Pnk_input; p2: nk_buttons): nk_bool; cdecl;
  nk_input_is_mouse_hovering_rect: function(const p1: Pnk_input; p2: nk_rect): nk_bool; cdecl;
  nk_input_is_mouse_pressed: function(const p1: Pnk_input; p2: nk_buttons): nk_bool; cdecl;
  nk_input_is_mouse_prev_hovering_rect: function(const p1: Pnk_input; p2: nk_rect): nk_bool; cdecl;
  nk_input_is_mouse_released: function(const p1: Pnk_input; p2: nk_buttons): nk_bool; cdecl;
  nk_input_key: procedure(p1: Pnk_context; p2: nk_keys; down: nk_bool); cdecl;
  nk_input_motion: procedure(p1: Pnk_context; x: Integer; y: Integer); cdecl;
  nk_input_mouse_clicked: function(const p1: Pnk_input; p2: nk_buttons; p3: nk_rect): nk_bool; cdecl;
  nk_input_scroll: procedure(p1: Pnk_context; val: nk_vec2); cdecl;
  nk_input_unicode: procedure(p1: Pnk_context; p2: nk_rune); cdecl;
  nk_item_is_any_active: function(p1: Pnk_context): nk_bool; cdecl;
  nk_label: procedure(p1: Pnk_context; const p2: PUTF8Char; align: nk_flags); cdecl;
  nk_label_colored: procedure(p1: Pnk_context; const p2: PUTF8Char; align: nk_flags; p4: nk_color); cdecl;
  nk_label_colored_wrap: procedure(p1: Pnk_context; const p2: PUTF8Char; p3: nk_color); cdecl;
  nk_label_wrap: procedure(p1: Pnk_context; const p2: PUTF8Char); cdecl;
  nk_labelf: procedure(p1: Pnk_context; p2: nk_flags; const p3: PUTF8Char) varargs; cdecl;
  nk_labelf_colored: procedure(p1: Pnk_context; p2: nk_flags; p3: nk_color; const p4: PUTF8Char) varargs; cdecl;
  nk_labelf_colored_wrap: procedure(p1: Pnk_context; p2: nk_color; const p3: PUTF8Char) varargs; cdecl;
  nk_labelf_wrap: procedure(p1: Pnk_context; const p2: PUTF8Char) varargs; cdecl;
  nk_labelfv: procedure(p1: Pnk_context; p2: nk_flags; const p3: PUTF8Char; p4: Pointer); cdecl;
  nk_labelfv_colored: procedure(p1: Pnk_context; p2: nk_flags; p3: nk_color; const p4: PUTF8Char; p5: Pointer); cdecl;
  nk_labelfv_colored_wrap: procedure(p1: Pnk_context; p2: nk_color; const p3: PUTF8Char; p4: Pointer); cdecl;
  nk_labelfv_wrap: procedure(p1: Pnk_context; const p2: PUTF8Char; p3: Pointer); cdecl;
  nk_layout_ratio_from_pixel: function(p1: Pnk_context; pixel_width: Single): Single; cdecl;
  nk_layout_reset_min_row_height: procedure(p1: Pnk_context); cdecl;
  nk_layout_row: procedure(p1: Pnk_context; p2: nk_layout_format; height: Single; cols: Integer; const ratio: PSingle); cdecl;
  nk_layout_row_begin: procedure(ctx: Pnk_context; fmt: nk_layout_format; row_height: Single; cols: Integer); cdecl;
  nk_layout_row_dynamic: procedure(ctx: Pnk_context; height: Single; cols: Integer); cdecl;
  nk_layout_row_end: procedure(p1: Pnk_context); cdecl;
  nk_layout_row_push: procedure(p1: Pnk_context; value: Single); cdecl;
  nk_layout_row_static: procedure(ctx: Pnk_context; height: Single; item_width: Integer; cols: Integer); cdecl;
  nk_layout_row_template_begin: procedure(p1: Pnk_context; row_height: Single); cdecl;
  nk_layout_row_template_end: procedure(p1: Pnk_context); cdecl;
  nk_layout_row_template_push_dynamic: procedure(p1: Pnk_context); cdecl;
  nk_layout_row_template_push_static: procedure(p1: Pnk_context; width: Single); cdecl;
  nk_layout_row_template_push_variable: procedure(p1: Pnk_context; min_width: Single); cdecl;
  nk_layout_set_min_row_height: procedure(p1: Pnk_context; height: Single); cdecl;
  nk_layout_space_begin: procedure(p1: Pnk_context; p2: nk_layout_format; height: Single; widget_count: Integer); cdecl;
  nk_layout_space_bounds: function(p1: Pnk_context): nk_rect; cdecl;
  nk_layout_space_end: procedure(p1: Pnk_context); cdecl;
  nk_layout_space_push: procedure(p1: Pnk_context; bounds: nk_rect); cdecl;
  nk_layout_space_rect_to_local: function(p1: Pnk_context; p2: nk_rect): nk_rect; cdecl;
  nk_layout_space_rect_to_screen: function(p1: Pnk_context; p2: nk_rect): nk_rect; cdecl;
  nk_layout_space_to_local: function(p1: Pnk_context; p2: nk_vec2): nk_vec2; cdecl;
  nk_layout_space_to_screen: function(p1: Pnk_context; p2: nk_vec2): nk_vec2; cdecl;
  nk_layout_widget_bounds: function(p1: Pnk_context): nk_rect; cdecl;
  nk_list_view_begin: function(p1: Pnk_context; _out: Pnk_list_view; const id: PUTF8Char; p4: nk_flags; row_height: Integer; row_count: Integer): nk_bool; cdecl;
  nk_list_view_end: procedure(p1: Pnk_list_view); cdecl;
  nk_menu_begin_image: function(p1: Pnk_context; const p2: PUTF8Char; p3: nk_image; size: nk_vec2): nk_bool; cdecl;
  nk_menu_begin_image_label: function(p1: Pnk_context; const p2: PUTF8Char; align: nk_flags; p4: nk_image; size: nk_vec2): nk_bool; cdecl;
  nk_menu_begin_image_text: function(p1: Pnk_context; const p2: PUTF8Char; p3: Integer; align: nk_flags; p5: nk_image; size: nk_vec2): nk_bool; cdecl;
  nk_menu_begin_label: function(p1: Pnk_context; const p2: PUTF8Char; align: nk_flags; size: nk_vec2): nk_bool; cdecl;
  nk_menu_begin_symbol: function(p1: Pnk_context; const p2: PUTF8Char; p3: nk_symbol_type; size: nk_vec2): nk_bool; cdecl;
  nk_menu_begin_symbol_label: function(p1: Pnk_context; const p2: PUTF8Char; align: nk_flags; p4: nk_symbol_type; size: nk_vec2): nk_bool; cdecl;
  nk_menu_begin_symbol_text: function(p1: Pnk_context; const p2: PUTF8Char; p3: Integer; align: nk_flags; p5: nk_symbol_type; size: nk_vec2): nk_bool; cdecl;
  nk_menu_begin_text: function(p1: Pnk_context; const title: PUTF8Char; title_len: Integer; align: nk_flags; size: nk_vec2): nk_bool; cdecl;
  nk_menu_close: procedure(p1: Pnk_context); cdecl;
  nk_menu_end: procedure(p1: Pnk_context); cdecl;
  nk_menu_item_image_label: function(p1: Pnk_context; p2: nk_image; const p3: PUTF8Char; alignment: nk_flags): nk_bool; cdecl;
  nk_menu_item_image_text: function(p1: Pnk_context; p2: nk_image; const p3: PUTF8Char; len: Integer; alignment: nk_flags): nk_bool; cdecl;
  nk_menu_item_label: function(p1: Pnk_context; const p2: PUTF8Char; alignment: nk_flags): nk_bool; cdecl;
  nk_menu_item_symbol_label: function(p1: Pnk_context; p2: nk_symbol_type; const p3: PUTF8Char; alignment: nk_flags): nk_bool; cdecl;
  nk_menu_item_symbol_text: function(p1: Pnk_context; p2: nk_symbol_type; const p3: PUTF8Char; p4: Integer; alignment: nk_flags): nk_bool; cdecl;
  nk_menu_item_text: function(p1: Pnk_context; const p2: PUTF8Char; p3: Integer; align: nk_flags): nk_bool; cdecl;
  nk_menubar_begin: procedure(p1: Pnk_context); cdecl;
  nk_menubar_end: procedure(p1: Pnk_context); cdecl;
  nk_murmur_hash: function(const key: Pointer; len: Integer; seed: nk_hash): nk_hash; cdecl;
  nk_nine_slice_handle: function(p1: nk_handle; l: nk_ushort; t: nk_ushort; r: nk_ushort; b: nk_ushort): nk_nine_slice; cdecl;
  nk_nine_slice_id: function(p1: Integer; l: nk_ushort; t: nk_ushort; r: nk_ushort; b: nk_ushort): nk_nine_slice; cdecl;
  nk_nine_slice_is_sub9slice: function(const img: Pnk_nine_slice): Integer; cdecl;
  nk_nine_slice_ptr: function(p1: Pointer; l: nk_ushort; t: nk_ushort; r: nk_ushort; b: nk_ushort): nk_nine_slice; cdecl;
  nk_option_label: function(p1: Pnk_context; const p2: PUTF8Char; active: nk_bool): nk_bool; cdecl;
  nk_option_text: function(p1: Pnk_context; const p2: PUTF8Char; p3: Integer; active: nk_bool): nk_bool; cdecl;
  nk_plot: procedure(p1: Pnk_context; p2: nk_chart_type; const values: PSingle; count: Integer; offset: Integer); cdecl;
  nk_plot_function: procedure(p1: Pnk_context; p2: nk_chart_type; userdata: Pointer; value_getter: nk_plot_function_value_getter; count: Integer; offset: Integer); cdecl;
  nk_popup_begin: function(p1: Pnk_context; p2: nk_popup_type; const p3: PUTF8Char; p4: nk_flags; bounds: nk_rect): nk_bool; cdecl;
  nk_popup_close: procedure(p1: Pnk_context); cdecl;
  nk_popup_end: procedure(p1: Pnk_context); cdecl;
  nk_popup_get_scroll: procedure(p1: Pnk_context; offset_x: Pnk_uint; offset_y: Pnk_uint); cdecl;
  nk_popup_set_scroll: procedure(p1: Pnk_context; offset_x: nk_uint; offset_y: nk_uint); cdecl;
  nk_prog: function(p1: Pnk_context; cur: nk_size; max: nk_size; modifyable: nk_bool): nk_size; cdecl;
  nk_progress: function(p1: Pnk_context; cur: Pnk_size; max: nk_size; modifyable: nk_bool): nk_bool; cdecl;
  nk_property_double: procedure(p1: Pnk_context; const name: PUTF8Char; min: Double; val: PDouble; max: Double; step: Double; inc_per_pixel: Single); cdecl;
  nk_property_float: procedure(p1: Pnk_context; const name: PUTF8Char; min: Single; val: PSingle; max: Single; step: Single; inc_per_pixel: Single); cdecl;
  nk_property_int: procedure(p1: Pnk_context; const name: PUTF8Char; min: Integer; val: PInteger; max: Integer; step: Integer; inc_per_pixel: Single); cdecl;
  nk_propertyd: function(p1: Pnk_context; const name: PUTF8Char; min: Double; val: Double; max: Double; step: Double; inc_per_pixel: Single): Double; cdecl;
  nk_propertyf: function(p1: Pnk_context; const name: PUTF8Char; min: Single; val: Single; max: Single; step: Single; inc_per_pixel: Single): Single; cdecl;
  nk_propertyi: function(p1: Pnk_context; const name: PUTF8Char; min: Integer; val: Integer; max: Integer; step: Integer; inc_per_pixel: Single): Integer; cdecl;
  nk_push_custom: procedure(p1: Pnk_command_buffer; p2: nk_rect; p3: nk_command_custom_callback; usr: nk_handle); cdecl;
  nk_push_scissor: procedure(p1: Pnk_command_buffer; p2: nk_rect); cdecl;
  nk_radio_label: function(p1: Pnk_context; const p2: PUTF8Char; active: Pnk_bool): nk_bool; cdecl;
  nk_radio_text: function(p1: Pnk_context; const p2: PUTF8Char; p3: Integer; active: Pnk_bool): nk_bool; cdecl;
  nk_rect_: function(x: Single; y: Single; w: Single; h: Single): nk_rect; cdecl;
  nk_rect_pos: function(p1: nk_rect): nk_vec2; cdecl;
  nk_rect_size: function(p1: nk_rect): nk_vec2; cdecl;
  nk_recta: function(pos: nk_vec2; size: nk_vec2): nk_rect; cdecl;
  nk_recti_: function(x: Integer; y: Integer; w: Integer; h: Integer): nk_rect; cdecl;
  nk_rectiv: function(const xywh: PInteger): nk_rect; cdecl;
  nk_rectv: function(const xywh: PSingle): nk_rect; cdecl;
  nk_rgb_: function(r: Integer; g: Integer; b: Integer): nk_color; cdecl;
  nk_rgb_bv: function(const rgb: Pnk_byte): nk_color; cdecl;
  nk_rgb_cf: function(c: nk_colorf): nk_color; cdecl;
  nk_rgb_f: function(r: Single; g: Single; b: Single): nk_color; cdecl;
  nk_rgb_fv: function(const rgb: PSingle): nk_color; cdecl;
  nk_rgb_hex: function(const rgb: PUTF8Char): nk_color; cdecl;
  nk_rgb_iv: function(const rgb: PInteger): nk_color; cdecl;
  nk_rgba_: function(r: Integer; g: Integer; b: Integer; a: Integer): nk_color; cdecl;
  nk_rgba_bv: function(const rgba: Pnk_byte): nk_color; cdecl;
  nk_rgba_cf: function(c: nk_colorf): nk_color; cdecl;
  nk_rgba_f: function(r: Single; g: Single; b: Single; a: Single): nk_color; cdecl;
  nk_rgba_fv: function(const rgba: PSingle): nk_color; cdecl;
  nk_rgba_hex: function(const rgb: PUTF8Char): nk_color; cdecl;
  nk_rgba_iv: function(const rgba: PInteger): nk_color; cdecl;
  nk_rgba_u32: function(p1: nk_uint): nk_color; cdecl;
  nk_select_image_label: function(p1: Pnk_context; p2: nk_image; const p3: PUTF8Char; align: nk_flags; value: nk_bool): nk_bool; cdecl;
  nk_select_image_text: function(p1: Pnk_context; p2: nk_image; const p3: PUTF8Char; p4: Integer; align: nk_flags; value: nk_bool): nk_bool; cdecl;
  nk_select_label: function(p1: Pnk_context; const p2: PUTF8Char; align: nk_flags; value: nk_bool): nk_bool; cdecl;
  nk_select_symbol_label: function(p1: Pnk_context; p2: nk_symbol_type; const p3: PUTF8Char; align: nk_flags; value: nk_bool): nk_bool; cdecl;
  nk_select_symbol_text: function(p1: Pnk_context; p2: nk_symbol_type; const p3: PUTF8Char; p4: Integer; align: nk_flags; value: nk_bool): nk_bool; cdecl;
  nk_select_text: function(p1: Pnk_context; const p2: PUTF8Char; p3: Integer; align: nk_flags; value: nk_bool): nk_bool; cdecl;
  nk_selectable_image_label: function(p1: Pnk_context; p2: nk_image; const p3: PUTF8Char; align: nk_flags; value: Pnk_bool): nk_bool; cdecl;
  nk_selectable_image_text: function(p1: Pnk_context; p2: nk_image; const p3: PUTF8Char; p4: Integer; align: nk_flags; value: Pnk_bool): nk_bool; cdecl;
  nk_selectable_label: function(p1: Pnk_context; const p2: PUTF8Char; align: nk_flags; value: Pnk_bool): nk_bool; cdecl;
  nk_selectable_symbol_label: function(p1: Pnk_context; p2: nk_symbol_type; const p3: PUTF8Char; align: nk_flags; value: Pnk_bool): nk_bool; cdecl;
  nk_selectable_symbol_text: function(p1: Pnk_context; p2: nk_symbol_type; const p3: PUTF8Char; p4: Integer; align: nk_flags; value: Pnk_bool): nk_bool; cdecl;
  nk_selectable_text: function(p1: Pnk_context; const p2: PUTF8Char; p3: Integer; align: nk_flags; value: Pnk_bool): nk_bool; cdecl;
  nk_slide_float: function(p1: Pnk_context; min: Single; val: Single; max: Single; step: Single): Single; cdecl;
  nk_slide_int: function(p1: Pnk_context; min: Integer; val: Integer; max: Integer; step: Integer): Integer; cdecl;
  nk_slider_float: function(p1: Pnk_context; min: Single; val: PSingle; max: Single; step: Single): nk_bool; cdecl;
  nk_slider_int: function(p1: Pnk_context; min: Integer; val: PInteger; max: Integer; step: Integer): nk_bool; cdecl;
  nk_spacer: procedure(p1: Pnk_context); cdecl;
  nk_spacing: procedure(p1: Pnk_context; cols: Integer); cdecl;
  nk_str_append_str_char: function(p1: Pnk_str; const p2: PUTF8Char): Integer; cdecl;
  nk_str_append_str_runes: function(p1: Pnk_str; const p2: Pnk_rune): Integer; cdecl;
  nk_str_append_str_utf8: function(p1: Pnk_str; const p2: PUTF8Char): Integer; cdecl;
  nk_str_append_text_char: function(p1: Pnk_str; const p2: PUTF8Char; p3: Integer): Integer; cdecl;
  nk_str_append_text_runes: function(p1: Pnk_str; const p2: Pnk_rune; p3: Integer): Integer; cdecl;
  nk_str_append_text_utf8: function(p1: Pnk_str; const p2: PUTF8Char; p3: Integer): Integer; cdecl;
  nk_str_at_char: function(p1: Pnk_str; pos: Integer): PUTF8Char; cdecl;
  nk_str_at_char_const: function(const p1: Pnk_str; pos: Integer): PUTF8Char; cdecl;
  nk_str_at_const: function(const p1: Pnk_str; pos: Integer; unicode: Pnk_rune; len: PInteger): PUTF8Char; cdecl;
  nk_str_at_rune: function(p1: Pnk_str; pos: Integer; unicode: Pnk_rune; len: PInteger): PUTF8Char; cdecl;
  nk_str_clear: procedure(p1: Pnk_str); cdecl;
  nk_str_delete_chars: procedure(p1: Pnk_str; pos: Integer; len: Integer); cdecl;
  nk_str_delete_runes: procedure(p1: Pnk_str; pos: Integer; len: Integer); cdecl;
  nk_str_free: procedure(p1: Pnk_str); cdecl;
  nk_str_get: function(p1: Pnk_str): PUTF8Char; cdecl;
  nk_str_get_const: function(const p1: Pnk_str): PUTF8Char; cdecl;
  nk_str_init: procedure(p1: Pnk_str; const p2: Pnk_allocator; size: nk_size); cdecl;
  nk_str_init_default: procedure(p1: Pnk_str); cdecl;
  nk_str_init_fixed: procedure(p1: Pnk_str; memory: Pointer; size: nk_size); cdecl;
  nk_str_insert_at_char: function(p1: Pnk_str; pos: Integer; const p3: PUTF8Char; p4: Integer): Integer; cdecl;
  nk_str_insert_at_rune: function(p1: Pnk_str; pos: Integer; const p3: PUTF8Char; p4: Integer): Integer; cdecl;
  nk_str_insert_str_char: function(p1: Pnk_str; pos: Integer; const p3: PUTF8Char): Integer; cdecl;
  nk_str_insert_str_runes: function(p1: Pnk_str; pos: Integer; const p3: Pnk_rune): Integer; cdecl;
  nk_str_insert_str_utf8: function(p1: Pnk_str; pos: Integer; const p3: PUTF8Char): Integer; cdecl;
  nk_str_insert_text_char: function(p1: Pnk_str; pos: Integer; const p3: PUTF8Char; p4: Integer): Integer; cdecl;
  nk_str_insert_text_runes: function(p1: Pnk_str; pos: Integer; const p3: Pnk_rune; p4: Integer): Integer; cdecl;
  nk_str_insert_text_utf8: function(p1: Pnk_str; pos: Integer; const p3: PUTF8Char; p4: Integer): Integer; cdecl;
  nk_str_len: function(p1: Pnk_str): Integer; cdecl;
  nk_str_len_char: function(p1: Pnk_str): Integer; cdecl;
  nk_str_remove_chars: procedure(p1: Pnk_str; len: Integer); cdecl;
  nk_str_remove_runes: procedure(str: Pnk_str; len: Integer); cdecl;
  nk_str_rune_at: function(const p1: Pnk_str; pos: Integer): nk_rune; cdecl;
  nk_strfilter: function(const text: PUTF8Char; const regexp: PUTF8Char): Integer; cdecl;
  nk_stricmp: function(const s1: PUTF8Char; const s2: PUTF8Char): Integer; cdecl;
  nk_stricmpn: function(const s1: PUTF8Char; const s2: PUTF8Char; n: Integer): Integer; cdecl;
  nk_strlen: function(const str: PUTF8Char): Integer; cdecl;
  nk_strmatch_fuzzy_string: function(const str: PUTF8Char; const pattern: PUTF8Char; out_score: PInteger): Integer; cdecl;
  nk_strmatch_fuzzy_text: function(const txt: PUTF8Char; txt_len: Integer; const pattern: PUTF8Char; out_score: PInteger): Integer; cdecl;
  nk_stroke_arc: procedure(p1: Pnk_command_buffer; cx: Single; cy: Single; radius: Single; a_min: Single; a_max: Single; line_thickness: Single; p8: nk_color); cdecl;
  nk_stroke_circle: procedure(p1: Pnk_command_buffer; p2: nk_rect; line_thickness: Single; p4: nk_color); cdecl;
  nk_stroke_curve: procedure(p1: Pnk_command_buffer; p2: Single; p3: Single; p4: Single; p5: Single; p6: Single; p7: Single; p8: Single; p9: Single; line_thickness: Single; p11: nk_color); cdecl;
  nk_stroke_line: procedure(b: Pnk_command_buffer; x0: Single; y0: Single; x1: Single; y1: Single; line_thickness: Single; p7: nk_color); cdecl;
  nk_stroke_polygon: procedure(p1: Pnk_command_buffer; p2: PSingle; point_count: Integer; line_thickness: Single; p5: nk_color); cdecl;
  nk_stroke_polyline: procedure(p1: Pnk_command_buffer; points: PSingle; point_count: Integer; line_thickness: Single; col: nk_color); cdecl;
  nk_stroke_rect: procedure(p1: Pnk_command_buffer; p2: nk_rect; rounding: Single; line_thickness: Single; p5: nk_color); cdecl;
  nk_stroke_triangle: procedure(p1: Pnk_command_buffer; p2: Single; p3: Single; p4: Single; p5: Single; p6: Single; p7: Single; line_thichness: Single; p9: nk_color); cdecl;
  nk_strtod: function(const str: PUTF8Char; endptr: PPUTF8Char): Double; cdecl;
  nk_strtof: function(const str: PUTF8Char; endptr: PPUTF8Char): Single; cdecl;
  nk_strtoi: function(const str: PUTF8Char; endptr: PPUTF8Char): Integer; cdecl;
  nk_style_default: procedure(p1: Pnk_context); cdecl;
  nk_style_from_table: procedure(p1: Pnk_context; const p2: Pnk_color); cdecl;
  nk_style_get_color_by_name: function(p1: nk_style_colors): PUTF8Char; cdecl;
  nk_style_hide_cursor: procedure(p1: Pnk_context); cdecl;
  nk_style_item_color_: function(p1: nk_color): nk_style_item; cdecl;
  nk_style_item_hide: function(): nk_style_item; cdecl;
  nk_style_item_image_: function(img: nk_image): nk_style_item; cdecl;
  nk_style_item_nine_slice_: function(slice: nk_nine_slice): nk_style_item; cdecl;
  nk_style_load_all_cursors: procedure(p1: Pnk_context; p2: Pnk_cursor); cdecl;
  nk_style_load_cursor: procedure(p1: Pnk_context; p2: nk_style_cursor; const p3: Pnk_cursor); cdecl;
  nk_style_pop_color: function(p1: Pnk_context): nk_bool; cdecl;
  nk_style_pop_flags: function(p1: Pnk_context): nk_bool; cdecl;
  nk_style_pop_float: function(p1: Pnk_context): nk_bool; cdecl;
  nk_style_pop_font: function(p1: Pnk_context): nk_bool; cdecl;
  nk_style_pop_style_item: function(p1: Pnk_context): nk_bool; cdecl;
  nk_style_pop_vec2: function(p1: Pnk_context): nk_bool; cdecl;
  nk_style_push_color: function(p1: Pnk_context; p2: Pnk_color; p3: nk_color): nk_bool; cdecl;
  nk_style_push_flags: function(p1: Pnk_context; p2: Pnk_flags; p3: nk_flags): nk_bool; cdecl;
  nk_style_push_float: function(p1: Pnk_context; p2: PSingle; p3: Single): nk_bool; cdecl;
  nk_style_push_font: function(p1: Pnk_context; const p2: Pnk_user_font): nk_bool; cdecl;
  nk_style_push_style_item: function(p1: Pnk_context; p2: Pnk_style_item; p3: nk_style_item): nk_bool; cdecl;
  nk_style_push_vec2: function(p1: Pnk_context; p2: Pnk_vec2; p3: nk_vec2): nk_bool; cdecl;
  nk_style_set_cursor: function(p1: Pnk_context; p2: nk_style_cursor): nk_bool; cdecl;
  nk_style_set_font: procedure(p1: Pnk_context; const p2: Pnk_user_font); cdecl;
  nk_style_show_cursor: procedure(p1: Pnk_context); cdecl;
  nk_sub9slice_handle: function(p1: nk_handle; w: nk_ushort; h: nk_ushort; sub_region: nk_rect; l: nk_ushort; t: nk_ushort; r: nk_ushort; b: nk_ushort): nk_nine_slice; cdecl;
  nk_sub9slice_id: function(p1: Integer; w: nk_ushort; h: nk_ushort; sub_region: nk_rect; l: nk_ushort; t: nk_ushort; r: nk_ushort; b: nk_ushort): nk_nine_slice; cdecl;
  nk_sub9slice_ptr: function(p1: Pointer; w: nk_ushort; h: nk_ushort; sub_region: nk_rect; l: nk_ushort; t: nk_ushort; r: nk_ushort; b: nk_ushort): nk_nine_slice; cdecl;
  nk_subimage_handle: function(p1: nk_handle; w: nk_ushort; h: nk_ushort; sub_region: nk_rect): nk_image; cdecl;
  nk_subimage_id: function(p1: Integer; w: nk_ushort; h: nk_ushort; sub_region: nk_rect): nk_image; cdecl;
  nk_subimage_ptr: function(p1: Pointer; w: nk_ushort; h: nk_ushort; sub_region: nk_rect): nk_image; cdecl;
  nk_text: procedure(p1: Pnk_context; const p2: PUTF8Char; p3: Integer; p4: nk_flags); cdecl;
  nk_text_colored: procedure(p1: Pnk_context; const p2: PUTF8Char; p3: Integer; p4: nk_flags; p5: nk_color); cdecl;
  nk_text_wrap: procedure(p1: Pnk_context; const p2: PUTF8Char; p3: Integer); cdecl;
  nk_text_wrap_colored: procedure(p1: Pnk_context; const p2: PUTF8Char; p3: Integer; p4: nk_color); cdecl;
  nk_textedit_cut: function(p1: Pnk_text_edit): nk_bool; cdecl;
  nk_textedit_delete: procedure(p1: Pnk_text_edit; where: Integer; len: Integer); cdecl;
  nk_textedit_delete_selection: procedure(p1: Pnk_text_edit); cdecl;
  nk_textedit_free: procedure(p1: Pnk_text_edit); cdecl;
  nk_textedit_init: procedure(p1: Pnk_text_edit; p2: Pnk_allocator; size: nk_size); cdecl;
  nk_textedit_init_default: procedure(p1: Pnk_text_edit); cdecl;
  nk_textedit_init_fixed: procedure(p1: Pnk_text_edit; memory: Pointer; size: nk_size); cdecl;
  nk_textedit_paste: function(p1: Pnk_text_edit; const p2: PUTF8Char; len: Integer): nk_bool; cdecl;
  nk_textedit_redo: procedure(p1: Pnk_text_edit); cdecl;
  nk_textedit_select_all: procedure(p1: Pnk_text_edit); cdecl;
  nk_textedit_text: procedure(p1: Pnk_text_edit; const p2: PUTF8Char; total_len: Integer); cdecl;
  nk_textedit_undo: procedure(p1: Pnk_text_edit); cdecl;
  nk_tooltip: procedure(p1: Pnk_context; const p2: PUTF8Char); cdecl;
  nk_tooltip_begin: function(p1: Pnk_context; width: Single): nk_bool; cdecl;
  nk_tooltip_end: procedure(p1: Pnk_context); cdecl;
  nk_tooltipf: procedure(p1: Pnk_context; const p2: PUTF8Char) varargs; cdecl;
  nk_tooltipfv: procedure(p1: Pnk_context; const p2: PUTF8Char; p3: Pointer); cdecl;
  nk_tree_element_image_push_hashed: function(p1: Pnk_context; p2: nk_tree_type; p3: nk_image; const title: PUTF8Char; initial_state: nk_collapse_states; selected: Pnk_bool; const hash: PUTF8Char; len: Integer; seed: Integer): nk_bool; cdecl;
  nk_tree_element_pop: procedure(p1: Pnk_context); cdecl;
  nk_tree_element_push_hashed: function(p1: Pnk_context; p2: nk_tree_type; const title: PUTF8Char; initial_state: nk_collapse_states; selected: Pnk_bool; const hash: PUTF8Char; len: Integer; seed: Integer): nk_bool; cdecl;
  nk_tree_image_push_hashed: function(p1: Pnk_context; p2: nk_tree_type; p3: nk_image; const title: PUTF8Char; initial_state: nk_collapse_states; const hash: PUTF8Char; len: Integer; seed: Integer): nk_bool; cdecl;
  nk_tree_pop: procedure(p1: Pnk_context); cdecl;
  nk_tree_push_hashed: function(p1: Pnk_context; p2: nk_tree_type; const title: PUTF8Char; initial_state: nk_collapse_states; const hash: PUTF8Char; len: Integer; seed: Integer): nk_bool; cdecl;
  nk_tree_state_image_push: function(p1: Pnk_context; p2: nk_tree_type; p3: nk_image; const title: PUTF8Char; state: Pnk_collapse_states): nk_bool; cdecl;
  nk_tree_state_pop: procedure(p1: Pnk_context); cdecl;
  nk_tree_state_push: function(p1: Pnk_context; p2: nk_tree_type; const title: PUTF8Char; state: Pnk_collapse_states): nk_bool; cdecl;
  nk_triangle_from_direction: procedure(result: Pnk_vec2; r: nk_rect; pad_x: Single; pad_y: Single; p5: nk_heading); cdecl;
  nk_utf_at: function(const buffer: PUTF8Char; length: Integer; index: Integer; unicode: Pnk_rune; len: PInteger): PUTF8Char; cdecl;
  nk_utf_decode: function(const p1: PUTF8Char; p2: Pnk_rune; p3: Integer): Integer; cdecl;
  nk_utf_encode: function(p1: nk_rune; p2: PUTF8Char; p3: Integer): Integer; cdecl;
  nk_utf_len: function(const p1: PUTF8Char; byte_len: Integer): Integer; cdecl;
  nk_value_bool: procedure(p1: Pnk_context; const prefix: PUTF8Char; p3: Integer); cdecl;
  nk_value_color_byte: procedure(p1: Pnk_context; const prefix: PUTF8Char; p3: nk_color); cdecl;
  nk_value_color_float: procedure(p1: Pnk_context; const prefix: PUTF8Char; p3: nk_color); cdecl;
  nk_value_color_hex: procedure(p1: Pnk_context; const prefix: PUTF8Char; p3: nk_color); cdecl;
  nk_value_float: procedure(p1: Pnk_context; const prefix: PUTF8Char; p3: Single); cdecl;
  nk_value_int: procedure(p1: Pnk_context; const prefix: PUTF8Char; p3: Integer); cdecl;
  nk_value_uint: procedure(p1: Pnk_context; const prefix: PUTF8Char; p3: Cardinal); cdecl;
  nk_vec2_: function(x: Single; y: Single): nk_vec2; cdecl;
  nk_vec2i_: function(x: Integer; y: Integer): nk_vec2; cdecl;
  nk_vec2iv: function(const xy: PInteger): nk_vec2; cdecl;
  nk_vec2v: function(const xy: PSingle): nk_vec2; cdecl;
  nk_widget: function(p1: Pnk_rect; const p2: Pnk_context): nk_widget_layout_states; cdecl;
  nk_widget_bounds: function(p1: Pnk_context): nk_rect; cdecl;
  nk_widget_fitting: function(p1: Pnk_rect; p2: Pnk_context; p3: nk_vec2): nk_widget_layout_states; cdecl;
  nk_widget_has_mouse_click_down: function(p1: Pnk_context; p2: nk_buttons; down: nk_bool): nk_bool; cdecl;
  nk_widget_height: function(p1: Pnk_context): Single; cdecl;
  nk_widget_is_hovered: function(p1: Pnk_context): nk_bool; cdecl;
  nk_widget_is_mouse_clicked: function(p1: Pnk_context; p2: nk_buttons): nk_bool; cdecl;
  nk_widget_position: function(p1: Pnk_context): nk_vec2; cdecl;
  nk_widget_size: function(p1: Pnk_context): nk_vec2; cdecl;
  nk_widget_width: function(p1: Pnk_context): Single; cdecl;
  nk_window_close: procedure(ctx: Pnk_context; const name: PUTF8Char); cdecl;
  nk_window_collapse: procedure(p1: Pnk_context; const name: PUTF8Char; state: nk_collapse_states); cdecl;
  nk_window_collapse_if: procedure(p1: Pnk_context; const name: PUTF8Char; p3: nk_collapse_states; cond: Integer); cdecl;
  nk_window_find: function(ctx: Pnk_context; const name: PUTF8Char): Pnk_window; cdecl;
  nk_window_get_bounds: function(const ctx: Pnk_context): nk_rect; cdecl;
  nk_window_get_canvas: function(p1: Pnk_context): Pnk_command_buffer; cdecl;
  nk_window_get_content_region: function(p1: Pnk_context): nk_rect; cdecl;
  nk_window_get_content_region_max: function(p1: Pnk_context): nk_vec2; cdecl;
  nk_window_get_content_region_min: function(p1: Pnk_context): nk_vec2; cdecl;
  nk_window_get_content_region_size: function(p1: Pnk_context): nk_vec2; cdecl;
  nk_window_get_height: function(const p1: Pnk_context): Single; cdecl;
  nk_window_get_panel: function(p1: Pnk_context): Pnk_panel; cdecl;
  nk_window_get_position: function(const ctx: Pnk_context): nk_vec2; cdecl;
  nk_window_get_scroll: procedure(p1: Pnk_context; offset_x: Pnk_uint; offset_y: Pnk_uint); cdecl;
  nk_window_get_size: function(const p1: Pnk_context): nk_vec2; cdecl;
  nk_window_get_width: function(const p1: Pnk_context): Single; cdecl;
  nk_window_has_focus: function(const p1: Pnk_context): nk_bool; cdecl;
  nk_window_is_active: function(p1: Pnk_context; const p2: PUTF8Char): nk_bool; cdecl;
  nk_window_is_any_hovered: function(p1: Pnk_context): nk_bool; cdecl;
  nk_window_is_closed: function(p1: Pnk_context; const p2: PUTF8Char): nk_bool; cdecl;
  nk_window_is_collapsed: function(ctx: Pnk_context; const name: PUTF8Char): nk_bool; cdecl;
  nk_window_is_hidden: function(p1: Pnk_context; const p2: PUTF8Char): nk_bool; cdecl;
  nk_window_is_hovered: function(p1: Pnk_context): nk_bool; cdecl;
  nk_window_set_bounds: procedure(p1: Pnk_context; const name: PUTF8Char; bounds: nk_rect); cdecl;
  nk_window_set_focus: procedure(p1: Pnk_context; const name: PUTF8Char); cdecl;
  nk_window_set_position: procedure(p1: Pnk_context; const name: PUTF8Char; pos: nk_vec2); cdecl;
  nk_window_set_scroll: procedure(p1: Pnk_context; offset_x: nk_uint; offset_y: nk_uint); cdecl;
  nk_window_set_size: procedure(p1: Pnk_context; const name: PUTF8Char; p3: nk_vec2); cdecl;
  nk_window_show: procedure(p1: Pnk_context; const name: PUTF8Char; p3: nk_show_states); cdecl;
  nk_window_show_if: procedure(p1: Pnk_context; const name: PUTF8Char; p3: nk_show_states; cond: Integer); cdecl;
  PHYSFS_addToSearchPath: function(const newDir: PUTF8Char; appendToPath: Integer): Integer; cdecl;
  PHYSFS_caseFold: function(const from: PHYSFS_uint32; _to: PPHYSFS_uint32): Integer; cdecl;
  PHYSFS_close: function(handle: PPHYSFS_File): Integer; cdecl;
  PHYSFS_deinit: function(): Integer; cdecl;
  PHYSFS_delete: function(const filename: PUTF8Char): Integer; cdecl;
  PHYSFS_deregisterArchiver: function(const ext: PUTF8Char): Integer; cdecl;
  PHYSFS_enumerate: function(const dir: PUTF8Char; c: PHYSFS_EnumerateCallback; d: Pointer): Integer; cdecl;
  PHYSFS_enumerateFiles: function(const dir: PUTF8Char): PPUTF8Char; cdecl;
  PHYSFS_enumerateFilesCallback: procedure(const dir: PUTF8Char; c: PHYSFS_EnumFilesCallback; d: Pointer); cdecl;
  PHYSFS_eof: function(handle: PPHYSFS_File): Integer; cdecl;
  PHYSFS_exists: function(const fname: PUTF8Char): Integer; cdecl;
  PHYSFS_fileLength: function(handle: PPHYSFS_File): PHYSFS_sint64; cdecl;
  PHYSFS_flush: function(handle: PPHYSFS_File): Integer; cdecl;
  PHYSFS_freeList: procedure(listVar: Pointer); cdecl;
  PHYSFS_getAllocator: function(): PPHYSFS_Allocator; cdecl;
  PHYSFS_getBaseDir: function(): PUTF8Char; cdecl;
  PHYSFS_getCdRomDirs: function(): PPUTF8Char; cdecl;
  PHYSFS_getCdRomDirsCallback: procedure(c: PHYSFS_StringCallback; d: Pointer); cdecl;
  PHYSFS_getDirSeparator: function(): PUTF8Char; cdecl;
  PHYSFS_getErrorByCode: function(code: PHYSFS_ErrorCode): PUTF8Char; cdecl;
  PHYSFS_getLastError: function(): PUTF8Char; cdecl;
  PHYSFS_getLastErrorCode: function(): PHYSFS_ErrorCode; cdecl;
  PHYSFS_getLastModTime: function(const filename: PUTF8Char): PHYSFS_sint64; cdecl;
  PHYSFS_getLinkedVersion: procedure(ver: PPHYSFS_Version); cdecl;
  PHYSFS_getMountPoint: function(const dir: PUTF8Char): PUTF8Char; cdecl;
  PHYSFS_getPrefDir: function(const org: PUTF8Char; const app: PUTF8Char): PUTF8Char; cdecl;
  PHYSFS_getRealDir: function(const filename: PUTF8Char): PUTF8Char; cdecl;
  PHYSFS_getSearchPath: function(): PPUTF8Char; cdecl;
  PHYSFS_getSearchPathCallback: procedure(c: PHYSFS_StringCallback; d: Pointer); cdecl;
  PHYSFS_getUserDir: function(): PUTF8Char; cdecl;
  PHYSFS_getWriteDir: function(): PUTF8Char; cdecl;
  PHYSFS_init: function(const argv0: PUTF8Char): Integer; cdecl;
  PHYSFS_isDirectory: function(const fname: PUTF8Char): Integer; cdecl;
  PHYSFS_isInit: function(): Integer; cdecl;
  PHYSFS_isSymbolicLink: function(const fname: PUTF8Char): Integer; cdecl;
  PHYSFS_mkdir: function(const dirName: PUTF8Char): Integer; cdecl;
  PHYSFS_mount: function(const newDir: PUTF8Char; const mountPoint: PUTF8Char; appendToPath: Integer): Integer; cdecl;
  PHYSFS_mountHandle: function(_file: PPHYSFS_File; const newDir: PUTF8Char; const mountPoint: PUTF8Char; appendToPath: Integer): Integer; cdecl;
  PHYSFS_mountIo: function(io: PPHYSFS_Io; const newDir: PUTF8Char; const mountPoint: PUTF8Char; appendToPath: Integer): Integer; cdecl;
  PHYSFS_mountMemory: function(const buf: Pointer; len: PHYSFS_uint64; del: PHYSFS_mountMemory_del; const newDir: PUTF8Char; const mountPoint: PUTF8Char; appendToPath: Integer): Integer; cdecl;
  PHYSFS_openAppend: function(const filename: PUTF8Char): PPHYSFS_File; cdecl;
  PHYSFS_openRead: function(const filename: PUTF8Char): PPHYSFS_File; cdecl;
  PHYSFS_openWrite: function(const filename: PUTF8Char): PPHYSFS_File; cdecl;
  PHYSFS_permitSymbolicLinks: procedure(allow: Integer); cdecl;
  PHYSFS_read: function(handle: PPHYSFS_File; buffer: Pointer; objSize: PHYSFS_uint32; objCount: PHYSFS_uint32): PHYSFS_sint64; cdecl;
  PHYSFS_readBytes: function(handle: PPHYSFS_File; buffer: Pointer; len: PHYSFS_uint64): PHYSFS_sint64; cdecl;
  PHYSFS_readSBE16: function(_file: PPHYSFS_File; val: PPHYSFS_sint16): Integer; cdecl;
  PHYSFS_readSBE32: function(_file: PPHYSFS_File; val: PPHYSFS_sint32): Integer; cdecl;
  PHYSFS_readSBE64: function(_file: PPHYSFS_File; val: PPHYSFS_sint64): Integer; cdecl;
  PHYSFS_readSLE16: function(_file: PPHYSFS_File; val: PPHYSFS_sint16): Integer; cdecl;
  PHYSFS_readSLE32: function(_file: PPHYSFS_File; val: PPHYSFS_sint32): Integer; cdecl;
  PHYSFS_readSLE64: function(_file: PPHYSFS_File; val: PPHYSFS_sint64): Integer; cdecl;
  PHYSFS_readUBE16: function(_file: PPHYSFS_File; val: PPHYSFS_uint16): Integer; cdecl;
  PHYSFS_readUBE32: function(_file: PPHYSFS_File; val: PPHYSFS_uint32): Integer; cdecl;
  PHYSFS_readUBE64: function(_file: PPHYSFS_File; val: PPHYSFS_uint64): Integer; cdecl;
  PHYSFS_readULE16: function(_file: PPHYSFS_File; val: PPHYSFS_uint16): Integer; cdecl;
  PHYSFS_readULE32: function(_file: PPHYSFS_File; val: PPHYSFS_uint32): Integer; cdecl;
  PHYSFS_readULE64: function(_file: PPHYSFS_File; val: PPHYSFS_uint64): Integer; cdecl;
  PHYSFS_registerArchiver: function(const archiver: PPHYSFS_Archiver): Integer; cdecl;
  PHYSFS_removeFromSearchPath: function(const oldDir: PUTF8Char): Integer; cdecl;
  PHYSFS_seek: function(handle: PPHYSFS_File; pos: PHYSFS_uint64): Integer; cdecl;
  PHYSFS_setAllocator: function(const allocator: PPHYSFS_Allocator): Integer; cdecl;
  PHYSFS_setBuffer: function(handle: PPHYSFS_File; bufsize: PHYSFS_uint64): Integer; cdecl;
  PHYSFS_setErrorCode: procedure(code: PHYSFS_ErrorCode); cdecl;
  PHYSFS_setSaneConfig: function(const organization: PUTF8Char; const appName: PUTF8Char; const archiveExt: PUTF8Char; includeCdRoms: Integer; archivesFirst: Integer): Integer; cdecl;
  PHYSFS_setWriteDir: function(const newDir: PUTF8Char): Integer; cdecl;
  PHYSFS_stat: function(const fname: PUTF8Char; stat: PPHYSFS_Stat_): Integer; cdecl;
  PHYSFS_supportedArchiveTypes: function(): PPPHYSFS_ArchiveInfo; cdecl;
  PHYSFS_swapSBE16: function(val: PHYSFS_sint16): PHYSFS_sint16; cdecl;
  PHYSFS_swapSBE32: function(val: PHYSFS_sint32): PHYSFS_sint32; cdecl;
  PHYSFS_swapSBE64: function(val: PHYSFS_sint64): PHYSFS_sint64; cdecl;
  PHYSFS_swapSLE16: function(val: PHYSFS_sint16): PHYSFS_sint16; cdecl;
  PHYSFS_swapSLE32: function(val: PHYSFS_sint32): PHYSFS_sint32; cdecl;
  PHYSFS_swapSLE64: function(val: PHYSFS_sint64): PHYSFS_sint64; cdecl;
  PHYSFS_swapUBE16: function(val: PHYSFS_uint16): PHYSFS_uint16; cdecl;
  PHYSFS_swapUBE32: function(val: PHYSFS_uint32): PHYSFS_uint32; cdecl;
  PHYSFS_swapUBE64: function(val: PHYSFS_uint64): PHYSFS_uint64; cdecl;
  PHYSFS_swapULE16: function(val: PHYSFS_uint16): PHYSFS_uint16; cdecl;
  PHYSFS_swapULE32: function(val: PHYSFS_uint32): PHYSFS_uint32; cdecl;
  PHYSFS_swapULE64: function(val: PHYSFS_uint64): PHYSFS_uint64; cdecl;
  PHYSFS_symbolicLinksPermitted: function(): Integer; cdecl;
  PHYSFS_tell: function(handle: PPHYSFS_File): PHYSFS_sint64; cdecl;
  PHYSFS_ucs4stricmp: function(const str1: PPHYSFS_uint32; const str2: PPHYSFS_uint32): Integer; cdecl;
  PHYSFS_unmount: function(const oldDir: PUTF8Char): Integer; cdecl;
  PHYSFS_utf16stricmp: function(const str1: PPHYSFS_uint16; const str2: PPHYSFS_uint16): Integer; cdecl;
  PHYSFS_utf8FromLatin1: procedure(const src: PUTF8Char; dst: PUTF8Char; len: PHYSFS_uint64); cdecl;
  PHYSFS_utf8FromUcs2: procedure(const src: PPHYSFS_uint16; dst: PUTF8Char; len: PHYSFS_uint64); cdecl;
  PHYSFS_utf8FromUcs4: procedure(const src: PPHYSFS_uint32; dst: PUTF8Char; len: PHYSFS_uint64); cdecl;
  PHYSFS_utf8FromUtf16: procedure(const src: PPHYSFS_uint16; dst: PUTF8Char; len: PHYSFS_uint64); cdecl;
  PHYSFS_utf8stricmp: function(const str1: PUTF8Char; const str2: PUTF8Char): Integer; cdecl;
  PHYSFS_utf8ToUcs2: procedure(const src: PUTF8Char; dst: PPHYSFS_uint16; len: PHYSFS_uint64); cdecl;
  PHYSFS_utf8ToUcs4: procedure(const src: PUTF8Char; dst: PPHYSFS_uint32; len: PHYSFS_uint64); cdecl;
  PHYSFS_utf8ToUtf16: procedure(const src: PUTF8Char; dst: PPHYSFS_uint16; len: PHYSFS_uint64); cdecl;
  PHYSFS_write: function(handle: PPHYSFS_File; const buffer: Pointer; objSize: PHYSFS_uint32; objCount: PHYSFS_uint32): PHYSFS_sint64; cdecl;
  PHYSFS_writeBytes: function(handle: PPHYSFS_File; const buffer: Pointer; len: PHYSFS_uint64): PHYSFS_sint64; cdecl;
  PHYSFS_writeSBE16: function(_file: PPHYSFS_File; val: PHYSFS_sint16): Integer; cdecl;
  PHYSFS_writeSBE32: function(_file: PPHYSFS_File; val: PHYSFS_sint32): Integer; cdecl;
  PHYSFS_writeSBE64: function(_file: PPHYSFS_File; val: PHYSFS_sint64): Integer; cdecl;
  PHYSFS_writeSLE16: function(_file: PPHYSFS_File; val: PHYSFS_sint16): Integer; cdecl;
  PHYSFS_writeSLE32: function(_file: PPHYSFS_File; val: PHYSFS_sint32): Integer; cdecl;
  PHYSFS_writeSLE64: function(_file: PPHYSFS_File; val: PHYSFS_sint64): Integer; cdecl;
  PHYSFS_writeUBE16: function(_file: PPHYSFS_File; val: PHYSFS_uint16): Integer; cdecl;
  PHYSFS_writeUBE32: function(_file: PPHYSFS_File; val: PHYSFS_uint32): Integer; cdecl;
  PHYSFS_writeUBE64: function(_file: PPHYSFS_File; val: PHYSFS_uint64): Integer; cdecl;
  PHYSFS_writeULE16: function(_file: PPHYSFS_File; val: PHYSFS_uint16): Integer; cdecl;
  PHYSFS_writeULE32: function(_file: PPHYSFS_File; val: PHYSFS_uint32): Integer; cdecl;
  PHYSFS_writeULE64: function(_file: PPHYSFS_File; val: PHYSFS_uint64): Integer; cdecl;
  zipClose: function(_file: zipFile; const global_comment: PUTF8Char): Integer; cdecl;
  zipCloseFileInZip: function(_file: zipFile): Integer; cdecl;
  zipOpen: function(const pathname: PUTF8Char; append: Integer): zipFile; cdecl;
  zipOpenNewFileInZip3: function(_file: zipFile; const filename: PUTF8Char; const zipfi: Pzip_fileinfo; const extrafield_local: Pointer; size_extrafield_local: uInt; const extrafield_global: Pointer; size_extrafield_global: uInt; const comment: PUTF8Char; method: Integer; level: Integer; raw: Integer; windowBits: Integer; memLevel: Integer; strategy: Integer; const password: PUTF8Char; crcForCrypting: uLong): Integer; cdecl;
  zipWriteInFileInZip: function(_file: zipFile; const buf: Pointer; len: Cardinal): Integer; cdecl;

implementation

{$R Spark.CLibs.res}

uses
  System.SysUtils,
  System.IOUtils,
  System.Classes,
  System.Zip;

var
  LDllHandle: THandle;
  LDllName: string;

procedure LoadDLL;
var
  LResStream: TResourceStream;
  LZipFile: TZipFile;
  LZipStream: TStream;
  LFileStream: TFileStream;
  LHeader: TZipHeader;
begin
  LResStream := TResourceStream.Create(HInstance, 'RESDATA', RT_RCDATA);
  LZipFile := TZipFile.Create;
  LZipFile.Open(LResStream, zmRead);
  LZipFile.Read(0, LZipStream, LHeader);
  LDllName := TPath.GetTempFileName;
  LFileStream := TFile.Create(LDllName);
  LFileStream.CopyFrom(LZipStream, LZipStream.Size);
  FreeAndNil(LFileStream);
  FreeAndNil(LZipStream);
  FreeAndNil(LZipFile);
  FreeAndNil(LResStream);

  LDllHandle := SafeLoadLibrary(LDllName);

  _al_trace_prefix := GetProcAddress(LDllHandle, '_al_trace_prefix');
  _al_trace_suffix := GetProcAddress(LDllHandle, '_al_trace_suffix');
  al_acknowledge_drawing_halt := GetProcAddress(LDllHandle, 'al_acknowledge_drawing_halt');
  al_acknowledge_drawing_resume := GetProcAddress(LDllHandle, 'al_acknowledge_drawing_resume');
  al_acknowledge_resize := GetProcAddress(LDllHandle, 'al_acknowledge_resize');
  al_add_config_comment := GetProcAddress(LDllHandle, 'al_add_config_comment');
  al_add_config_section := GetProcAddress(LDllHandle, 'al_add_config_section');
  al_add_new_bitmap_flag := GetProcAddress(LDllHandle, 'al_add_new_bitmap_flag');
  al_add_timer_count := GetProcAddress(LDllHandle, 'al_add_timer_count');
  al_append_menu_item := GetProcAddress(LDllHandle, 'al_append_menu_item');
  al_append_native_text_log := GetProcAddress(LDllHandle, 'al_append_native_text_log');
  al_append_path_component := GetProcAddress(LDllHandle, 'al_append_path_component');
  al_apply_window_constraints := GetProcAddress(LDllHandle, 'al_apply_window_constraints');
  al_attach_audio_stream_to_mixer := GetProcAddress(LDllHandle, 'al_attach_audio_stream_to_mixer');
  al_attach_audio_stream_to_voice := GetProcAddress(LDllHandle, 'al_attach_audio_stream_to_voice');
  al_attach_mixer_to_mixer := GetProcAddress(LDllHandle, 'al_attach_mixer_to_mixer');
  al_attach_mixer_to_voice := GetProcAddress(LDllHandle, 'al_attach_mixer_to_voice');
  al_attach_sample_instance_to_mixer := GetProcAddress(LDllHandle, 'al_attach_sample_instance_to_mixer');
  al_attach_sample_instance_to_voice := GetProcAddress(LDllHandle, 'al_attach_sample_instance_to_voice');
  al_attach_shader_source := GetProcAddress(LDllHandle, 'al_attach_shader_source');
  al_attach_shader_source_file := GetProcAddress(LDllHandle, 'al_attach_shader_source_file');
  al_backup_dirty_bitmap := GetProcAddress(LDllHandle, 'al_backup_dirty_bitmap');
  al_backup_dirty_bitmaps := GetProcAddress(LDllHandle, 'al_backup_dirty_bitmaps');
  al_broadcast_cond := GetProcAddress(LDllHandle, 'al_broadcast_cond');
  al_build_camera_transform := GetProcAddress(LDllHandle, 'al_build_camera_transform');
  al_build_menu := GetProcAddress(LDllHandle, 'al_build_menu');
  al_build_shader := GetProcAddress(LDllHandle, 'al_build_shader');
  al_build_transform := GetProcAddress(LDllHandle, 'al_build_transform');
  al_calculate_arc := GetProcAddress(LDllHandle, 'al_calculate_arc');
  al_calculate_ribbon := GetProcAddress(LDllHandle, 'al_calculate_ribbon');
  al_calculate_spline := GetProcAddress(LDllHandle, 'al_calculate_spline');
  al_calloc_with_context := GetProcAddress(LDllHandle, 'al_calloc_with_context');
  al_change_directory := GetProcAddress(LDllHandle, 'al_change_directory');
  al_check_inverse := GetProcAddress(LDllHandle, 'al_check_inverse');
  al_clear_depth_buffer := GetProcAddress(LDllHandle, 'al_clear_depth_buffer');
  al_clear_keyboard_state := GetProcAddress(LDllHandle, 'al_clear_keyboard_state');
  al_clear_to_color := GetProcAddress(LDllHandle, 'al_clear_to_color');
  al_clipboard_has_text := GetProcAddress(LDllHandle, 'al_clipboard_has_text');
  al_clone_bitmap := GetProcAddress(LDllHandle, 'al_clone_bitmap');
  al_clone_menu := GetProcAddress(LDllHandle, 'al_clone_menu');
  al_clone_menu_for_popup := GetProcAddress(LDllHandle, 'al_clone_menu_for_popup');
  al_clone_path := GetProcAddress(LDllHandle, 'al_clone_path');
  al_close_directory := GetProcAddress(LDllHandle, 'al_close_directory');
  al_close_native_text_log := GetProcAddress(LDllHandle, 'al_close_native_text_log');
  al_close_video := GetProcAddress(LDllHandle, 'al_close_video');
  al_color_cmyk := GetProcAddress(LDllHandle, 'al_color_cmyk');
  al_color_cmyk_to_rgb := GetProcAddress(LDllHandle, 'al_color_cmyk_to_rgb');
  al_color_distance_ciede2000 := GetProcAddress(LDllHandle, 'al_color_distance_ciede2000');
  al_color_hsl := GetProcAddress(LDllHandle, 'al_color_hsl');
  al_color_hsl_to_rgb := GetProcAddress(LDllHandle, 'al_color_hsl_to_rgb');
  al_color_hsv := GetProcAddress(LDllHandle, 'al_color_hsv');
  al_color_hsv_to_rgb := GetProcAddress(LDllHandle, 'al_color_hsv_to_rgb');
  al_color_html := GetProcAddress(LDllHandle, 'al_color_html');
  al_color_html_to_rgb := GetProcAddress(LDllHandle, 'al_color_html_to_rgb');
  al_color_lab := GetProcAddress(LDllHandle, 'al_color_lab');
  al_color_lab_to_rgb := GetProcAddress(LDllHandle, 'al_color_lab_to_rgb');
  al_color_lch := GetProcAddress(LDllHandle, 'al_color_lch');
  al_color_lch_to_rgb := GetProcAddress(LDllHandle, 'al_color_lch_to_rgb');
  al_color_linear := GetProcAddress(LDllHandle, 'al_color_linear');
  al_color_linear_to_rgb := GetProcAddress(LDllHandle, 'al_color_linear_to_rgb');
  al_color_name := GetProcAddress(LDllHandle, 'al_color_name');
  al_color_name_to_rgb := GetProcAddress(LDllHandle, 'al_color_name_to_rgb');
  al_color_oklab := GetProcAddress(LDllHandle, 'al_color_oklab');
  al_color_oklab_to_rgb := GetProcAddress(LDllHandle, 'al_color_oklab_to_rgb');
  al_color_rgb_to_cmyk := GetProcAddress(LDllHandle, 'al_color_rgb_to_cmyk');
  al_color_rgb_to_hsl := GetProcAddress(LDllHandle, 'al_color_rgb_to_hsl');
  al_color_rgb_to_hsv := GetProcAddress(LDllHandle, 'al_color_rgb_to_hsv');
  al_color_rgb_to_html := GetProcAddress(LDllHandle, 'al_color_rgb_to_html');
  al_color_rgb_to_lab := GetProcAddress(LDllHandle, 'al_color_rgb_to_lab');
  al_color_rgb_to_lch := GetProcAddress(LDllHandle, 'al_color_rgb_to_lch');
  al_color_rgb_to_linear := GetProcAddress(LDllHandle, 'al_color_rgb_to_linear');
  al_color_rgb_to_name := GetProcAddress(LDllHandle, 'al_color_rgb_to_name');
  al_color_rgb_to_oklab := GetProcAddress(LDllHandle, 'al_color_rgb_to_oklab');
  al_color_rgb_to_xyy := GetProcAddress(LDllHandle, 'al_color_rgb_to_xyy');
  al_color_rgb_to_xyz := GetProcAddress(LDllHandle, 'al_color_rgb_to_xyz');
  al_color_rgb_to_yuv := GetProcAddress(LDllHandle, 'al_color_rgb_to_yuv');
  al_color_xyy := GetProcAddress(LDllHandle, 'al_color_xyy');
  al_color_xyy_to_rgb := GetProcAddress(LDllHandle, 'al_color_xyy_to_rgb');
  al_color_xyz := GetProcAddress(LDllHandle, 'al_color_xyz');
  al_color_xyz_to_rgb := GetProcAddress(LDllHandle, 'al_color_xyz_to_rgb');
  al_color_yuv := GetProcAddress(LDllHandle, 'al_color_yuv');
  al_color_yuv_to_rgb := GetProcAddress(LDllHandle, 'al_color_yuv_to_rgb');
  al_compose_transform := GetProcAddress(LDllHandle, 'al_compose_transform');
  al_convert_bitmap := GetProcAddress(LDllHandle, 'al_convert_bitmap');
  al_convert_mask_to_alpha := GetProcAddress(LDllHandle, 'al_convert_mask_to_alpha');
  al_convert_memory_bitmaps := GetProcAddress(LDllHandle, 'al_convert_memory_bitmaps');
  al_copy_transform := GetProcAddress(LDllHandle, 'al_copy_transform');
  al_create_audio_recorder := GetProcAddress(LDllHandle, 'al_create_audio_recorder');
  al_create_audio_stream := GetProcAddress(LDllHandle, 'al_create_audio_stream');
  al_create_bitmap := GetProcAddress(LDllHandle, 'al_create_bitmap');
  al_create_builtin_font := GetProcAddress(LDllHandle, 'al_create_builtin_font');
  al_create_cond := GetProcAddress(LDllHandle, 'al_create_cond');
  al_create_config := GetProcAddress(LDllHandle, 'al_create_config');
  al_create_display := GetProcAddress(LDllHandle, 'al_create_display');
  al_create_event_queue := GetProcAddress(LDllHandle, 'al_create_event_queue');
  al_create_file_handle := GetProcAddress(LDllHandle, 'al_create_file_handle');
  al_create_fs_entry := GetProcAddress(LDllHandle, 'al_create_fs_entry');
  al_create_index_buffer := GetProcAddress(LDllHandle, 'al_create_index_buffer');
  al_create_menu := GetProcAddress(LDllHandle, 'al_create_menu');
  al_create_mixer := GetProcAddress(LDllHandle, 'al_create_mixer');
  al_create_mouse_cursor := GetProcAddress(LDllHandle, 'al_create_mouse_cursor');
  al_create_mutex := GetProcAddress(LDllHandle, 'al_create_mutex');
  al_create_mutex_recursive := GetProcAddress(LDllHandle, 'al_create_mutex_recursive');
  al_create_native_file_dialog := GetProcAddress(LDllHandle, 'al_create_native_file_dialog');
  al_create_path := GetProcAddress(LDllHandle, 'al_create_path');
  al_create_path_for_directory := GetProcAddress(LDllHandle, 'al_create_path_for_directory');
  al_create_popup_menu := GetProcAddress(LDllHandle, 'al_create_popup_menu');
  al_create_sample := GetProcAddress(LDllHandle, 'al_create_sample');
  al_create_sample_instance := GetProcAddress(LDllHandle, 'al_create_sample_instance');
  al_create_shader := GetProcAddress(LDllHandle, 'al_create_shader');
  al_create_sub_bitmap := GetProcAddress(LDllHandle, 'al_create_sub_bitmap');
  al_create_thread := GetProcAddress(LDllHandle, 'al_create_thread');
  al_create_thread_with_stacksize := GetProcAddress(LDllHandle, 'al_create_thread_with_stacksize');
  al_create_timer := GetProcAddress(LDllHandle, 'al_create_timer');
  al_create_vertex_buffer := GetProcAddress(LDllHandle, 'al_create_vertex_buffer');
  al_create_vertex_decl := GetProcAddress(LDllHandle, 'al_create_vertex_decl');
  al_create_voice := GetProcAddress(LDllHandle, 'al_create_voice');
  al_cstr := GetProcAddress(LDllHandle, 'al_cstr');
  al_cstr_dup := GetProcAddress(LDllHandle, 'al_cstr_dup');
  al_destroy_audio_recorder := GetProcAddress(LDllHandle, 'al_destroy_audio_recorder');
  al_destroy_audio_stream := GetProcAddress(LDllHandle, 'al_destroy_audio_stream');
  al_destroy_bitmap := GetProcAddress(LDllHandle, 'al_destroy_bitmap');
  al_destroy_cond := GetProcAddress(LDllHandle, 'al_destroy_cond');
  al_destroy_config := GetProcAddress(LDllHandle, 'al_destroy_config');
  al_destroy_display := GetProcAddress(LDllHandle, 'al_destroy_display');
  al_destroy_event_queue := GetProcAddress(LDllHandle, 'al_destroy_event_queue');
  al_destroy_font := GetProcAddress(LDllHandle, 'al_destroy_font');
  al_destroy_fs_entry := GetProcAddress(LDllHandle, 'al_destroy_fs_entry');
  al_destroy_index_buffer := GetProcAddress(LDllHandle, 'al_destroy_index_buffer');
  al_destroy_menu := GetProcAddress(LDllHandle, 'al_destroy_menu');
  al_destroy_mixer := GetProcAddress(LDllHandle, 'al_destroy_mixer');
  al_destroy_mouse_cursor := GetProcAddress(LDllHandle, 'al_destroy_mouse_cursor');
  al_destroy_mutex := GetProcAddress(LDllHandle, 'al_destroy_mutex');
  al_destroy_native_file_dialog := GetProcAddress(LDllHandle, 'al_destroy_native_file_dialog');
  al_destroy_path := GetProcAddress(LDllHandle, 'al_destroy_path');
  al_destroy_sample := GetProcAddress(LDllHandle, 'al_destroy_sample');
  al_destroy_sample_instance := GetProcAddress(LDllHandle, 'al_destroy_sample_instance');
  al_destroy_shader := GetProcAddress(LDllHandle, 'al_destroy_shader');
  al_destroy_thread := GetProcAddress(LDllHandle, 'al_destroy_thread');
  al_destroy_timer := GetProcAddress(LDllHandle, 'al_destroy_timer');
  al_destroy_user_event_source := GetProcAddress(LDllHandle, 'al_destroy_user_event_source');
  al_destroy_vertex_buffer := GetProcAddress(LDllHandle, 'al_destroy_vertex_buffer');
  al_destroy_vertex_decl := GetProcAddress(LDllHandle, 'al_destroy_vertex_decl');
  al_destroy_voice := GetProcAddress(LDllHandle, 'al_destroy_voice');
  al_detach_audio_stream := GetProcAddress(LDllHandle, 'al_detach_audio_stream');
  al_detach_mixer := GetProcAddress(LDllHandle, 'al_detach_mixer');
  al_detach_sample_instance := GetProcAddress(LDllHandle, 'al_detach_sample_instance');
  al_detach_voice := GetProcAddress(LDllHandle, 'al_detach_voice');
  al_disable_menu_event_source := GetProcAddress(LDllHandle, 'al_disable_menu_event_source');
  al_do_multiline_text := GetProcAddress(LDllHandle, 'al_do_multiline_text');
  al_do_multiline_ustr := GetProcAddress(LDllHandle, 'al_do_multiline_ustr');
  al_drain_audio_stream := GetProcAddress(LDllHandle, 'al_drain_audio_stream');
  al_draw_arc := GetProcAddress(LDllHandle, 'al_draw_arc');
  al_draw_bitmap := GetProcAddress(LDllHandle, 'al_draw_bitmap');
  al_draw_bitmap_region := GetProcAddress(LDllHandle, 'al_draw_bitmap_region');
  al_draw_circle := GetProcAddress(LDllHandle, 'al_draw_circle');
  al_draw_ellipse := GetProcAddress(LDllHandle, 'al_draw_ellipse');
  al_draw_elliptical_arc := GetProcAddress(LDllHandle, 'al_draw_elliptical_arc');
  al_draw_filled_circle := GetProcAddress(LDllHandle, 'al_draw_filled_circle');
  al_draw_filled_ellipse := GetProcAddress(LDllHandle, 'al_draw_filled_ellipse');
  al_draw_filled_pieslice := GetProcAddress(LDllHandle, 'al_draw_filled_pieslice');
  al_draw_filled_polygon := GetProcAddress(LDllHandle, 'al_draw_filled_polygon');
  al_draw_filled_polygon_with_holes := GetProcAddress(LDllHandle, 'al_draw_filled_polygon_with_holes');
  al_draw_filled_rectangle := GetProcAddress(LDllHandle, 'al_draw_filled_rectangle');
  al_draw_filled_rounded_rectangle := GetProcAddress(LDllHandle, 'al_draw_filled_rounded_rectangle');
  al_draw_filled_triangle := GetProcAddress(LDllHandle, 'al_draw_filled_triangle');
  al_draw_glyph := GetProcAddress(LDllHandle, 'al_draw_glyph');
  al_draw_indexed_buffer := GetProcAddress(LDllHandle, 'al_draw_indexed_buffer');
  al_draw_indexed_prim := GetProcAddress(LDllHandle, 'al_draw_indexed_prim');
  al_draw_justified_text := GetProcAddress(LDllHandle, 'al_draw_justified_text');
  al_draw_justified_textf := GetProcAddress(LDllHandle, 'al_draw_justified_textf');
  al_draw_justified_ustr := GetProcAddress(LDllHandle, 'al_draw_justified_ustr');
  al_draw_line := GetProcAddress(LDllHandle, 'al_draw_line');
  al_draw_multiline_text := GetProcAddress(LDllHandle, 'al_draw_multiline_text');
  al_draw_multiline_textf := GetProcAddress(LDllHandle, 'al_draw_multiline_textf');
  al_draw_multiline_ustr := GetProcAddress(LDllHandle, 'al_draw_multiline_ustr');
  al_draw_pieslice := GetProcAddress(LDllHandle, 'al_draw_pieslice');
  al_draw_pixel := GetProcAddress(LDllHandle, 'al_draw_pixel');
  al_draw_polygon := GetProcAddress(LDllHandle, 'al_draw_polygon');
  al_draw_polyline := GetProcAddress(LDllHandle, 'al_draw_polyline');
  al_draw_prim := GetProcAddress(LDllHandle, 'al_draw_prim');
  al_draw_rectangle := GetProcAddress(LDllHandle, 'al_draw_rectangle');
  al_draw_ribbon := GetProcAddress(LDllHandle, 'al_draw_ribbon');
  al_draw_rotated_bitmap := GetProcAddress(LDllHandle, 'al_draw_rotated_bitmap');
  al_draw_rounded_rectangle := GetProcAddress(LDllHandle, 'al_draw_rounded_rectangle');
  al_draw_scaled_bitmap := GetProcAddress(LDllHandle, 'al_draw_scaled_bitmap');
  al_draw_scaled_rotated_bitmap := GetProcAddress(LDllHandle, 'al_draw_scaled_rotated_bitmap');
  al_draw_soft_line := GetProcAddress(LDllHandle, 'al_draw_soft_line');
  al_draw_soft_triangle := GetProcAddress(LDllHandle, 'al_draw_soft_triangle');
  al_draw_spline := GetProcAddress(LDllHandle, 'al_draw_spline');
  al_draw_text := GetProcAddress(LDllHandle, 'al_draw_text');
  al_draw_textf := GetProcAddress(LDllHandle, 'al_draw_textf');
  al_draw_tinted_bitmap := GetProcAddress(LDllHandle, 'al_draw_tinted_bitmap');
  al_draw_tinted_bitmap_region := GetProcAddress(LDllHandle, 'al_draw_tinted_bitmap_region');
  al_draw_tinted_rotated_bitmap := GetProcAddress(LDllHandle, 'al_draw_tinted_rotated_bitmap');
  al_draw_tinted_scaled_bitmap := GetProcAddress(LDllHandle, 'al_draw_tinted_scaled_bitmap');
  al_draw_tinted_scaled_rotated_bitmap := GetProcAddress(LDllHandle, 'al_draw_tinted_scaled_rotated_bitmap');
  al_draw_tinted_scaled_rotated_bitmap_region := GetProcAddress(LDllHandle, 'al_draw_tinted_scaled_rotated_bitmap_region');
  al_draw_triangle := GetProcAddress(LDllHandle, 'al_draw_triangle');
  al_draw_ustr := GetProcAddress(LDllHandle, 'al_draw_ustr');
  al_draw_vertex_buffer := GetProcAddress(LDllHandle, 'al_draw_vertex_buffer');
  al_drop_next_event := GetProcAddress(LDllHandle, 'al_drop_next_event');
  al_drop_path_tail := GetProcAddress(LDllHandle, 'al_drop_path_tail');
  al_emit_user_event := GetProcAddress(LDllHandle, 'al_emit_user_event');
  al_enable_menu_event_source := GetProcAddress(LDllHandle, 'al_enable_menu_event_source');
  al_fclearerr := GetProcAddress(LDllHandle, 'al_fclearerr');
  al_fclose := GetProcAddress(LDllHandle, 'al_fclose');
  al_feof := GetProcAddress(LDllHandle, 'al_feof');
  al_ferrmsg := GetProcAddress(LDllHandle, 'al_ferrmsg');
  al_ferror := GetProcAddress(LDllHandle, 'al_ferror');
  al_fflush := GetProcAddress(LDllHandle, 'al_fflush');
  al_fget_ustr := GetProcAddress(LDllHandle, 'al_fget_ustr');
  al_fgetc := GetProcAddress(LDllHandle, 'al_fgetc');
  al_fgets := GetProcAddress(LDllHandle, 'al_fgets');
  al_filename_exists := GetProcAddress(LDllHandle, 'al_filename_exists');
  al_fill_silence := GetProcAddress(LDllHandle, 'al_fill_silence');
  al_find_menu := GetProcAddress(LDllHandle, 'al_find_menu');
  al_find_menu_item := GetProcAddress(LDllHandle, 'al_find_menu_item');
  al_fixatan := GetProcAddress(LDllHandle, 'al_fixatan');
  al_fixatan2 := GetProcAddress(LDllHandle, 'al_fixatan2');
  al_fixhypot := GetProcAddress(LDllHandle, 'al_fixhypot');
  al_fixsqrt := GetProcAddress(LDllHandle, 'al_fixsqrt');
  al_flip_display := GetProcAddress(LDllHandle, 'al_flip_display');
  al_flush_event_queue := GetProcAddress(LDllHandle, 'al_flush_event_queue');
  al_fopen := GetProcAddress(LDllHandle, 'al_fopen');
  al_fopen_fd := GetProcAddress(LDllHandle, 'al_fopen_fd');
  al_fopen_interface := GetProcAddress(LDllHandle, 'al_fopen_interface');
  al_fopen_slice := GetProcAddress(LDllHandle, 'al_fopen_slice');
  al_for_each_fs_entry := GetProcAddress(LDllHandle, 'al_for_each_fs_entry');
  al_fprintf := GetProcAddress(LDllHandle, 'al_fprintf');
  al_fputc := GetProcAddress(LDllHandle, 'al_fputc');
  al_fputs := GetProcAddress(LDllHandle, 'al_fputs');
  al_fread := GetProcAddress(LDllHandle, 'al_fread');
  al_fread16be := GetProcAddress(LDllHandle, 'al_fread16be');
  al_fread16le := GetProcAddress(LDllHandle, 'al_fread16le');
  al_fread32be := GetProcAddress(LDllHandle, 'al_fread32be');
  al_fread32le := GetProcAddress(LDllHandle, 'al_fread32le');
  al_free_with_context := GetProcAddress(LDllHandle, 'al_free_with_context');
  al_fs_entry_exists := GetProcAddress(LDllHandle, 'al_fs_entry_exists');
  al_fseek := GetProcAddress(LDllHandle, 'al_fseek');
  al_fsize := GetProcAddress(LDllHandle, 'al_fsize');
  al_ftell := GetProcAddress(LDllHandle, 'al_ftell');
  al_fungetc := GetProcAddress(LDllHandle, 'al_fungetc');
  al_fwrite := GetProcAddress(LDllHandle, 'al_fwrite');
  al_fwrite16be := GetProcAddress(LDllHandle, 'al_fwrite16be');
  al_fwrite16le := GetProcAddress(LDllHandle, 'al_fwrite16le');
  al_fwrite32be := GetProcAddress(LDllHandle, 'al_fwrite32be');
  al_fwrite32le := GetProcAddress(LDllHandle, 'al_fwrite32le');
  al_get_allegro_acodec_version := GetProcAddress(LDllHandle, 'al_get_allegro_acodec_version');
  al_get_allegro_audio_version := GetProcAddress(LDllHandle, 'al_get_allegro_audio_version');
  al_get_allegro_color_version := GetProcAddress(LDllHandle, 'al_get_allegro_color_version');
  al_get_allegro_font_version := GetProcAddress(LDllHandle, 'al_get_allegro_font_version');
  al_get_allegro_image_version := GetProcAddress(LDllHandle, 'al_get_allegro_image_version');
  al_get_allegro_memfile_version := GetProcAddress(LDllHandle, 'al_get_allegro_memfile_version');
  al_get_allegro_native_dialog_version := GetProcAddress(LDllHandle, 'al_get_allegro_native_dialog_version');
  al_get_allegro_physfs_version := GetProcAddress(LDllHandle, 'al_get_allegro_physfs_version');
  al_get_allegro_primitives_version := GetProcAddress(LDllHandle, 'al_get_allegro_primitives_version');
  al_get_allegro_ttf_version := GetProcAddress(LDllHandle, 'al_get_allegro_ttf_version');
  al_get_allegro_version := GetProcAddress(LDllHandle, 'al_get_allegro_version');
  al_get_allegro_video_version := GetProcAddress(LDllHandle, 'al_get_allegro_video_version');
  al_get_app_name := GetProcAddress(LDllHandle, 'al_get_app_name');
  al_get_audio_depth_size := GetProcAddress(LDllHandle, 'al_get_audio_depth_size');
  al_get_audio_device_name := GetProcAddress(LDllHandle, 'al_get_audio_device_name');
  al_get_audio_output_device := GetProcAddress(LDllHandle, 'al_get_audio_output_device');
  al_get_audio_recorder_event := GetProcAddress(LDllHandle, 'al_get_audio_recorder_event');
  al_get_audio_recorder_event_source := GetProcAddress(LDllHandle, 'al_get_audio_recorder_event_source');
  al_get_audio_stream_attached := GetProcAddress(LDllHandle, 'al_get_audio_stream_attached');
  al_get_audio_stream_channels := GetProcAddress(LDllHandle, 'al_get_audio_stream_channels');
  al_get_audio_stream_depth := GetProcAddress(LDllHandle, 'al_get_audio_stream_depth');
  al_get_audio_stream_event_source := GetProcAddress(LDllHandle, 'al_get_audio_stream_event_source');
  al_get_audio_stream_fragment := GetProcAddress(LDllHandle, 'al_get_audio_stream_fragment');
  al_get_audio_stream_fragments := GetProcAddress(LDllHandle, 'al_get_audio_stream_fragments');
  al_get_audio_stream_frequency := GetProcAddress(LDllHandle, 'al_get_audio_stream_frequency');
  al_get_audio_stream_gain := GetProcAddress(LDllHandle, 'al_get_audio_stream_gain');
  al_get_audio_stream_length := GetProcAddress(LDllHandle, 'al_get_audio_stream_length');
  al_get_audio_stream_length_secs := GetProcAddress(LDllHandle, 'al_get_audio_stream_length_secs');
  al_get_audio_stream_pan := GetProcAddress(LDllHandle, 'al_get_audio_stream_pan');
  al_get_audio_stream_played_samples := GetProcAddress(LDllHandle, 'al_get_audio_stream_played_samples');
  al_get_audio_stream_playing := GetProcAddress(LDllHandle, 'al_get_audio_stream_playing');
  al_get_audio_stream_playmode := GetProcAddress(LDllHandle, 'al_get_audio_stream_playmode');
  al_get_audio_stream_position_secs := GetProcAddress(LDllHandle, 'al_get_audio_stream_position_secs');
  al_get_audio_stream_speed := GetProcAddress(LDllHandle, 'al_get_audio_stream_speed');
  al_get_available_audio_stream_fragments := GetProcAddress(LDllHandle, 'al_get_available_audio_stream_fragments');
  al_get_backbuffer := GetProcAddress(LDllHandle, 'al_get_backbuffer');
  al_get_bitmap_blend_color := GetProcAddress(LDllHandle, 'al_get_bitmap_blend_color');
  al_get_bitmap_blender := GetProcAddress(LDllHandle, 'al_get_bitmap_blender');
  al_get_bitmap_depth := GetProcAddress(LDllHandle, 'al_get_bitmap_depth');
  al_get_bitmap_flags := GetProcAddress(LDllHandle, 'al_get_bitmap_flags');
  al_get_bitmap_format := GetProcAddress(LDllHandle, 'al_get_bitmap_format');
  al_get_bitmap_height := GetProcAddress(LDllHandle, 'al_get_bitmap_height');
  al_get_bitmap_samples := GetProcAddress(LDllHandle, 'al_get_bitmap_samples');
  al_get_bitmap_width := GetProcAddress(LDllHandle, 'al_get_bitmap_width');
  al_get_bitmap_x := GetProcAddress(LDllHandle, 'al_get_bitmap_x');
  al_get_bitmap_y := GetProcAddress(LDllHandle, 'al_get_bitmap_y');
  al_get_blend_color := GetProcAddress(LDllHandle, 'al_get_blend_color');
  al_get_blender := GetProcAddress(LDllHandle, 'al_get_blender');
  al_get_channel_count := GetProcAddress(LDllHandle, 'al_get_channel_count');
  al_get_clipboard_text := GetProcAddress(LDllHandle, 'al_get_clipboard_text');
  al_get_clipping_rectangle := GetProcAddress(LDllHandle, 'al_get_clipping_rectangle');
  al_get_config_value := GetProcAddress(LDllHandle, 'al_get_config_value');
  al_get_cpu_count := GetProcAddress(LDllHandle, 'al_get_cpu_count');
  al_get_current_directory := GetProcAddress(LDllHandle, 'al_get_current_directory');
  al_get_current_display := GetProcAddress(LDllHandle, 'al_get_current_display');
  al_get_current_inverse_transform := GetProcAddress(LDllHandle, 'al_get_current_inverse_transform');
  al_get_current_projection_transform := GetProcAddress(LDllHandle, 'al_get_current_projection_transform');
  al_get_current_transform := GetProcAddress(LDllHandle, 'al_get_current_transform');
  al_get_default_menu_event_source := GetProcAddress(LDllHandle, 'al_get_default_menu_event_source');
  al_get_default_mixer := GetProcAddress(LDllHandle, 'al_get_default_mixer');
  al_get_default_shader_source := GetProcAddress(LDllHandle, 'al_get_default_shader_source');
  al_get_default_voice := GetProcAddress(LDllHandle, 'al_get_default_voice');
  al_get_display_event_source := GetProcAddress(LDllHandle, 'al_get_display_event_source');
  al_get_display_flags := GetProcAddress(LDllHandle, 'al_get_display_flags');
  al_get_display_format := GetProcAddress(LDllHandle, 'al_get_display_format');
  al_get_display_height := GetProcAddress(LDllHandle, 'al_get_display_height');
  al_get_display_menu := GetProcAddress(LDllHandle, 'al_get_display_menu');
  al_get_display_mode := GetProcAddress(LDllHandle, 'al_get_display_mode');
  al_get_display_option := GetProcAddress(LDllHandle, 'al_get_display_option');
  al_get_display_orientation := GetProcAddress(LDllHandle, 'al_get_display_orientation');
  al_get_display_refresh_rate := GetProcAddress(LDllHandle, 'al_get_display_refresh_rate');
  al_get_display_width := GetProcAddress(LDllHandle, 'al_get_display_width');
  al_get_errno := GetProcAddress(LDllHandle, 'al_get_errno');
  al_get_event_source_data := GetProcAddress(LDllHandle, 'al_get_event_source_data');
  al_get_fallback_font := GetProcAddress(LDllHandle, 'al_get_fallback_font');
  al_get_file_userdata := GetProcAddress(LDllHandle, 'al_get_file_userdata');
  al_get_first_config_entry := GetProcAddress(LDllHandle, 'al_get_first_config_entry');
  al_get_first_config_section := GetProcAddress(LDllHandle, 'al_get_first_config_section');
  al_get_font_ascent := GetProcAddress(LDllHandle, 'al_get_font_ascent');
  al_get_font_descent := GetProcAddress(LDllHandle, 'al_get_font_descent');
  al_get_font_line_height := GetProcAddress(LDllHandle, 'al_get_font_line_height');
  al_get_font_ranges := GetProcAddress(LDllHandle, 'al_get_font_ranges');
  al_get_fs_entry_atime := GetProcAddress(LDllHandle, 'al_get_fs_entry_atime');
  al_get_fs_entry_ctime := GetProcAddress(LDllHandle, 'al_get_fs_entry_ctime');
  al_get_fs_entry_mode := GetProcAddress(LDllHandle, 'al_get_fs_entry_mode');
  al_get_fs_entry_mtime := GetProcAddress(LDllHandle, 'al_get_fs_entry_mtime');
  al_get_fs_entry_name := GetProcAddress(LDllHandle, 'al_get_fs_entry_name');
  al_get_fs_entry_size := GetProcAddress(LDllHandle, 'al_get_fs_entry_size');
  al_get_fs_interface := GetProcAddress(LDllHandle, 'al_get_fs_interface');
  al_get_glyph := GetProcAddress(LDllHandle, 'al_get_glyph');
  al_get_glyph_advance := GetProcAddress(LDllHandle, 'al_get_glyph_advance');
  al_get_glyph_dimensions := GetProcAddress(LDllHandle, 'al_get_glyph_dimensions');
  al_get_glyph_width := GetProcAddress(LDllHandle, 'al_get_glyph_width');
  al_get_haptic_autocenter := GetProcAddress(LDllHandle, 'al_get_haptic_autocenter');
  al_get_haptic_capabilities := GetProcAddress(LDllHandle, 'al_get_haptic_capabilities');
  al_get_haptic_effect_duration := GetProcAddress(LDllHandle, 'al_get_haptic_effect_duration');
  al_get_haptic_from_display := GetProcAddress(LDllHandle, 'al_get_haptic_from_display');
  al_get_haptic_from_joystick := GetProcAddress(LDllHandle, 'al_get_haptic_from_joystick');
  al_get_haptic_from_keyboard := GetProcAddress(LDllHandle, 'al_get_haptic_from_keyboard');
  al_get_haptic_from_mouse := GetProcAddress(LDllHandle, 'al_get_haptic_from_mouse');
  al_get_haptic_from_touch_input := GetProcAddress(LDllHandle, 'al_get_haptic_from_touch_input');
  al_get_haptic_gain := GetProcAddress(LDllHandle, 'al_get_haptic_gain');
  al_get_index_buffer_size := GetProcAddress(LDllHandle, 'al_get_index_buffer_size');
  al_get_joystick := GetProcAddress(LDllHandle, 'al_get_joystick');
  al_get_joystick_active := GetProcAddress(LDllHandle, 'al_get_joystick_active');
  al_get_joystick_axis_name := GetProcAddress(LDllHandle, 'al_get_joystick_axis_name');
  al_get_joystick_button_name := GetProcAddress(LDllHandle, 'al_get_joystick_button_name');
  al_get_joystick_event_source := GetProcAddress(LDllHandle, 'al_get_joystick_event_source');
  al_get_joystick_name := GetProcAddress(LDllHandle, 'al_get_joystick_name');
  al_get_joystick_num_axes := GetProcAddress(LDllHandle, 'al_get_joystick_num_axes');
  al_get_joystick_num_buttons := GetProcAddress(LDllHandle, 'al_get_joystick_num_buttons');
  al_get_joystick_num_sticks := GetProcAddress(LDllHandle, 'al_get_joystick_num_sticks');
  al_get_joystick_state := GetProcAddress(LDllHandle, 'al_get_joystick_state');
  al_get_joystick_stick_flags := GetProcAddress(LDllHandle, 'al_get_joystick_stick_flags');
  al_get_joystick_stick_name := GetProcAddress(LDllHandle, 'al_get_joystick_stick_name');
  al_get_keyboard_event_source := GetProcAddress(LDllHandle, 'al_get_keyboard_event_source');
  al_get_keyboard_state := GetProcAddress(LDllHandle, 'al_get_keyboard_state');
  al_get_max_haptic_effects := GetProcAddress(LDllHandle, 'al_get_max_haptic_effects');
  al_get_menu_item_caption := GetProcAddress(LDllHandle, 'al_get_menu_item_caption');
  al_get_menu_item_flags := GetProcAddress(LDllHandle, 'al_get_menu_item_flags');
  al_get_menu_item_icon := GetProcAddress(LDllHandle, 'al_get_menu_item_icon');
  al_get_mixer_attached := GetProcAddress(LDllHandle, 'al_get_mixer_attached');
  al_get_mixer_channels := GetProcAddress(LDllHandle, 'al_get_mixer_channels');
  al_get_mixer_depth := GetProcAddress(LDllHandle, 'al_get_mixer_depth');
  al_get_mixer_frequency := GetProcAddress(LDllHandle, 'al_get_mixer_frequency');
  al_get_mixer_gain := GetProcAddress(LDllHandle, 'al_get_mixer_gain');
  al_get_mixer_playing := GetProcAddress(LDllHandle, 'al_get_mixer_playing');
  al_get_mixer_quality := GetProcAddress(LDllHandle, 'al_get_mixer_quality');
  al_get_monitor_dpi := GetProcAddress(LDllHandle, 'al_get_monitor_dpi');
  al_get_monitor_info := GetProcAddress(LDllHandle, 'al_get_monitor_info');
  al_get_monitor_refresh_rate := GetProcAddress(LDllHandle, 'al_get_monitor_refresh_rate');
  al_get_mouse_cursor_position := GetProcAddress(LDllHandle, 'al_get_mouse_cursor_position');
  al_get_mouse_emulation_mode := GetProcAddress(LDllHandle, 'al_get_mouse_emulation_mode');
  al_get_mouse_event_source := GetProcAddress(LDllHandle, 'al_get_mouse_event_source');
  al_get_mouse_num_axes := GetProcAddress(LDllHandle, 'al_get_mouse_num_axes');
  al_get_mouse_num_buttons := GetProcAddress(LDllHandle, 'al_get_mouse_num_buttons');
  al_get_mouse_state := GetProcAddress(LDllHandle, 'al_get_mouse_state');
  al_get_mouse_state_axis := GetProcAddress(LDllHandle, 'al_get_mouse_state_axis');
  al_get_mouse_wheel_precision := GetProcAddress(LDllHandle, 'al_get_mouse_wheel_precision');
  al_get_native_file_dialog_count := GetProcAddress(LDllHandle, 'al_get_native_file_dialog_count');
  al_get_native_file_dialog_path := GetProcAddress(LDllHandle, 'al_get_native_file_dialog_path');
  al_get_native_text_log_event_source := GetProcAddress(LDllHandle, 'al_get_native_text_log_event_source');
  al_get_new_bitmap_depth := GetProcAddress(LDllHandle, 'al_get_new_bitmap_depth');
  al_get_new_bitmap_flags := GetProcAddress(LDllHandle, 'al_get_new_bitmap_flags');
  al_get_new_bitmap_format := GetProcAddress(LDllHandle, 'al_get_new_bitmap_format');
  al_get_new_bitmap_samples := GetProcAddress(LDllHandle, 'al_get_new_bitmap_samples');
  al_get_new_display_adapter := GetProcAddress(LDllHandle, 'al_get_new_display_adapter');
  al_get_new_display_flags := GetProcAddress(LDllHandle, 'al_get_new_display_flags');
  al_get_new_display_option := GetProcAddress(LDllHandle, 'al_get_new_display_option');
  al_get_new_display_refresh_rate := GetProcAddress(LDllHandle, 'al_get_new_display_refresh_rate');
  al_get_new_file_interface := GetProcAddress(LDllHandle, 'al_get_new_file_interface');
  al_get_new_window_position := GetProcAddress(LDllHandle, 'al_get_new_window_position');
  al_get_new_window_title := GetProcAddress(LDllHandle, 'al_get_new_window_title');
  al_get_next_config_entry := GetProcAddress(LDllHandle, 'al_get_next_config_entry');
  al_get_next_config_section := GetProcAddress(LDllHandle, 'al_get_next_config_section');
  al_get_next_event := GetProcAddress(LDllHandle, 'al_get_next_event');
  al_get_num_audio_output_devices := GetProcAddress(LDllHandle, 'al_get_num_audio_output_devices');
  al_get_num_display_modes := GetProcAddress(LDllHandle, 'al_get_num_display_modes');
  al_get_num_joysticks := GetProcAddress(LDllHandle, 'al_get_num_joysticks');
  al_get_num_video_adapters := GetProcAddress(LDllHandle, 'al_get_num_video_adapters');
  al_get_org_name := GetProcAddress(LDllHandle, 'al_get_org_name');
  al_get_parent_bitmap := GetProcAddress(LDllHandle, 'al_get_parent_bitmap');
  al_get_path_basename := GetProcAddress(LDllHandle, 'al_get_path_basename');
  al_get_path_component := GetProcAddress(LDllHandle, 'al_get_path_component');
  al_get_path_drive := GetProcAddress(LDllHandle, 'al_get_path_drive');
  al_get_path_extension := GetProcAddress(LDllHandle, 'al_get_path_extension');
  al_get_path_filename := GetProcAddress(LDllHandle, 'al_get_path_filename');
  al_get_path_num_components := GetProcAddress(LDllHandle, 'al_get_path_num_components');
  al_get_path_tail := GetProcAddress(LDllHandle, 'al_get_path_tail');
  al_get_pixel := GetProcAddress(LDllHandle, 'al_get_pixel');
  al_get_pixel_block_height := GetProcAddress(LDllHandle, 'al_get_pixel_block_height');
  al_get_pixel_block_size := GetProcAddress(LDllHandle, 'al_get_pixel_block_size');
  al_get_pixel_block_width := GetProcAddress(LDllHandle, 'al_get_pixel_block_width');
  al_get_pixel_format_bits := GetProcAddress(LDllHandle, 'al_get_pixel_format_bits');
  al_get_pixel_size := GetProcAddress(LDllHandle, 'al_get_pixel_size');
  al_get_ram_size := GetProcAddress(LDllHandle, 'al_get_ram_size');
  al_get_sample := GetProcAddress(LDllHandle, 'al_get_sample');
  al_get_sample_channels := GetProcAddress(LDllHandle, 'al_get_sample_channels');
  al_get_sample_data := GetProcAddress(LDllHandle, 'al_get_sample_data');
  al_get_sample_depth := GetProcAddress(LDllHandle, 'al_get_sample_depth');
  al_get_sample_frequency := GetProcAddress(LDllHandle, 'al_get_sample_frequency');
  al_get_sample_instance_attached := GetProcAddress(LDllHandle, 'al_get_sample_instance_attached');
  al_get_sample_instance_channels := GetProcAddress(LDllHandle, 'al_get_sample_instance_channels');
  al_get_sample_instance_depth := GetProcAddress(LDllHandle, 'al_get_sample_instance_depth');
  al_get_sample_instance_frequency := GetProcAddress(LDllHandle, 'al_get_sample_instance_frequency');
  al_get_sample_instance_gain := GetProcAddress(LDllHandle, 'al_get_sample_instance_gain');
  al_get_sample_instance_length := GetProcAddress(LDllHandle, 'al_get_sample_instance_length');
  al_get_sample_instance_pan := GetProcAddress(LDllHandle, 'al_get_sample_instance_pan');
  al_get_sample_instance_playing := GetProcAddress(LDllHandle, 'al_get_sample_instance_playing');
  al_get_sample_instance_playmode := GetProcAddress(LDllHandle, 'al_get_sample_instance_playmode');
  al_get_sample_instance_position := GetProcAddress(LDllHandle, 'al_get_sample_instance_position');
  al_get_sample_instance_speed := GetProcAddress(LDllHandle, 'al_get_sample_instance_speed');
  al_get_sample_instance_time := GetProcAddress(LDllHandle, 'al_get_sample_instance_time');
  al_get_sample_length := GetProcAddress(LDllHandle, 'al_get_sample_length');
  al_get_separate_bitmap_blender := GetProcAddress(LDllHandle, 'al_get_separate_bitmap_blender');
  al_get_separate_blender := GetProcAddress(LDllHandle, 'al_get_separate_blender');
  al_get_shader_log := GetProcAddress(LDllHandle, 'al_get_shader_log');
  al_get_shader_platform := GetProcAddress(LDllHandle, 'al_get_shader_platform');
  al_get_standard_path := GetProcAddress(LDllHandle, 'al_get_standard_path');
  al_get_system_config := GetProcAddress(LDllHandle, 'al_get_system_config');
  al_get_system_driver := GetProcAddress(LDllHandle, 'al_get_system_driver');
  al_get_system_id := GetProcAddress(LDllHandle, 'al_get_system_id');
  al_get_target_bitmap := GetProcAddress(LDllHandle, 'al_get_target_bitmap');
  al_get_text_dimensions := GetProcAddress(LDllHandle, 'al_get_text_dimensions');
  al_get_text_width := GetProcAddress(LDllHandle, 'al_get_text_width');
  al_get_thread_should_stop := GetProcAddress(LDllHandle, 'al_get_thread_should_stop');
  al_get_time := GetProcAddress(LDllHandle, 'al_get_time');
  al_get_timer_count := GetProcAddress(LDllHandle, 'al_get_timer_count');
  al_get_timer_event_source := GetProcAddress(LDllHandle, 'al_get_timer_event_source');
  al_get_timer_speed := GetProcAddress(LDllHandle, 'al_get_timer_speed');
  al_get_timer_started := GetProcAddress(LDllHandle, 'al_get_timer_started');
  al_get_touch_input_event_source := GetProcAddress(LDllHandle, 'al_get_touch_input_event_source');
  al_get_touch_input_mouse_emulation_event_source := GetProcAddress(LDllHandle, 'al_get_touch_input_mouse_emulation_event_source');
  al_get_touch_input_state := GetProcAddress(LDllHandle, 'al_get_touch_input_state');
  al_get_ustr_dimensions := GetProcAddress(LDllHandle, 'al_get_ustr_dimensions');
  al_get_ustr_width := GetProcAddress(LDllHandle, 'al_get_ustr_width');
  al_get_vertex_buffer_size := GetProcAddress(LDllHandle, 'al_get_vertex_buffer_size');
  al_get_video_audio_rate := GetProcAddress(LDllHandle, 'al_get_video_audio_rate');
  al_get_video_event_source := GetProcAddress(LDllHandle, 'al_get_video_event_source');
  al_get_video_fps := GetProcAddress(LDllHandle, 'al_get_video_fps');
  al_get_video_frame := GetProcAddress(LDllHandle, 'al_get_video_frame');
  al_get_video_position := GetProcAddress(LDllHandle, 'al_get_video_position');
  al_get_video_scaled_height := GetProcAddress(LDllHandle, 'al_get_video_scaled_height');
  al_get_video_scaled_width := GetProcAddress(LDllHandle, 'al_get_video_scaled_width');
  al_get_voice_channels := GetProcAddress(LDllHandle, 'al_get_voice_channels');
  al_get_voice_depth := GetProcAddress(LDllHandle, 'al_get_voice_depth');
  al_get_voice_frequency := GetProcAddress(LDllHandle, 'al_get_voice_frequency');
  al_get_voice_playing := GetProcAddress(LDllHandle, 'al_get_voice_playing');
  al_get_voice_position := GetProcAddress(LDllHandle, 'al_get_voice_position');
  al_get_win_window_handle := GetProcAddress(LDllHandle, 'al_get_win_window_handle');
  al_get_window_constraints := GetProcAddress(LDllHandle, 'al_get_window_constraints');
  al_get_window_position := GetProcAddress(LDllHandle, 'al_get_window_position');
  al_grab_font_from_bitmap := GetProcAddress(LDllHandle, 'al_grab_font_from_bitmap');
  al_grab_mouse := GetProcAddress(LDllHandle, 'al_grab_mouse');
  al_hide_mouse_cursor := GetProcAddress(LDllHandle, 'al_hide_mouse_cursor');
  al_hold_bitmap_drawing := GetProcAddress(LDllHandle, 'al_hold_bitmap_drawing');
  al_horizontal_shear_transform := GetProcAddress(LDllHandle, 'al_horizontal_shear_transform');
  al_identify_bitmap := GetProcAddress(LDllHandle, 'al_identify_bitmap');
  al_identify_bitmap_f := GetProcAddress(LDllHandle, 'al_identify_bitmap_f');
  al_identify_sample := GetProcAddress(LDllHandle, 'al_identify_sample');
  al_identify_sample_f := GetProcAddress(LDllHandle, 'al_identify_sample_f');
  al_identify_video := GetProcAddress(LDllHandle, 'al_identify_video');
  al_identify_video_f := GetProcAddress(LDllHandle, 'al_identify_video_f');
  al_identity_transform := GetProcAddress(LDllHandle, 'al_identity_transform');
  al_inhibit_screensaver := GetProcAddress(LDllHandle, 'al_inhibit_screensaver');
  al_init_acodec_addon := GetProcAddress(LDllHandle, 'al_init_acodec_addon');
  al_init_font_addon := GetProcAddress(LDllHandle, 'al_init_font_addon');
  al_init_image_addon := GetProcAddress(LDllHandle, 'al_init_image_addon');
  al_init_native_dialog_addon := GetProcAddress(LDllHandle, 'al_init_native_dialog_addon');
  al_init_primitives_addon := GetProcAddress(LDllHandle, 'al_init_primitives_addon');
  al_init_timeout := GetProcAddress(LDllHandle, 'al_init_timeout');
  al_init_ttf_addon := GetProcAddress(LDllHandle, 'al_init_ttf_addon');
  al_init_user_event_source := GetProcAddress(LDllHandle, 'al_init_user_event_source');
  al_init_video_addon := GetProcAddress(LDllHandle, 'al_init_video_addon');
  al_insert_menu_item := GetProcAddress(LDllHandle, 'al_insert_menu_item');
  al_insert_path_component := GetProcAddress(LDllHandle, 'al_insert_path_component');
  al_install_audio := GetProcAddress(LDllHandle, 'al_install_audio');
  al_install_haptic := GetProcAddress(LDllHandle, 'al_install_haptic');
  al_install_joystick := GetProcAddress(LDllHandle, 'al_install_joystick');
  al_install_keyboard := GetProcAddress(LDllHandle, 'al_install_keyboard');
  al_install_mouse := GetProcAddress(LDllHandle, 'al_install_mouse');
  al_install_system := GetProcAddress(LDllHandle, 'al_install_system');
  al_install_touch_input := GetProcAddress(LDllHandle, 'al_install_touch_input');
  al_invert_transform := GetProcAddress(LDllHandle, 'al_invert_transform');
  al_is_acodec_addon_initialized := GetProcAddress(LDllHandle, 'al_is_acodec_addon_initialized');
  al_is_audio_installed := GetProcAddress(LDllHandle, 'al_is_audio_installed');
  al_is_audio_recorder_recording := GetProcAddress(LDllHandle, 'al_is_audio_recorder_recording');
  al_is_bitmap_drawing_held := GetProcAddress(LDllHandle, 'al_is_bitmap_drawing_held');
  al_is_bitmap_locked := GetProcAddress(LDllHandle, 'al_is_bitmap_locked');
  al_is_color_valid := GetProcAddress(LDllHandle, 'al_is_color_valid');
  al_is_compatible_bitmap := GetProcAddress(LDllHandle, 'al_is_compatible_bitmap');
  al_is_display_haptic := GetProcAddress(LDllHandle, 'al_is_display_haptic');
  al_is_event_queue_empty := GetProcAddress(LDllHandle, 'al_is_event_queue_empty');
  al_is_event_queue_paused := GetProcAddress(LDllHandle, 'al_is_event_queue_paused');
  al_is_event_source_registered := GetProcAddress(LDllHandle, 'al_is_event_source_registered');
  al_is_font_addon_initialized := GetProcAddress(LDllHandle, 'al_is_font_addon_initialized');
  al_is_haptic_active := GetProcAddress(LDllHandle, 'al_is_haptic_active');
  al_is_haptic_capable := GetProcAddress(LDllHandle, 'al_is_haptic_capable');
  al_is_haptic_effect_ok := GetProcAddress(LDllHandle, 'al_is_haptic_effect_ok');
  al_is_haptic_effect_playing := GetProcAddress(LDllHandle, 'al_is_haptic_effect_playing');
  al_is_haptic_installed := GetProcAddress(LDllHandle, 'al_is_haptic_installed');
  al_is_image_addon_initialized := GetProcAddress(LDllHandle, 'al_is_image_addon_initialized');
  al_is_joystick_haptic := GetProcAddress(LDllHandle, 'al_is_joystick_haptic');
  al_is_joystick_installed := GetProcAddress(LDllHandle, 'al_is_joystick_installed');
  al_is_keyboard_haptic := GetProcAddress(LDllHandle, 'al_is_keyboard_haptic');
  al_is_keyboard_installed := GetProcAddress(LDllHandle, 'al_is_keyboard_installed');
  al_is_mouse_haptic := GetProcAddress(LDllHandle, 'al_is_mouse_haptic');
  al_is_mouse_installed := GetProcAddress(LDllHandle, 'al_is_mouse_installed');
  al_is_native_dialog_addon_initialized := GetProcAddress(LDllHandle, 'al_is_native_dialog_addon_initialized');
  al_is_primitives_addon_initialized := GetProcAddress(LDllHandle, 'al_is_primitives_addon_initialized');
  al_is_sub_bitmap := GetProcAddress(LDllHandle, 'al_is_sub_bitmap');
  al_is_system_installed := GetProcAddress(LDllHandle, 'al_is_system_installed');
  al_is_touch_input_haptic := GetProcAddress(LDllHandle, 'al_is_touch_input_haptic');
  al_is_touch_input_installed := GetProcAddress(LDllHandle, 'al_is_touch_input_installed');
  al_is_ttf_addon_initialized := GetProcAddress(LDllHandle, 'al_is_ttf_addon_initialized');
  al_is_video_addon_initialized := GetProcAddress(LDllHandle, 'al_is_video_addon_initialized');
  al_is_video_playing := GetProcAddress(LDllHandle, 'al_is_video_playing');
  al_join_paths := GetProcAddress(LDllHandle, 'al_join_paths');
  al_join_thread := GetProcAddress(LDllHandle, 'al_join_thread');
  al_key_down := GetProcAddress(LDllHandle, 'al_key_down');
  al_keycode_to_name := GetProcAddress(LDllHandle, 'al_keycode_to_name');
  al_load_audio_stream := GetProcAddress(LDllHandle, 'al_load_audio_stream');
  al_load_audio_stream_f := GetProcAddress(LDllHandle, 'al_load_audio_stream_f');
  al_load_bitmap := GetProcAddress(LDllHandle, 'al_load_bitmap');
  al_load_bitmap_f := GetProcAddress(LDllHandle, 'al_load_bitmap_f');
  al_load_bitmap_flags := GetProcAddress(LDllHandle, 'al_load_bitmap_flags');
  al_load_bitmap_flags_f := GetProcAddress(LDllHandle, 'al_load_bitmap_flags_f');
  al_load_bitmap_font := GetProcAddress(LDllHandle, 'al_load_bitmap_font');
  al_load_bitmap_font_flags := GetProcAddress(LDllHandle, 'al_load_bitmap_font_flags');
  al_load_config_file := GetProcAddress(LDllHandle, 'al_load_config_file');
  al_load_config_file_f := GetProcAddress(LDllHandle, 'al_load_config_file_f');
  al_load_font := GetProcAddress(LDllHandle, 'al_load_font');
  al_load_sample := GetProcAddress(LDllHandle, 'al_load_sample');
  al_load_sample_f := GetProcAddress(LDllHandle, 'al_load_sample_f');
  al_load_ttf_font := GetProcAddress(LDllHandle, 'al_load_ttf_font');
  al_load_ttf_font_f := GetProcAddress(LDllHandle, 'al_load_ttf_font_f');
  al_load_ttf_font_stretch := GetProcAddress(LDllHandle, 'al_load_ttf_font_stretch');
  al_load_ttf_font_stretch_f := GetProcAddress(LDllHandle, 'al_load_ttf_font_stretch_f');
  al_lock_bitmap := GetProcAddress(LDllHandle, 'al_lock_bitmap');
  al_lock_bitmap_blocked := GetProcAddress(LDllHandle, 'al_lock_bitmap_blocked');
  al_lock_bitmap_region := GetProcAddress(LDllHandle, 'al_lock_bitmap_region');
  al_lock_bitmap_region_blocked := GetProcAddress(LDllHandle, 'al_lock_bitmap_region_blocked');
  al_lock_index_buffer := GetProcAddress(LDllHandle, 'al_lock_index_buffer');
  al_lock_mutex := GetProcAddress(LDllHandle, 'al_lock_mutex');
  al_lock_sample_id := GetProcAddress(LDllHandle, 'al_lock_sample_id');
  al_lock_vertex_buffer := GetProcAddress(LDllHandle, 'al_lock_vertex_buffer');
  al_make_directory := GetProcAddress(LDllHandle, 'al_make_directory');
  al_make_path_canonical := GetProcAddress(LDllHandle, 'al_make_path_canonical');
  al_make_temp_file := GetProcAddress(LDllHandle, 'al_make_temp_file');
  al_malloc_with_context := GetProcAddress(LDllHandle, 'al_malloc_with_context');
  al_map_rgb := GetProcAddress(LDllHandle, 'al_map_rgb');
  al_map_rgb_f := GetProcAddress(LDllHandle, 'al_map_rgb_f');
  al_map_rgba := GetProcAddress(LDllHandle, 'al_map_rgba');
  al_map_rgba_f := GetProcAddress(LDllHandle, 'al_map_rgba_f');
  al_merge_config := GetProcAddress(LDllHandle, 'al_merge_config');
  al_merge_config_into := GetProcAddress(LDllHandle, 'al_merge_config_into');
  al_mouse_button_down := GetProcAddress(LDllHandle, 'al_mouse_button_down');
  al_open_directory := GetProcAddress(LDllHandle, 'al_open_directory');
  al_open_fs_entry := GetProcAddress(LDllHandle, 'al_open_fs_entry');
  al_open_memfile := GetProcAddress(LDllHandle, 'al_open_memfile');
  al_open_native_text_log := GetProcAddress(LDllHandle, 'al_open_native_text_log');
  al_open_video := GetProcAddress(LDllHandle, 'al_open_video');
  al_orthographic_transform := GetProcAddress(LDllHandle, 'al_orthographic_transform');
  al_path_cstr := GetProcAddress(LDllHandle, 'al_path_cstr');
  al_path_ustr := GetProcAddress(LDllHandle, 'al_path_ustr');
  al_pause_event_queue := GetProcAddress(LDllHandle, 'al_pause_event_queue');
  al_peek_next_event := GetProcAddress(LDllHandle, 'al_peek_next_event');
  al_perspective_transform := GetProcAddress(LDllHandle, 'al_perspective_transform');
  al_play_haptic_effect := GetProcAddress(LDllHandle, 'al_play_haptic_effect');
  al_play_sample := GetProcAddress(LDllHandle, 'al_play_sample');
  al_play_sample_instance := GetProcAddress(LDllHandle, 'al_play_sample_instance');
  al_popup_menu := GetProcAddress(LDllHandle, 'al_popup_menu');
  al_premul_rgba := GetProcAddress(LDllHandle, 'al_premul_rgba');
  al_premul_rgba_f := GetProcAddress(LDllHandle, 'al_premul_rgba_f');
  al_put_blended_pixel := GetProcAddress(LDllHandle, 'al_put_blended_pixel');
  al_put_pixel := GetProcAddress(LDllHandle, 'al_put_pixel');
  al_read_directory := GetProcAddress(LDllHandle, 'al_read_directory');
  al_realloc_with_context := GetProcAddress(LDllHandle, 'al_realloc_with_context');
  al_rebase_path := GetProcAddress(LDllHandle, 'al_rebase_path');
  al_reconfigure_joysticks := GetProcAddress(LDllHandle, 'al_reconfigure_joysticks');
  al_ref_buffer := GetProcAddress(LDllHandle, 'al_ref_buffer');
  al_ref_cstr := GetProcAddress(LDllHandle, 'al_ref_cstr');
  al_ref_ustr := GetProcAddress(LDllHandle, 'al_ref_ustr');
  al_register_assert_handler := GetProcAddress(LDllHandle, 'al_register_assert_handler');
  al_register_audio_stream_loader := GetProcAddress(LDllHandle, 'al_register_audio_stream_loader');
  al_register_audio_stream_loader_f := GetProcAddress(LDllHandle, 'al_register_audio_stream_loader_f');
  al_register_bitmap_identifier := GetProcAddress(LDllHandle, 'al_register_bitmap_identifier');
  al_register_bitmap_loader := GetProcAddress(LDllHandle, 'al_register_bitmap_loader');
  al_register_bitmap_loader_f := GetProcAddress(LDllHandle, 'al_register_bitmap_loader_f');
  al_register_bitmap_saver := GetProcAddress(LDllHandle, 'al_register_bitmap_saver');
  al_register_bitmap_saver_f := GetProcAddress(LDllHandle, 'al_register_bitmap_saver_f');
  al_register_event_source := GetProcAddress(LDllHandle, 'al_register_event_source');
  al_register_font_loader := GetProcAddress(LDllHandle, 'al_register_font_loader');
  al_register_sample_identifier := GetProcAddress(LDllHandle, 'al_register_sample_identifier');
  al_register_sample_loader := GetProcAddress(LDllHandle, 'al_register_sample_loader');
  al_register_sample_loader_f := GetProcAddress(LDllHandle, 'al_register_sample_loader_f');
  al_register_sample_saver := GetProcAddress(LDllHandle, 'al_register_sample_saver');
  al_register_sample_saver_f := GetProcAddress(LDllHandle, 'al_register_sample_saver_f');
  al_register_trace_handler := GetProcAddress(LDllHandle, 'al_register_trace_handler');
  al_release_haptic := GetProcAddress(LDllHandle, 'al_release_haptic');
  al_release_haptic_effect := GetProcAddress(LDllHandle, 'al_release_haptic_effect');
  al_release_joystick := GetProcAddress(LDllHandle, 'al_release_joystick');
  al_remove_config_key := GetProcAddress(LDllHandle, 'al_remove_config_key');
  al_remove_config_section := GetProcAddress(LDllHandle, 'al_remove_config_section');
  al_remove_display_menu := GetProcAddress(LDllHandle, 'al_remove_display_menu');
  al_remove_filename := GetProcAddress(LDllHandle, 'al_remove_filename');
  al_remove_fs_entry := GetProcAddress(LDllHandle, 'al_remove_fs_entry');
  al_remove_menu_item := GetProcAddress(LDllHandle, 'al_remove_menu_item');
  al_remove_path_component := GetProcAddress(LDllHandle, 'al_remove_path_component');
  al_reparent_bitmap := GetProcAddress(LDllHandle, 'al_reparent_bitmap');
  al_replace_path_component := GetProcAddress(LDllHandle, 'al_replace_path_component');
  al_reserve_samples := GetProcAddress(LDllHandle, 'al_reserve_samples');
  al_reset_bitmap_blender := GetProcAddress(LDllHandle, 'al_reset_bitmap_blender');
  al_reset_clipping_rectangle := GetProcAddress(LDllHandle, 'al_reset_clipping_rectangle');
  al_reset_new_display_options := GetProcAddress(LDllHandle, 'al_reset_new_display_options');
  al_resize_display := GetProcAddress(LDllHandle, 'al_resize_display');
  al_rest := GetProcAddress(LDllHandle, 'al_rest');
  al_restore_default_mixer := GetProcAddress(LDllHandle, 'al_restore_default_mixer');
  al_restore_state := GetProcAddress(LDllHandle, 'al_restore_state');
  al_resume_timer := GetProcAddress(LDllHandle, 'al_resume_timer');
  al_rewind_audio_stream := GetProcAddress(LDllHandle, 'al_rewind_audio_stream');
  al_rotate_transform := GetProcAddress(LDllHandle, 'al_rotate_transform');
  al_rotate_transform_3d := GetProcAddress(LDllHandle, 'al_rotate_transform_3d');
  al_rumble_haptic := GetProcAddress(LDllHandle, 'al_rumble_haptic');
  al_run_detached_thread := GetProcAddress(LDllHandle, 'al_run_detached_thread');
  al_save_bitmap := GetProcAddress(LDllHandle, 'al_save_bitmap');
  al_save_bitmap_f := GetProcAddress(LDllHandle, 'al_save_bitmap_f');
  al_save_config_file := GetProcAddress(LDllHandle, 'al_save_config_file');
  al_save_config_file_f := GetProcAddress(LDllHandle, 'al_save_config_file_f');
  al_save_sample := GetProcAddress(LDllHandle, 'al_save_sample');
  al_save_sample_f := GetProcAddress(LDllHandle, 'al_save_sample_f');
  al_scale_transform := GetProcAddress(LDllHandle, 'al_scale_transform');
  al_scale_transform_3d := GetProcAddress(LDllHandle, 'al_scale_transform_3d');
  al_seek_audio_stream_secs := GetProcAddress(LDllHandle, 'al_seek_audio_stream_secs');
  al_seek_video := GetProcAddress(LDllHandle, 'al_seek_video');
  al_set_app_name := GetProcAddress(LDllHandle, 'al_set_app_name');
  al_set_audio_stream_channel_matrix := GetProcAddress(LDllHandle, 'al_set_audio_stream_channel_matrix');
  al_set_audio_stream_fragment := GetProcAddress(LDllHandle, 'al_set_audio_stream_fragment');
  al_set_audio_stream_gain := GetProcAddress(LDllHandle, 'al_set_audio_stream_gain');
  al_set_audio_stream_loop_secs := GetProcAddress(LDllHandle, 'al_set_audio_stream_loop_secs');
  al_set_audio_stream_pan := GetProcAddress(LDllHandle, 'al_set_audio_stream_pan');
  al_set_audio_stream_playing := GetProcAddress(LDllHandle, 'al_set_audio_stream_playing');
  al_set_audio_stream_playmode := GetProcAddress(LDllHandle, 'al_set_audio_stream_playmode');
  al_set_audio_stream_speed := GetProcAddress(LDllHandle, 'al_set_audio_stream_speed');
  al_set_bitmap_blend_color := GetProcAddress(LDllHandle, 'al_set_bitmap_blend_color');
  al_set_bitmap_blender := GetProcAddress(LDllHandle, 'al_set_bitmap_blender');
  al_set_blend_color := GetProcAddress(LDllHandle, 'al_set_blend_color');
  al_set_blender := GetProcAddress(LDllHandle, 'al_set_blender');
  al_set_clipboard_text := GetProcAddress(LDllHandle, 'al_set_clipboard_text');
  al_set_clipping_rectangle := GetProcAddress(LDllHandle, 'al_set_clipping_rectangle');
  al_set_config_value := GetProcAddress(LDllHandle, 'al_set_config_value');
  al_set_default_mixer := GetProcAddress(LDllHandle, 'al_set_default_mixer');
  al_set_default_voice := GetProcAddress(LDllHandle, 'al_set_default_voice');
  al_set_display_flag := GetProcAddress(LDllHandle, 'al_set_display_flag');
  al_set_display_icon := GetProcAddress(LDllHandle, 'al_set_display_icon');
  al_set_display_icons := GetProcAddress(LDllHandle, 'al_set_display_icons');
  al_set_display_menu := GetProcAddress(LDllHandle, 'al_set_display_menu');
  al_set_display_option := GetProcAddress(LDllHandle, 'al_set_display_option');
  al_set_errno := GetProcAddress(LDllHandle, 'al_set_errno');
  al_set_event_source_data := GetProcAddress(LDllHandle, 'al_set_event_source_data');
  al_set_exe_name := GetProcAddress(LDllHandle, 'al_set_exe_name');
  al_set_fallback_font := GetProcAddress(LDllHandle, 'al_set_fallback_font');
  al_set_fs_interface := GetProcAddress(LDllHandle, 'al_set_fs_interface');
  al_set_haptic_autocenter := GetProcAddress(LDllHandle, 'al_set_haptic_autocenter');
  al_set_haptic_gain := GetProcAddress(LDllHandle, 'al_set_haptic_gain');
  al_set_keyboard_leds := GetProcAddress(LDllHandle, 'al_set_keyboard_leds');
  al_set_memory_interface := GetProcAddress(LDllHandle, 'al_set_memory_interface');
  al_set_menu_item_caption := GetProcAddress(LDllHandle, 'al_set_menu_item_caption');
  al_set_menu_item_flags := GetProcAddress(LDllHandle, 'al_set_menu_item_flags');
  al_set_menu_item_icon := GetProcAddress(LDllHandle, 'al_set_menu_item_icon');
  al_set_mixer_frequency := GetProcAddress(LDllHandle, 'al_set_mixer_frequency');
  al_set_mixer_gain := GetProcAddress(LDllHandle, 'al_set_mixer_gain');
  al_set_mixer_playing := GetProcAddress(LDllHandle, 'al_set_mixer_playing');
  al_set_mixer_postprocess_callback := GetProcAddress(LDllHandle, 'al_set_mixer_postprocess_callback');
  al_set_mixer_quality := GetProcAddress(LDllHandle, 'al_set_mixer_quality');
  al_set_mouse_axis := GetProcAddress(LDllHandle, 'al_set_mouse_axis');
  al_set_mouse_cursor := GetProcAddress(LDllHandle, 'al_set_mouse_cursor');
  al_set_mouse_emulation_mode := GetProcAddress(LDllHandle, 'al_set_mouse_emulation_mode');
  al_set_mouse_w := GetProcAddress(LDllHandle, 'al_set_mouse_w');
  al_set_mouse_wheel_precision := GetProcAddress(LDllHandle, 'al_set_mouse_wheel_precision');
  al_set_mouse_xy := GetProcAddress(LDllHandle, 'al_set_mouse_xy');
  al_set_mouse_z := GetProcAddress(LDllHandle, 'al_set_mouse_z');
  al_set_new_bitmap_depth := GetProcAddress(LDllHandle, 'al_set_new_bitmap_depth');
  al_set_new_bitmap_flags := GetProcAddress(LDllHandle, 'al_set_new_bitmap_flags');
  al_set_new_bitmap_format := GetProcAddress(LDllHandle, 'al_set_new_bitmap_format');
  al_set_new_bitmap_samples := GetProcAddress(LDllHandle, 'al_set_new_bitmap_samples');
  al_set_new_display_adapter := GetProcAddress(LDllHandle, 'al_set_new_display_adapter');
  al_set_new_display_flags := GetProcAddress(LDllHandle, 'al_set_new_display_flags');
  al_set_new_display_option := GetProcAddress(LDllHandle, 'al_set_new_display_option');
  al_set_new_display_refresh_rate := GetProcAddress(LDllHandle, 'al_set_new_display_refresh_rate');
  al_set_new_file_interface := GetProcAddress(LDllHandle, 'al_set_new_file_interface');
  al_set_new_window_position := GetProcAddress(LDllHandle, 'al_set_new_window_position');
  al_set_new_window_title := GetProcAddress(LDllHandle, 'al_set_new_window_title');
  al_set_org_name := GetProcAddress(LDllHandle, 'al_set_org_name');
  al_set_path_drive := GetProcAddress(LDllHandle, 'al_set_path_drive');
  al_set_path_extension := GetProcAddress(LDllHandle, 'al_set_path_extension');
  al_set_path_filename := GetProcAddress(LDllHandle, 'al_set_path_filename');
  al_set_physfs_file_interface := GetProcAddress(LDllHandle, 'al_set_physfs_file_interface');
  al_set_render_state := GetProcAddress(LDllHandle, 'al_set_render_state');
  al_set_sample := GetProcAddress(LDllHandle, 'al_set_sample');
  al_set_sample_instance_channel_matrix := GetProcAddress(LDllHandle, 'al_set_sample_instance_channel_matrix');
  al_set_sample_instance_gain := GetProcAddress(LDllHandle, 'al_set_sample_instance_gain');
  al_set_sample_instance_length := GetProcAddress(LDllHandle, 'al_set_sample_instance_length');
  al_set_sample_instance_pan := GetProcAddress(LDllHandle, 'al_set_sample_instance_pan');
  al_set_sample_instance_playing := GetProcAddress(LDllHandle, 'al_set_sample_instance_playing');
  al_set_sample_instance_playmode := GetProcAddress(LDllHandle, 'al_set_sample_instance_playmode');
  al_set_sample_instance_position := GetProcAddress(LDllHandle, 'al_set_sample_instance_position');
  al_set_sample_instance_speed := GetProcAddress(LDllHandle, 'al_set_sample_instance_speed');
  al_set_separate_bitmap_blender := GetProcAddress(LDllHandle, 'al_set_separate_bitmap_blender');
  al_set_separate_blender := GetProcAddress(LDllHandle, 'al_set_separate_blender');
  al_set_shader_bool := GetProcAddress(LDllHandle, 'al_set_shader_bool');
  al_set_shader_float := GetProcAddress(LDllHandle, 'al_set_shader_float');
  al_set_shader_float_vector := GetProcAddress(LDllHandle, 'al_set_shader_float_vector');
  al_set_shader_int := GetProcAddress(LDllHandle, 'al_set_shader_int');
  al_set_shader_int_vector := GetProcAddress(LDllHandle, 'al_set_shader_int_vector');
  al_set_shader_matrix := GetProcAddress(LDllHandle, 'al_set_shader_matrix');
  al_set_shader_sampler := GetProcAddress(LDllHandle, 'al_set_shader_sampler');
  al_set_standard_file_interface := GetProcAddress(LDllHandle, 'al_set_standard_file_interface');
  al_set_standard_fs_interface := GetProcAddress(LDllHandle, 'al_set_standard_fs_interface');
  al_set_system_mouse_cursor := GetProcAddress(LDllHandle, 'al_set_system_mouse_cursor');
  al_set_target_backbuffer := GetProcAddress(LDllHandle, 'al_set_target_backbuffer');
  al_set_target_bitmap := GetProcAddress(LDllHandle, 'al_set_target_bitmap');
  al_set_thread_should_stop := GetProcAddress(LDllHandle, 'al_set_thread_should_stop');
  al_set_timer_count := GetProcAddress(LDllHandle, 'al_set_timer_count');
  al_set_timer_speed := GetProcAddress(LDllHandle, 'al_set_timer_speed');
  al_set_video_playing := GetProcAddress(LDllHandle, 'al_set_video_playing');
  al_set_voice_playing := GetProcAddress(LDllHandle, 'al_set_voice_playing');
  al_set_voice_position := GetProcAddress(LDllHandle, 'al_set_voice_position');
  al_set_window_constraints := GetProcAddress(LDllHandle, 'al_set_window_constraints');
  al_set_window_position := GetProcAddress(LDllHandle, 'al_set_window_position');
  al_set_window_title := GetProcAddress(LDllHandle, 'al_set_window_title');
  al_show_mouse_cursor := GetProcAddress(LDllHandle, 'al_show_mouse_cursor');
  al_show_native_file_dialog := GetProcAddress(LDllHandle, 'al_show_native_file_dialog');
  al_show_native_message_box := GetProcAddress(LDllHandle, 'al_show_native_message_box');
  al_shutdown_font_addon := GetProcAddress(LDllHandle, 'al_shutdown_font_addon');
  al_shutdown_image_addon := GetProcAddress(LDllHandle, 'al_shutdown_image_addon');
  al_shutdown_native_dialog_addon := GetProcAddress(LDllHandle, 'al_shutdown_native_dialog_addon');
  al_shutdown_primitives_addon := GetProcAddress(LDllHandle, 'al_shutdown_primitives_addon');
  al_shutdown_ttf_addon := GetProcAddress(LDllHandle, 'al_shutdown_ttf_addon');
  al_shutdown_video_addon := GetProcAddress(LDllHandle, 'al_shutdown_video_addon');
  al_signal_cond := GetProcAddress(LDllHandle, 'al_signal_cond');
  al_start_audio_recorder := GetProcAddress(LDllHandle, 'al_start_audio_recorder');
  al_start_thread := GetProcAddress(LDllHandle, 'al_start_thread');
  al_start_timer := GetProcAddress(LDllHandle, 'al_start_timer');
  al_start_video := GetProcAddress(LDllHandle, 'al_start_video');
  al_start_video_with_voice := GetProcAddress(LDllHandle, 'al_start_video_with_voice');
  al_stop_audio_recorder := GetProcAddress(LDllHandle, 'al_stop_audio_recorder');
  al_stop_haptic_effect := GetProcAddress(LDllHandle, 'al_stop_haptic_effect');
  al_stop_sample := GetProcAddress(LDllHandle, 'al_stop_sample');
  al_stop_sample_instance := GetProcAddress(LDllHandle, 'al_stop_sample_instance');
  al_stop_samples := GetProcAddress(LDllHandle, 'al_stop_samples');
  al_stop_timer := GetProcAddress(LDllHandle, 'al_stop_timer');
  al_store_state := GetProcAddress(LDllHandle, 'al_store_state');
  al_toggle_menu_item_flags := GetProcAddress(LDllHandle, 'al_toggle_menu_item_flags');
  al_transform_coordinates := GetProcAddress(LDllHandle, 'al_transform_coordinates');
  al_transform_coordinates_3d := GetProcAddress(LDllHandle, 'al_transform_coordinates_3d');
  al_transform_coordinates_3d_projective := GetProcAddress(LDllHandle, 'al_transform_coordinates_3d_projective');
  al_transform_coordinates_4d := GetProcAddress(LDllHandle, 'al_transform_coordinates_4d');
  al_translate_transform := GetProcAddress(LDllHandle, 'al_translate_transform');
  al_translate_transform_3d := GetProcAddress(LDllHandle, 'al_translate_transform_3d');
  al_transpose_transform := GetProcAddress(LDllHandle, 'al_transpose_transform');
  al_triangulate_polygon := GetProcAddress(LDllHandle, 'al_triangulate_polygon');
  al_ungrab_mouse := GetProcAddress(LDllHandle, 'al_ungrab_mouse');
  al_uninstall_audio := GetProcAddress(LDllHandle, 'al_uninstall_audio');
  al_uninstall_haptic := GetProcAddress(LDllHandle, 'al_uninstall_haptic');
  al_uninstall_joystick := GetProcAddress(LDllHandle, 'al_uninstall_joystick');
  al_uninstall_keyboard := GetProcAddress(LDllHandle, 'al_uninstall_keyboard');
  al_uninstall_mouse := GetProcAddress(LDllHandle, 'al_uninstall_mouse');
  al_uninstall_system := GetProcAddress(LDllHandle, 'al_uninstall_system');
  al_uninstall_touch_input := GetProcAddress(LDllHandle, 'al_uninstall_touch_input');
  al_unlock_bitmap := GetProcAddress(LDllHandle, 'al_unlock_bitmap');
  al_unlock_index_buffer := GetProcAddress(LDllHandle, 'al_unlock_index_buffer');
  al_unlock_mutex := GetProcAddress(LDllHandle, 'al_unlock_mutex');
  al_unlock_sample_id := GetProcAddress(LDllHandle, 'al_unlock_sample_id');
  al_unlock_vertex_buffer := GetProcAddress(LDllHandle, 'al_unlock_vertex_buffer');
  al_unmap_rgb := GetProcAddress(LDllHandle, 'al_unmap_rgb');
  al_unmap_rgb_f := GetProcAddress(LDllHandle, 'al_unmap_rgb_f');
  al_unmap_rgba := GetProcAddress(LDllHandle, 'al_unmap_rgba');
  al_unmap_rgba_f := GetProcAddress(LDllHandle, 'al_unmap_rgba_f');
  al_unref_user_event := GetProcAddress(LDllHandle, 'al_unref_user_event');
  al_unregister_event_source := GetProcAddress(LDllHandle, 'al_unregister_event_source');
  al_update_display_region := GetProcAddress(LDllHandle, 'al_update_display_region');
  al_update_fs_entry := GetProcAddress(LDllHandle, 'al_update_fs_entry');
  al_upload_and_play_haptic_effect := GetProcAddress(LDllHandle, 'al_upload_and_play_haptic_effect');
  al_upload_haptic_effect := GetProcAddress(LDllHandle, 'al_upload_haptic_effect');
  al_use_projection_transform := GetProcAddress(LDllHandle, 'al_use_projection_transform');
  al_use_shader := GetProcAddress(LDllHandle, 'al_use_shader');
  al_use_transform := GetProcAddress(LDllHandle, 'al_use_transform');
  al_ustr_append := GetProcAddress(LDllHandle, 'al_ustr_append');
  al_ustr_append_chr := GetProcAddress(LDllHandle, 'al_ustr_append_chr');
  al_ustr_append_cstr := GetProcAddress(LDllHandle, 'al_ustr_append_cstr');
  al_ustr_appendf := GetProcAddress(LDllHandle, 'al_ustr_appendf');
  al_ustr_assign := GetProcAddress(LDllHandle, 'al_ustr_assign');
  al_ustr_assign_cstr := GetProcAddress(LDllHandle, 'al_ustr_assign_cstr');
  al_ustr_assign_substr := GetProcAddress(LDllHandle, 'al_ustr_assign_substr');
  al_ustr_compare := GetProcAddress(LDllHandle, 'al_ustr_compare');
  al_ustr_dup := GetProcAddress(LDllHandle, 'al_ustr_dup');
  al_ustr_dup_substr := GetProcAddress(LDllHandle, 'al_ustr_dup_substr');
  al_ustr_empty_string := GetProcAddress(LDllHandle, 'al_ustr_empty_string');
  al_ustr_encode_utf16 := GetProcAddress(LDllHandle, 'al_ustr_encode_utf16');
  al_ustr_equal := GetProcAddress(LDllHandle, 'al_ustr_equal');
  al_ustr_find_chr := GetProcAddress(LDllHandle, 'al_ustr_find_chr');
  al_ustr_find_cset := GetProcAddress(LDllHandle, 'al_ustr_find_cset');
  al_ustr_find_cset_cstr := GetProcAddress(LDllHandle, 'al_ustr_find_cset_cstr');
  al_ustr_find_cstr := GetProcAddress(LDllHandle, 'al_ustr_find_cstr');
  al_ustr_find_replace := GetProcAddress(LDllHandle, 'al_ustr_find_replace');
  al_ustr_find_replace_cstr := GetProcAddress(LDllHandle, 'al_ustr_find_replace_cstr');
  al_ustr_find_set := GetProcAddress(LDllHandle, 'al_ustr_find_set');
  al_ustr_find_set_cstr := GetProcAddress(LDllHandle, 'al_ustr_find_set_cstr');
  al_ustr_find_str := GetProcAddress(LDllHandle, 'al_ustr_find_str');
  al_ustr_free := GetProcAddress(LDllHandle, 'al_ustr_free');
  al_ustr_get := GetProcAddress(LDllHandle, 'al_ustr_get');
  al_ustr_get_next := GetProcAddress(LDllHandle, 'al_ustr_get_next');
  al_ustr_has_prefix := GetProcAddress(LDllHandle, 'al_ustr_has_prefix');
  al_ustr_has_prefix_cstr := GetProcAddress(LDllHandle, 'al_ustr_has_prefix_cstr');
  al_ustr_has_suffix := GetProcAddress(LDllHandle, 'al_ustr_has_suffix');
  al_ustr_has_suffix_cstr := GetProcAddress(LDllHandle, 'al_ustr_has_suffix_cstr');
  al_ustr_insert := GetProcAddress(LDllHandle, 'al_ustr_insert');
  al_ustr_insert_chr := GetProcAddress(LDllHandle, 'al_ustr_insert_chr');
  al_ustr_insert_cstr := GetProcAddress(LDllHandle, 'al_ustr_insert_cstr');
  al_ustr_length := GetProcAddress(LDllHandle, 'al_ustr_length');
  al_ustr_ltrim_ws := GetProcAddress(LDllHandle, 'al_ustr_ltrim_ws');
  al_ustr_ncompare := GetProcAddress(LDllHandle, 'al_ustr_ncompare');
  al_ustr_new := GetProcAddress(LDllHandle, 'al_ustr_new');
  al_ustr_new_from_buffer := GetProcAddress(LDllHandle, 'al_ustr_new_from_buffer');
  al_ustr_new_from_utf16 := GetProcAddress(LDllHandle, 'al_ustr_new_from_utf16');
  al_ustr_newf := GetProcAddress(LDllHandle, 'al_ustr_newf');
  al_ustr_next := GetProcAddress(LDllHandle, 'al_ustr_next');
  al_ustr_offset := GetProcAddress(LDllHandle, 'al_ustr_offset');
  al_ustr_prev := GetProcAddress(LDllHandle, 'al_ustr_prev');
  al_ustr_prev_get := GetProcAddress(LDllHandle, 'al_ustr_prev_get');
  al_ustr_remove_chr := GetProcAddress(LDllHandle, 'al_ustr_remove_chr');
  al_ustr_remove_range := GetProcAddress(LDllHandle, 'al_ustr_remove_range');
  al_ustr_replace_range := GetProcAddress(LDllHandle, 'al_ustr_replace_range');
  al_ustr_rfind_chr := GetProcAddress(LDllHandle, 'al_ustr_rfind_chr');
  al_ustr_rfind_cstr := GetProcAddress(LDllHandle, 'al_ustr_rfind_cstr');
  al_ustr_rfind_str := GetProcAddress(LDllHandle, 'al_ustr_rfind_str');
  al_ustr_rtrim_ws := GetProcAddress(LDllHandle, 'al_ustr_rtrim_ws');
  al_ustr_set_chr := GetProcAddress(LDllHandle, 'al_ustr_set_chr');
  al_ustr_size := GetProcAddress(LDllHandle, 'al_ustr_size');
  al_ustr_size_utf16 := GetProcAddress(LDllHandle, 'al_ustr_size_utf16');
  al_ustr_to_buffer := GetProcAddress(LDllHandle, 'al_ustr_to_buffer');
  al_ustr_trim_ws := GetProcAddress(LDllHandle, 'al_ustr_trim_ws');
  al_ustr_truncate := GetProcAddress(LDllHandle, 'al_ustr_truncate');
  al_ustr_vappendf := GetProcAddress(LDllHandle, 'al_ustr_vappendf');
  al_utf16_encode := GetProcAddress(LDllHandle, 'al_utf16_encode');
  al_utf16_width := GetProcAddress(LDllHandle, 'al_utf16_width');
  al_utf8_encode := GetProcAddress(LDllHandle, 'al_utf8_encode');
  al_utf8_width := GetProcAddress(LDllHandle, 'al_utf8_width');
  al_vertical_shear_transform := GetProcAddress(LDllHandle, 'al_vertical_shear_transform');
  al_vfprintf := GetProcAddress(LDllHandle, 'al_vfprintf');
  al_wait_cond := GetProcAddress(LDllHandle, 'al_wait_cond');
  al_wait_cond_until := GetProcAddress(LDllHandle, 'al_wait_cond_until');
  al_wait_for_event := GetProcAddress(LDllHandle, 'al_wait_for_event');
  al_wait_for_event_timed := GetProcAddress(LDllHandle, 'al_wait_for_event_timed');
  al_wait_for_event_until := GetProcAddress(LDllHandle, 'al_wait_for_event_until');
  al_wait_for_vsync := GetProcAddress(LDllHandle, 'al_wait_for_vsync');
  al_win_add_window_callback := GetProcAddress(LDllHandle, 'al_win_add_window_callback');
  al_win_remove_window_callback := GetProcAddress(LDllHandle, 'al_win_remove_window_callback');
  nk__begin := GetProcAddress(LDllHandle, 'nk__begin');
  nk__next := GetProcAddress(LDllHandle, 'nk__next');
  nk_begin := GetProcAddress(LDllHandle, 'nk_begin');
  nk_begin_titled := GetProcAddress(LDllHandle, 'nk_begin_titled');
  nk_buffer_clear := GetProcAddress(LDllHandle, 'nk_buffer_clear');
  nk_buffer_free := GetProcAddress(LDllHandle, 'nk_buffer_free');
  nk_buffer_info := GetProcAddress(LDllHandle, 'nk_buffer_info');
  nk_buffer_init := GetProcAddress(LDllHandle, 'nk_buffer_init');
  nk_buffer_init_default := GetProcAddress(LDllHandle, 'nk_buffer_init_default');
  nk_buffer_init_fixed := GetProcAddress(LDllHandle, 'nk_buffer_init_fixed');
  nk_buffer_mark := GetProcAddress(LDllHandle, 'nk_buffer_mark');
  nk_buffer_memory := GetProcAddress(LDllHandle, 'nk_buffer_memory');
  nk_buffer_memory_const := GetProcAddress(LDllHandle, 'nk_buffer_memory_const');
  nk_buffer_push := GetProcAddress(LDllHandle, 'nk_buffer_push');
  nk_buffer_reset := GetProcAddress(LDllHandle, 'nk_buffer_reset');
  nk_buffer_total := GetProcAddress(LDllHandle, 'nk_buffer_total');
  nk_button_color := GetProcAddress(LDllHandle, 'nk_button_color');
  nk_button_image := GetProcAddress(LDllHandle, 'nk_button_image');
  nk_button_image_label := GetProcAddress(LDllHandle, 'nk_button_image_label');
  nk_button_image_label_styled := GetProcAddress(LDllHandle, 'nk_button_image_label_styled');
  nk_button_image_styled := GetProcAddress(LDllHandle, 'nk_button_image_styled');
  nk_button_image_text := GetProcAddress(LDllHandle, 'nk_button_image_text');
  nk_button_image_text_styled := GetProcAddress(LDllHandle, 'nk_button_image_text_styled');
  nk_button_label := GetProcAddress(LDllHandle, 'nk_button_label');
  nk_button_label_styled := GetProcAddress(LDllHandle, 'nk_button_label_styled');
  nk_button_pop_behavior := GetProcAddress(LDllHandle, 'nk_button_pop_behavior');
  nk_button_push_behavior := GetProcAddress(LDllHandle, 'nk_button_push_behavior');
  nk_button_set_behavior := GetProcAddress(LDllHandle, 'nk_button_set_behavior');
  nk_button_symbol := GetProcAddress(LDllHandle, 'nk_button_symbol');
  nk_button_symbol_label := GetProcAddress(LDllHandle, 'nk_button_symbol_label');
  nk_button_symbol_label_styled := GetProcAddress(LDllHandle, 'nk_button_symbol_label_styled');
  nk_button_symbol_styled := GetProcAddress(LDllHandle, 'nk_button_symbol_styled');
  nk_button_symbol_text := GetProcAddress(LDllHandle, 'nk_button_symbol_text');
  nk_button_symbol_text_styled := GetProcAddress(LDllHandle, 'nk_button_symbol_text_styled');
  nk_button_text := GetProcAddress(LDllHandle, 'nk_button_text');
  nk_button_text_styled := GetProcAddress(LDllHandle, 'nk_button_text_styled');
  nk_chart_add_slot := GetProcAddress(LDllHandle, 'nk_chart_add_slot');
  nk_chart_add_slot_colored := GetProcAddress(LDllHandle, 'nk_chart_add_slot_colored');
  nk_chart_begin := GetProcAddress(LDllHandle, 'nk_chart_begin');
  nk_chart_begin_colored := GetProcAddress(LDllHandle, 'nk_chart_begin_colored');
  nk_chart_end := GetProcAddress(LDllHandle, 'nk_chart_end');
  nk_chart_push := GetProcAddress(LDllHandle, 'nk_chart_push');
  nk_chart_push_slot := GetProcAddress(LDllHandle, 'nk_chart_push_slot');
  nk_check_flags_label := GetProcAddress(LDllHandle, 'nk_check_flags_label');
  nk_check_flags_text := GetProcAddress(LDllHandle, 'nk_check_flags_text');
  nk_check_label := GetProcAddress(LDllHandle, 'nk_check_label');
  nk_check_text := GetProcAddress(LDllHandle, 'nk_check_text');
  nk_checkbox_flags_label := GetProcAddress(LDllHandle, 'nk_checkbox_flags_label');
  nk_checkbox_flags_text := GetProcAddress(LDllHandle, 'nk_checkbox_flags_text');
  nk_checkbox_label := GetProcAddress(LDllHandle, 'nk_checkbox_label');
  nk_checkbox_text := GetProcAddress(LDllHandle, 'nk_checkbox_text');
  nk_clear := GetProcAddress(LDllHandle, 'nk_clear');
  nk_color_cf := GetProcAddress(LDllHandle, 'nk_color_cf');
  nk_color_d := GetProcAddress(LDllHandle, 'nk_color_d');
  nk_color_dv := GetProcAddress(LDllHandle, 'nk_color_dv');
  nk_color_f := GetProcAddress(LDllHandle, 'nk_color_f');
  nk_color_fv := GetProcAddress(LDllHandle, 'nk_color_fv');
  nk_color_hex_rgb := GetProcAddress(LDllHandle, 'nk_color_hex_rgb');
  nk_color_hex_rgba := GetProcAddress(LDllHandle, 'nk_color_hex_rgba');
  nk_color_hsv_b := GetProcAddress(LDllHandle, 'nk_color_hsv_b');
  nk_color_hsv_bv := GetProcAddress(LDllHandle, 'nk_color_hsv_bv');
  nk_color_hsv_f := GetProcAddress(LDllHandle, 'nk_color_hsv_f');
  nk_color_hsv_fv := GetProcAddress(LDllHandle, 'nk_color_hsv_fv');
  nk_color_hsv_i := GetProcAddress(LDllHandle, 'nk_color_hsv_i');
  nk_color_hsv_iv := GetProcAddress(LDllHandle, 'nk_color_hsv_iv');
  nk_color_hsva_b := GetProcAddress(LDllHandle, 'nk_color_hsva_b');
  nk_color_hsva_bv := GetProcAddress(LDllHandle, 'nk_color_hsva_bv');
  nk_color_hsva_f := GetProcAddress(LDllHandle, 'nk_color_hsva_f');
  nk_color_hsva_fv := GetProcAddress(LDllHandle, 'nk_color_hsva_fv');
  nk_color_hsva_i := GetProcAddress(LDllHandle, 'nk_color_hsva_i');
  nk_color_hsva_iv := GetProcAddress(LDllHandle, 'nk_color_hsva_iv');
  nk_color_pick := GetProcAddress(LDllHandle, 'nk_color_pick');
  nk_color_picker := GetProcAddress(LDllHandle, 'nk_color_picker');
  nk_color_u32 := GetProcAddress(LDllHandle, 'nk_color_u32');
  nk_colorf_hsva_f := GetProcAddress(LDllHandle, 'nk_colorf_hsva_f');
  nk_colorf_hsva_fv := GetProcAddress(LDllHandle, 'nk_colorf_hsva_fv');
  nk_combo := GetProcAddress(LDllHandle, 'nk_combo');
  nk_combo_begin_color := GetProcAddress(LDllHandle, 'nk_combo_begin_color');
  nk_combo_begin_image := GetProcAddress(LDllHandle, 'nk_combo_begin_image');
  nk_combo_begin_image_label := GetProcAddress(LDllHandle, 'nk_combo_begin_image_label');
  nk_combo_begin_image_text := GetProcAddress(LDllHandle, 'nk_combo_begin_image_text');
  nk_combo_begin_label := GetProcAddress(LDllHandle, 'nk_combo_begin_label');
  nk_combo_begin_symbol := GetProcAddress(LDllHandle, 'nk_combo_begin_symbol');
  nk_combo_begin_symbol_label := GetProcAddress(LDllHandle, 'nk_combo_begin_symbol_label');
  nk_combo_begin_symbol_text := GetProcAddress(LDllHandle, 'nk_combo_begin_symbol_text');
  nk_combo_begin_text := GetProcAddress(LDllHandle, 'nk_combo_begin_text');
  nk_combo_callback := GetProcAddress(LDllHandle, 'nk_combo_callback');
  nk_combo_close := GetProcAddress(LDllHandle, 'nk_combo_close');
  nk_combo_end := GetProcAddress(LDllHandle, 'nk_combo_end');
  nk_combo_item_image_label := GetProcAddress(LDllHandle, 'nk_combo_item_image_label');
  nk_combo_item_image_text := GetProcAddress(LDllHandle, 'nk_combo_item_image_text');
  nk_combo_item_label := GetProcAddress(LDllHandle, 'nk_combo_item_label');
  nk_combo_item_symbol_label := GetProcAddress(LDllHandle, 'nk_combo_item_symbol_label');
  nk_combo_item_symbol_text := GetProcAddress(LDllHandle, 'nk_combo_item_symbol_text');
  nk_combo_item_text := GetProcAddress(LDllHandle, 'nk_combo_item_text');
  nk_combo_separator := GetProcAddress(LDllHandle, 'nk_combo_separator');
  nk_combo_string := GetProcAddress(LDllHandle, 'nk_combo_string');
  nk_combobox := GetProcAddress(LDllHandle, 'nk_combobox');
  nk_combobox_callback := GetProcAddress(LDllHandle, 'nk_combobox_callback');
  nk_combobox_separator := GetProcAddress(LDllHandle, 'nk_combobox_separator');
  nk_combobox_string := GetProcAddress(LDllHandle, 'nk_combobox_string');
  nk_contextual_begin := GetProcAddress(LDllHandle, 'nk_contextual_begin');
  nk_contextual_close := GetProcAddress(LDllHandle, 'nk_contextual_close');
  nk_contextual_end := GetProcAddress(LDllHandle, 'nk_contextual_end');
  nk_contextual_item_image_label := GetProcAddress(LDllHandle, 'nk_contextual_item_image_label');
  nk_contextual_item_image_text := GetProcAddress(LDllHandle, 'nk_contextual_item_image_text');
  nk_contextual_item_label := GetProcAddress(LDllHandle, 'nk_contextual_item_label');
  nk_contextual_item_symbol_label := GetProcAddress(LDllHandle, 'nk_contextual_item_symbol_label');
  nk_contextual_item_symbol_text := GetProcAddress(LDllHandle, 'nk_contextual_item_symbol_text');
  nk_contextual_item_text := GetProcAddress(LDllHandle, 'nk_contextual_item_text');
  nk_draw_image := GetProcAddress(LDllHandle, 'nk_draw_image');
  nk_draw_nine_slice := GetProcAddress(LDllHandle, 'nk_draw_nine_slice');
  nk_draw_text := GetProcAddress(LDllHandle, 'nk_draw_text');
  nk_edit_buffer := GetProcAddress(LDllHandle, 'nk_edit_buffer');
  nk_edit_focus := GetProcAddress(LDllHandle, 'nk_edit_focus');
  nk_edit_string := GetProcAddress(LDllHandle, 'nk_edit_string');
  nk_edit_string_zero_terminated := GetProcAddress(LDllHandle, 'nk_edit_string_zero_terminated');
  nk_edit_unfocus := GetProcAddress(LDllHandle, 'nk_edit_unfocus');
  nk_end := GetProcAddress(LDllHandle, 'nk_end');
  nk_fill_arc := GetProcAddress(LDllHandle, 'nk_fill_arc');
  nk_fill_circle := GetProcAddress(LDllHandle, 'nk_fill_circle');
  nk_fill_polygon := GetProcAddress(LDllHandle, 'nk_fill_polygon');
  nk_fill_rect := GetProcAddress(LDllHandle, 'nk_fill_rect');
  nk_fill_rect_multi_color := GetProcAddress(LDllHandle, 'nk_fill_rect_multi_color');
  nk_fill_triangle := GetProcAddress(LDllHandle, 'nk_fill_triangle');
  nk_filter_ascii := GetProcAddress(LDllHandle, 'nk_filter_ascii');
  nk_filter_binary := GetProcAddress(LDllHandle, 'nk_filter_binary');
  nk_filter_decimal := GetProcAddress(LDllHandle, 'nk_filter_decimal');
  nk_filter_default := GetProcAddress(LDllHandle, 'nk_filter_default');
  nk_filter_float := GetProcAddress(LDllHandle, 'nk_filter_float');
  nk_filter_hex := GetProcAddress(LDllHandle, 'nk_filter_hex');
  nk_filter_oct := GetProcAddress(LDllHandle, 'nk_filter_oct');
  nk_font_atlas_add := GetProcAddress(LDllHandle, 'nk_font_atlas_add');
  nk_font_atlas_add_compressed := GetProcAddress(LDllHandle, 'nk_font_atlas_add_compressed');
  nk_font_atlas_add_compressed_base85 := GetProcAddress(LDllHandle, 'nk_font_atlas_add_compressed_base85');
  nk_font_atlas_add_default := GetProcAddress(LDllHandle, 'nk_font_atlas_add_default');
  nk_font_atlas_add_from_file := GetProcAddress(LDllHandle, 'nk_font_atlas_add_from_file');
  nk_font_atlas_add_from_memory := GetProcAddress(LDllHandle, 'nk_font_atlas_add_from_memory');
  nk_font_atlas_bake := GetProcAddress(LDllHandle, 'nk_font_atlas_bake');
  nk_font_atlas_begin := GetProcAddress(LDllHandle, 'nk_font_atlas_begin');
  nk_font_atlas_cleanup := GetProcAddress(LDllHandle, 'nk_font_atlas_cleanup');
  nk_font_atlas_clear := GetProcAddress(LDllHandle, 'nk_font_atlas_clear');
  nk_font_atlas_end := GetProcAddress(LDllHandle, 'nk_font_atlas_end');
  nk_font_atlas_init := GetProcAddress(LDllHandle, 'nk_font_atlas_init');
  nk_font_atlas_init_custom := GetProcAddress(LDllHandle, 'nk_font_atlas_init_custom');
  nk_font_atlas_init_default := GetProcAddress(LDllHandle, 'nk_font_atlas_init_default');
  nk_font_chinese_glyph_ranges := GetProcAddress(LDllHandle, 'nk_font_chinese_glyph_ranges');
  nk_font_config_ := GetProcAddress(LDllHandle, 'nk_font_config');
  nk_font_cyrillic_glyph_ranges := GetProcAddress(LDllHandle, 'nk_font_cyrillic_glyph_ranges');
  nk_font_default_glyph_ranges := GetProcAddress(LDllHandle, 'nk_font_default_glyph_ranges');
  nk_font_find_glyph := GetProcAddress(LDllHandle, 'nk_font_find_glyph');
  nk_font_korean_glyph_ranges := GetProcAddress(LDllHandle, 'nk_font_korean_glyph_ranges');
  nk_free := GetProcAddress(LDllHandle, 'nk_free');
  nk_get_null_rect := GetProcAddress(LDllHandle, 'nk_get_null_rect');
  nk_group_begin := GetProcAddress(LDllHandle, 'nk_group_begin');
  nk_group_begin_titled := GetProcAddress(LDllHandle, 'nk_group_begin_titled');
  nk_group_end := GetProcAddress(LDllHandle, 'nk_group_end');
  nk_group_get_scroll := GetProcAddress(LDllHandle, 'nk_group_get_scroll');
  nk_group_scrolled_begin := GetProcAddress(LDllHandle, 'nk_group_scrolled_begin');
  nk_group_scrolled_end := GetProcAddress(LDllHandle, 'nk_group_scrolled_end');
  nk_group_scrolled_offset_begin := GetProcAddress(LDllHandle, 'nk_group_scrolled_offset_begin');
  nk_group_set_scroll := GetProcAddress(LDllHandle, 'nk_group_set_scroll');
  nk_handle_id := GetProcAddress(LDllHandle, 'nk_handle_id');
  nk_handle_ptr := GetProcAddress(LDllHandle, 'nk_handle_ptr');
  nk_hsv := GetProcAddress(LDllHandle, 'nk_hsv');
  nk_hsv_bv := GetProcAddress(LDllHandle, 'nk_hsv_bv');
  nk_hsv_f := GetProcAddress(LDllHandle, 'nk_hsv_f');
  nk_hsv_fv := GetProcAddress(LDllHandle, 'nk_hsv_fv');
  nk_hsv_iv := GetProcAddress(LDllHandle, 'nk_hsv_iv');
  nk_hsva := GetProcAddress(LDllHandle, 'nk_hsva');
  nk_hsva_bv := GetProcAddress(LDllHandle, 'nk_hsva_bv');
  nk_hsva_colorf := GetProcAddress(LDllHandle, 'nk_hsva_colorf');
  nk_hsva_colorfv := GetProcAddress(LDllHandle, 'nk_hsva_colorfv');
  nk_hsva_f := GetProcAddress(LDllHandle, 'nk_hsva_f');
  nk_hsva_fv := GetProcAddress(LDllHandle, 'nk_hsva_fv');
  nk_hsva_iv := GetProcAddress(LDllHandle, 'nk_hsva_iv');
  nk_image_ := GetProcAddress(LDllHandle, 'nk_image');
  nk_image_color := GetProcAddress(LDllHandle, 'nk_image_color');
  nk_image_handle := GetProcAddress(LDllHandle, 'nk_image_handle');
  nk_image_id := GetProcAddress(LDllHandle, 'nk_image_id');
  nk_image_is_subimage := GetProcAddress(LDllHandle, 'nk_image_is_subimage');
  nk_image_ptr := GetProcAddress(LDllHandle, 'nk_image_ptr');
  nk_init := GetProcAddress(LDllHandle, 'nk_init');
  nk_init_custom := GetProcAddress(LDllHandle, 'nk_init_custom');
  nk_init_default := GetProcAddress(LDllHandle, 'nk_init_default');
  nk_init_fixed := GetProcAddress(LDllHandle, 'nk_init_fixed');
  nk_input_any_mouse_click_in_rect := GetProcAddress(LDllHandle, 'nk_input_any_mouse_click_in_rect');
  nk_input_begin := GetProcAddress(LDllHandle, 'nk_input_begin');
  nk_input_button := GetProcAddress(LDllHandle, 'nk_input_button');
  nk_input_char := GetProcAddress(LDllHandle, 'nk_input_char');
  nk_input_end := GetProcAddress(LDllHandle, 'nk_input_end');
  nk_input_glyph := GetProcAddress(LDllHandle, 'nk_input_glyph');
  nk_input_has_mouse_click := GetProcAddress(LDllHandle, 'nk_input_has_mouse_click');
  nk_input_has_mouse_click_down_in_rect := GetProcAddress(LDllHandle, 'nk_input_has_mouse_click_down_in_rect');
  nk_input_has_mouse_click_in_rect := GetProcAddress(LDllHandle, 'nk_input_has_mouse_click_in_rect');
  nk_input_is_key_down := GetProcAddress(LDllHandle, 'nk_input_is_key_down');
  nk_input_is_key_pressed := GetProcAddress(LDllHandle, 'nk_input_is_key_pressed');
  nk_input_is_key_released := GetProcAddress(LDllHandle, 'nk_input_is_key_released');
  nk_input_is_mouse_click_down_in_rect := GetProcAddress(LDllHandle, 'nk_input_is_mouse_click_down_in_rect');
  nk_input_is_mouse_click_in_rect := GetProcAddress(LDllHandle, 'nk_input_is_mouse_click_in_rect');
  nk_input_is_mouse_down := GetProcAddress(LDllHandle, 'nk_input_is_mouse_down');
  nk_input_is_mouse_hovering_rect := GetProcAddress(LDllHandle, 'nk_input_is_mouse_hovering_rect');
  nk_input_is_mouse_pressed := GetProcAddress(LDllHandle, 'nk_input_is_mouse_pressed');
  nk_input_is_mouse_prev_hovering_rect := GetProcAddress(LDllHandle, 'nk_input_is_mouse_prev_hovering_rect');
  nk_input_is_mouse_released := GetProcAddress(LDllHandle, 'nk_input_is_mouse_released');
  nk_input_key := GetProcAddress(LDllHandle, 'nk_input_key');
  nk_input_motion := GetProcAddress(LDllHandle, 'nk_input_motion');
  nk_input_mouse_clicked := GetProcAddress(LDllHandle, 'nk_input_mouse_clicked');
  nk_input_scroll := GetProcAddress(LDllHandle, 'nk_input_scroll');
  nk_input_unicode := GetProcAddress(LDllHandle, 'nk_input_unicode');
  nk_item_is_any_active := GetProcAddress(LDllHandle, 'nk_item_is_any_active');
  nk_label := GetProcAddress(LDllHandle, 'nk_label');
  nk_label_colored := GetProcAddress(LDllHandle, 'nk_label_colored');
  nk_label_colored_wrap := GetProcAddress(LDllHandle, 'nk_label_colored_wrap');
  nk_label_wrap := GetProcAddress(LDllHandle, 'nk_label_wrap');
  nk_labelf := GetProcAddress(LDllHandle, 'nk_labelf');
  nk_labelf_colored := GetProcAddress(LDllHandle, 'nk_labelf_colored');
  nk_labelf_colored_wrap := GetProcAddress(LDllHandle, 'nk_labelf_colored_wrap');
  nk_labelf_wrap := GetProcAddress(LDllHandle, 'nk_labelf_wrap');
  nk_labelfv := GetProcAddress(LDllHandle, 'nk_labelfv');
  nk_labelfv_colored := GetProcAddress(LDllHandle, 'nk_labelfv_colored');
  nk_labelfv_colored_wrap := GetProcAddress(LDllHandle, 'nk_labelfv_colored_wrap');
  nk_labelfv_wrap := GetProcAddress(LDllHandle, 'nk_labelfv_wrap');
  nk_layout_ratio_from_pixel := GetProcAddress(LDllHandle, 'nk_layout_ratio_from_pixel');
  nk_layout_reset_min_row_height := GetProcAddress(LDllHandle, 'nk_layout_reset_min_row_height');
  nk_layout_row := GetProcAddress(LDllHandle, 'nk_layout_row');
  nk_layout_row_begin := GetProcAddress(LDllHandle, 'nk_layout_row_begin');
  nk_layout_row_dynamic := GetProcAddress(LDllHandle, 'nk_layout_row_dynamic');
  nk_layout_row_end := GetProcAddress(LDllHandle, 'nk_layout_row_end');
  nk_layout_row_push := GetProcAddress(LDllHandle, 'nk_layout_row_push');
  nk_layout_row_static := GetProcAddress(LDllHandle, 'nk_layout_row_static');
  nk_layout_row_template_begin := GetProcAddress(LDllHandle, 'nk_layout_row_template_begin');
  nk_layout_row_template_end := GetProcAddress(LDllHandle, 'nk_layout_row_template_end');
  nk_layout_row_template_push_dynamic := GetProcAddress(LDllHandle, 'nk_layout_row_template_push_dynamic');
  nk_layout_row_template_push_static := GetProcAddress(LDllHandle, 'nk_layout_row_template_push_static');
  nk_layout_row_template_push_variable := GetProcAddress(LDllHandle, 'nk_layout_row_template_push_variable');
  nk_layout_set_min_row_height := GetProcAddress(LDllHandle, 'nk_layout_set_min_row_height');
  nk_layout_space_begin := GetProcAddress(LDllHandle, 'nk_layout_space_begin');
  nk_layout_space_bounds := GetProcAddress(LDllHandle, 'nk_layout_space_bounds');
  nk_layout_space_end := GetProcAddress(LDllHandle, 'nk_layout_space_end');
  nk_layout_space_push := GetProcAddress(LDllHandle, 'nk_layout_space_push');
  nk_layout_space_rect_to_local := GetProcAddress(LDllHandle, 'nk_layout_space_rect_to_local');
  nk_layout_space_rect_to_screen := GetProcAddress(LDllHandle, 'nk_layout_space_rect_to_screen');
  nk_layout_space_to_local := GetProcAddress(LDllHandle, 'nk_layout_space_to_local');
  nk_layout_space_to_screen := GetProcAddress(LDllHandle, 'nk_layout_space_to_screen');
  nk_layout_widget_bounds := GetProcAddress(LDllHandle, 'nk_layout_widget_bounds');
  nk_list_view_begin := GetProcAddress(LDllHandle, 'nk_list_view_begin');
  nk_list_view_end := GetProcAddress(LDllHandle, 'nk_list_view_end');
  nk_menu_begin_image := GetProcAddress(LDllHandle, 'nk_menu_begin_image');
  nk_menu_begin_image_label := GetProcAddress(LDllHandle, 'nk_menu_begin_image_label');
  nk_menu_begin_image_text := GetProcAddress(LDllHandle, 'nk_menu_begin_image_text');
  nk_menu_begin_label := GetProcAddress(LDllHandle, 'nk_menu_begin_label');
  nk_menu_begin_symbol := GetProcAddress(LDllHandle, 'nk_menu_begin_symbol');
  nk_menu_begin_symbol_label := GetProcAddress(LDllHandle, 'nk_menu_begin_symbol_label');
  nk_menu_begin_symbol_text := GetProcAddress(LDllHandle, 'nk_menu_begin_symbol_text');
  nk_menu_begin_text := GetProcAddress(LDllHandle, 'nk_menu_begin_text');
  nk_menu_close := GetProcAddress(LDllHandle, 'nk_menu_close');
  nk_menu_end := GetProcAddress(LDllHandle, 'nk_menu_end');
  nk_menu_item_image_label := GetProcAddress(LDllHandle, 'nk_menu_item_image_label');
  nk_menu_item_image_text := GetProcAddress(LDllHandle, 'nk_menu_item_image_text');
  nk_menu_item_label := GetProcAddress(LDllHandle, 'nk_menu_item_label');
  nk_menu_item_symbol_label := GetProcAddress(LDllHandle, 'nk_menu_item_symbol_label');
  nk_menu_item_symbol_text := GetProcAddress(LDllHandle, 'nk_menu_item_symbol_text');
  nk_menu_item_text := GetProcAddress(LDllHandle, 'nk_menu_item_text');
  nk_menubar_begin := GetProcAddress(LDllHandle, 'nk_menubar_begin');
  nk_menubar_end := GetProcAddress(LDllHandle, 'nk_menubar_end');
  nk_murmur_hash := GetProcAddress(LDllHandle, 'nk_murmur_hash');
  nk_nine_slice_handle := GetProcAddress(LDllHandle, 'nk_nine_slice_handle');
  nk_nine_slice_id := GetProcAddress(LDllHandle, 'nk_nine_slice_id');
  nk_nine_slice_is_sub9slice := GetProcAddress(LDllHandle, 'nk_nine_slice_is_sub9slice');
  nk_nine_slice_ptr := GetProcAddress(LDllHandle, 'nk_nine_slice_ptr');
  nk_option_label := GetProcAddress(LDllHandle, 'nk_option_label');
  nk_option_text := GetProcAddress(LDllHandle, 'nk_option_text');
  nk_plot := GetProcAddress(LDllHandle, 'nk_plot');
  nk_plot_function := GetProcAddress(LDllHandle, 'nk_plot_function');
  nk_popup_begin := GetProcAddress(LDllHandle, 'nk_popup_begin');
  nk_popup_close := GetProcAddress(LDllHandle, 'nk_popup_close');
  nk_popup_end := GetProcAddress(LDllHandle, 'nk_popup_end');
  nk_popup_get_scroll := GetProcAddress(LDllHandle, 'nk_popup_get_scroll');
  nk_popup_set_scroll := GetProcAddress(LDllHandle, 'nk_popup_set_scroll');
  nk_prog := GetProcAddress(LDllHandle, 'nk_prog');
  nk_progress := GetProcAddress(LDllHandle, 'nk_progress');
  nk_property_double := GetProcAddress(LDllHandle, 'nk_property_double');
  nk_property_float := GetProcAddress(LDllHandle, 'nk_property_float');
  nk_property_int := GetProcAddress(LDllHandle, 'nk_property_int');
  nk_propertyd := GetProcAddress(LDllHandle, 'nk_propertyd');
  nk_propertyf := GetProcAddress(LDllHandle, 'nk_propertyf');
  nk_propertyi := GetProcAddress(LDllHandle, 'nk_propertyi');
  nk_push_custom := GetProcAddress(LDllHandle, 'nk_push_custom');
  nk_push_scissor := GetProcAddress(LDllHandle, 'nk_push_scissor');
  nk_radio_label := GetProcAddress(LDllHandle, 'nk_radio_label');
  nk_radio_text := GetProcAddress(LDllHandle, 'nk_radio_text');
  nk_rect_ := GetProcAddress(LDllHandle, 'nk_rect');
  nk_rect_pos := GetProcAddress(LDllHandle, 'nk_rect_pos');
  nk_rect_size := GetProcAddress(LDllHandle, 'nk_rect_size');
  nk_recta := GetProcAddress(LDllHandle, 'nk_recta');
  nk_recti_ := GetProcAddress(LDllHandle, 'nk_recti');
  nk_rectiv := GetProcAddress(LDllHandle, 'nk_rectiv');
  nk_rectv := GetProcAddress(LDllHandle, 'nk_rectv');
  nk_rgb_ := GetProcAddress(LDllHandle, 'nk_rgb');
  nk_rgb_bv := GetProcAddress(LDllHandle, 'nk_rgb_bv');
  nk_rgb_cf := GetProcAddress(LDllHandle, 'nk_rgb_cf');
  nk_rgb_f := GetProcAddress(LDllHandle, 'nk_rgb_f');
  nk_rgb_fv := GetProcAddress(LDllHandle, 'nk_rgb_fv');
  nk_rgb_hex := GetProcAddress(LDllHandle, 'nk_rgb_hex');
  nk_rgb_iv := GetProcAddress(LDllHandle, 'nk_rgb_iv');
  nk_rgba_ := GetProcAddress(LDllHandle, 'nk_rgba');
  nk_rgba_bv := GetProcAddress(LDllHandle, 'nk_rgba_bv');
  nk_rgba_cf := GetProcAddress(LDllHandle, 'nk_rgba_cf');
  nk_rgba_f := GetProcAddress(LDllHandle, 'nk_rgba_f');
  nk_rgba_fv := GetProcAddress(LDllHandle, 'nk_rgba_fv');
  nk_rgba_hex := GetProcAddress(LDllHandle, 'nk_rgba_hex');
  nk_rgba_iv := GetProcAddress(LDllHandle, 'nk_rgba_iv');
  nk_rgba_u32 := GetProcAddress(LDllHandle, 'nk_rgba_u32');
  nk_select_image_label := GetProcAddress(LDllHandle, 'nk_select_image_label');
  nk_select_image_text := GetProcAddress(LDllHandle, 'nk_select_image_text');
  nk_select_label := GetProcAddress(LDllHandle, 'nk_select_label');
  nk_select_symbol_label := GetProcAddress(LDllHandle, 'nk_select_symbol_label');
  nk_select_symbol_text := GetProcAddress(LDllHandle, 'nk_select_symbol_text');
  nk_select_text := GetProcAddress(LDllHandle, 'nk_select_text');
  nk_selectable_image_label := GetProcAddress(LDllHandle, 'nk_selectable_image_label');
  nk_selectable_image_text := GetProcAddress(LDllHandle, 'nk_selectable_image_text');
  nk_selectable_label := GetProcAddress(LDllHandle, 'nk_selectable_label');
  nk_selectable_symbol_label := GetProcAddress(LDllHandle, 'nk_selectable_symbol_label');
  nk_selectable_symbol_text := GetProcAddress(LDllHandle, 'nk_selectable_symbol_text');
  nk_selectable_text := GetProcAddress(LDllHandle, 'nk_selectable_text');
  nk_slide_float := GetProcAddress(LDllHandle, 'nk_slide_float');
  nk_slide_int := GetProcAddress(LDllHandle, 'nk_slide_int');
  nk_slider_float := GetProcAddress(LDllHandle, 'nk_slider_float');
  nk_slider_int := GetProcAddress(LDllHandle, 'nk_slider_int');
  nk_spacer := GetProcAddress(LDllHandle, 'nk_spacer');
  nk_spacing := GetProcAddress(LDllHandle, 'nk_spacing');
  nk_str_append_str_char := GetProcAddress(LDllHandle, 'nk_str_append_str_char');
  nk_str_append_str_runes := GetProcAddress(LDllHandle, 'nk_str_append_str_runes');
  nk_str_append_str_utf8 := GetProcAddress(LDllHandle, 'nk_str_append_str_utf8');
  nk_str_append_text_char := GetProcAddress(LDllHandle, 'nk_str_append_text_char');
  nk_str_append_text_runes := GetProcAddress(LDllHandle, 'nk_str_append_text_runes');
  nk_str_append_text_utf8 := GetProcAddress(LDllHandle, 'nk_str_append_text_utf8');
  nk_str_at_char := GetProcAddress(LDllHandle, 'nk_str_at_char');
  nk_str_at_char_const := GetProcAddress(LDllHandle, 'nk_str_at_char_const');
  nk_str_at_const := GetProcAddress(LDllHandle, 'nk_str_at_const');
  nk_str_at_rune := GetProcAddress(LDllHandle, 'nk_str_at_rune');
  nk_str_clear := GetProcAddress(LDllHandle, 'nk_str_clear');
  nk_str_delete_chars := GetProcAddress(LDllHandle, 'nk_str_delete_chars');
  nk_str_delete_runes := GetProcAddress(LDllHandle, 'nk_str_delete_runes');
  nk_str_free := GetProcAddress(LDllHandle, 'nk_str_free');
  nk_str_get := GetProcAddress(LDllHandle, 'nk_str_get');
  nk_str_get_const := GetProcAddress(LDllHandle, 'nk_str_get_const');
  nk_str_init := GetProcAddress(LDllHandle, 'nk_str_init');
  nk_str_init_default := GetProcAddress(LDllHandle, 'nk_str_init_default');
  nk_str_init_fixed := GetProcAddress(LDllHandle, 'nk_str_init_fixed');
  nk_str_insert_at_char := GetProcAddress(LDllHandle, 'nk_str_insert_at_char');
  nk_str_insert_at_rune := GetProcAddress(LDllHandle, 'nk_str_insert_at_rune');
  nk_str_insert_str_char := GetProcAddress(LDllHandle, 'nk_str_insert_str_char');
  nk_str_insert_str_runes := GetProcAddress(LDllHandle, 'nk_str_insert_str_runes');
  nk_str_insert_str_utf8 := GetProcAddress(LDllHandle, 'nk_str_insert_str_utf8');
  nk_str_insert_text_char := GetProcAddress(LDllHandle, 'nk_str_insert_text_char');
  nk_str_insert_text_runes := GetProcAddress(LDllHandle, 'nk_str_insert_text_runes');
  nk_str_insert_text_utf8 := GetProcAddress(LDllHandle, 'nk_str_insert_text_utf8');
  nk_str_len := GetProcAddress(LDllHandle, 'nk_str_len');
  nk_str_len_char := GetProcAddress(LDllHandle, 'nk_str_len_char');
  nk_str_remove_chars := GetProcAddress(LDllHandle, 'nk_str_remove_chars');
  nk_str_remove_runes := GetProcAddress(LDllHandle, 'nk_str_remove_runes');
  nk_str_rune_at := GetProcAddress(LDllHandle, 'nk_str_rune_at');
  nk_strfilter := GetProcAddress(LDllHandle, 'nk_strfilter');
  nk_stricmp := GetProcAddress(LDllHandle, 'nk_stricmp');
  nk_stricmpn := GetProcAddress(LDllHandle, 'nk_stricmpn');
  nk_strlen := GetProcAddress(LDllHandle, 'nk_strlen');
  nk_strmatch_fuzzy_string := GetProcAddress(LDllHandle, 'nk_strmatch_fuzzy_string');
  nk_strmatch_fuzzy_text := GetProcAddress(LDllHandle, 'nk_strmatch_fuzzy_text');
  nk_stroke_arc := GetProcAddress(LDllHandle, 'nk_stroke_arc');
  nk_stroke_circle := GetProcAddress(LDllHandle, 'nk_stroke_circle');
  nk_stroke_curve := GetProcAddress(LDllHandle, 'nk_stroke_curve');
  nk_stroke_line := GetProcAddress(LDllHandle, 'nk_stroke_line');
  nk_stroke_polygon := GetProcAddress(LDllHandle, 'nk_stroke_polygon');
  nk_stroke_polyline := GetProcAddress(LDllHandle, 'nk_stroke_polyline');
  nk_stroke_rect := GetProcAddress(LDllHandle, 'nk_stroke_rect');
  nk_stroke_triangle := GetProcAddress(LDllHandle, 'nk_stroke_triangle');
  nk_strtod := GetProcAddress(LDllHandle, 'nk_strtod');
  nk_strtof := GetProcAddress(LDllHandle, 'nk_strtof');
  nk_strtoi := GetProcAddress(LDllHandle, 'nk_strtoi');
  nk_style_default := GetProcAddress(LDllHandle, 'nk_style_default');
  nk_style_from_table := GetProcAddress(LDllHandle, 'nk_style_from_table');
  nk_style_get_color_by_name := GetProcAddress(LDllHandle, 'nk_style_get_color_by_name');
  nk_style_hide_cursor := GetProcAddress(LDllHandle, 'nk_style_hide_cursor');
  nk_style_item_color_ := GetProcAddress(LDllHandle, 'nk_style_item_color');
  nk_style_item_hide := GetProcAddress(LDllHandle, 'nk_style_item_hide');
  nk_style_item_image_ := GetProcAddress(LDllHandle, 'nk_style_item_image');
  nk_style_item_nine_slice_ := GetProcAddress(LDllHandle, 'nk_style_item_nine_slice');
  nk_style_load_all_cursors := GetProcAddress(LDllHandle, 'nk_style_load_all_cursors');
  nk_style_load_cursor := GetProcAddress(LDllHandle, 'nk_style_load_cursor');
  nk_style_pop_color := GetProcAddress(LDllHandle, 'nk_style_pop_color');
  nk_style_pop_flags := GetProcAddress(LDllHandle, 'nk_style_pop_flags');
  nk_style_pop_float := GetProcAddress(LDllHandle, 'nk_style_pop_float');
  nk_style_pop_font := GetProcAddress(LDllHandle, 'nk_style_pop_font');
  nk_style_pop_style_item := GetProcAddress(LDllHandle, 'nk_style_pop_style_item');
  nk_style_pop_vec2 := GetProcAddress(LDllHandle, 'nk_style_pop_vec2');
  nk_style_push_color := GetProcAddress(LDllHandle, 'nk_style_push_color');
  nk_style_push_flags := GetProcAddress(LDllHandle, 'nk_style_push_flags');
  nk_style_push_float := GetProcAddress(LDllHandle, 'nk_style_push_float');
  nk_style_push_font := GetProcAddress(LDllHandle, 'nk_style_push_font');
  nk_style_push_style_item := GetProcAddress(LDllHandle, 'nk_style_push_style_item');
  nk_style_push_vec2 := GetProcAddress(LDllHandle, 'nk_style_push_vec2');
  nk_style_set_cursor := GetProcAddress(LDllHandle, 'nk_style_set_cursor');
  nk_style_set_font := GetProcAddress(LDllHandle, 'nk_style_set_font');
  nk_style_show_cursor := GetProcAddress(LDllHandle, 'nk_style_show_cursor');
  nk_sub9slice_handle := GetProcAddress(LDllHandle, 'nk_sub9slice_handle');
  nk_sub9slice_id := GetProcAddress(LDllHandle, 'nk_sub9slice_id');
  nk_sub9slice_ptr := GetProcAddress(LDllHandle, 'nk_sub9slice_ptr');
  nk_subimage_handle := GetProcAddress(LDllHandle, 'nk_subimage_handle');
  nk_subimage_id := GetProcAddress(LDllHandle, 'nk_subimage_id');
  nk_subimage_ptr := GetProcAddress(LDllHandle, 'nk_subimage_ptr');
  nk_text := GetProcAddress(LDllHandle, 'nk_text');
  nk_text_colored := GetProcAddress(LDllHandle, 'nk_text_colored');
  nk_text_wrap := GetProcAddress(LDllHandle, 'nk_text_wrap');
  nk_text_wrap_colored := GetProcAddress(LDllHandle, 'nk_text_wrap_colored');
  nk_textedit_cut := GetProcAddress(LDllHandle, 'nk_textedit_cut');
  nk_textedit_delete := GetProcAddress(LDllHandle, 'nk_textedit_delete');
  nk_textedit_delete_selection := GetProcAddress(LDllHandle, 'nk_textedit_delete_selection');
  nk_textedit_free := GetProcAddress(LDllHandle, 'nk_textedit_free');
  nk_textedit_init := GetProcAddress(LDllHandle, 'nk_textedit_init');
  nk_textedit_init_default := GetProcAddress(LDllHandle, 'nk_textedit_init_default');
  nk_textedit_init_fixed := GetProcAddress(LDllHandle, 'nk_textedit_init_fixed');
  nk_textedit_paste := GetProcAddress(LDllHandle, 'nk_textedit_paste');
  nk_textedit_redo := GetProcAddress(LDllHandle, 'nk_textedit_redo');
  nk_textedit_select_all := GetProcAddress(LDllHandle, 'nk_textedit_select_all');
  nk_textedit_text := GetProcAddress(LDllHandle, 'nk_textedit_text');
  nk_textedit_undo := GetProcAddress(LDllHandle, 'nk_textedit_undo');
  nk_tooltip := GetProcAddress(LDllHandle, 'nk_tooltip');
  nk_tooltip_begin := GetProcAddress(LDllHandle, 'nk_tooltip_begin');
  nk_tooltip_end := GetProcAddress(LDllHandle, 'nk_tooltip_end');
  nk_tooltipf := GetProcAddress(LDllHandle, 'nk_tooltipf');
  nk_tooltipfv := GetProcAddress(LDllHandle, 'nk_tooltipfv');
  nk_tree_element_image_push_hashed := GetProcAddress(LDllHandle, 'nk_tree_element_image_push_hashed');
  nk_tree_element_pop := GetProcAddress(LDllHandle, 'nk_tree_element_pop');
  nk_tree_element_push_hashed := GetProcAddress(LDllHandle, 'nk_tree_element_push_hashed');
  nk_tree_image_push_hashed := GetProcAddress(LDllHandle, 'nk_tree_image_push_hashed');
  nk_tree_pop := GetProcAddress(LDllHandle, 'nk_tree_pop');
  nk_tree_push_hashed := GetProcAddress(LDllHandle, 'nk_tree_push_hashed');
  nk_tree_state_image_push := GetProcAddress(LDllHandle, 'nk_tree_state_image_push');
  nk_tree_state_pop := GetProcAddress(LDllHandle, 'nk_tree_state_pop');
  nk_tree_state_push := GetProcAddress(LDllHandle, 'nk_tree_state_push');
  nk_triangle_from_direction := GetProcAddress(LDllHandle, 'nk_triangle_from_direction');
  nk_utf_at := GetProcAddress(LDllHandle, 'nk_utf_at');
  nk_utf_decode := GetProcAddress(LDllHandle, 'nk_utf_decode');
  nk_utf_encode := GetProcAddress(LDllHandle, 'nk_utf_encode');
  nk_utf_len := GetProcAddress(LDllHandle, 'nk_utf_len');
  nk_value_bool := GetProcAddress(LDllHandle, 'nk_value_bool');
  nk_value_color_byte := GetProcAddress(LDllHandle, 'nk_value_color_byte');
  nk_value_color_float := GetProcAddress(LDllHandle, 'nk_value_color_float');
  nk_value_color_hex := GetProcAddress(LDllHandle, 'nk_value_color_hex');
  nk_value_float := GetProcAddress(LDllHandle, 'nk_value_float');
  nk_value_int := GetProcAddress(LDllHandle, 'nk_value_int');
  nk_value_uint := GetProcAddress(LDllHandle, 'nk_value_uint');
  nk_vec2_ := GetProcAddress(LDllHandle, 'nk_vec2');
  nk_vec2i_ := GetProcAddress(LDllHandle, 'nk_vec2i');
  nk_vec2iv := GetProcAddress(LDllHandle, 'nk_vec2iv');
  nk_vec2v := GetProcAddress(LDllHandle, 'nk_vec2v');
  nk_widget := GetProcAddress(LDllHandle, 'nk_widget');
  nk_widget_bounds := GetProcAddress(LDllHandle, 'nk_widget_bounds');
  nk_widget_fitting := GetProcAddress(LDllHandle, 'nk_widget_fitting');
  nk_widget_has_mouse_click_down := GetProcAddress(LDllHandle, 'nk_widget_has_mouse_click_down');
  nk_widget_height := GetProcAddress(LDllHandle, 'nk_widget_height');
  nk_widget_is_hovered := GetProcAddress(LDllHandle, 'nk_widget_is_hovered');
  nk_widget_is_mouse_clicked := GetProcAddress(LDllHandle, 'nk_widget_is_mouse_clicked');
  nk_widget_position := GetProcAddress(LDllHandle, 'nk_widget_position');
  nk_widget_size := GetProcAddress(LDllHandle, 'nk_widget_size');
  nk_widget_width := GetProcAddress(LDllHandle, 'nk_widget_width');
  nk_window_close := GetProcAddress(LDllHandle, 'nk_window_close');
  nk_window_collapse := GetProcAddress(LDllHandle, 'nk_window_collapse');
  nk_window_collapse_if := GetProcAddress(LDllHandle, 'nk_window_collapse_if');
  nk_window_find := GetProcAddress(LDllHandle, 'nk_window_find');
  nk_window_get_bounds := GetProcAddress(LDllHandle, 'nk_window_get_bounds');
  nk_window_get_canvas := GetProcAddress(LDllHandle, 'nk_window_get_canvas');
  nk_window_get_content_region := GetProcAddress(LDllHandle, 'nk_window_get_content_region');
  nk_window_get_content_region_max := GetProcAddress(LDllHandle, 'nk_window_get_content_region_max');
  nk_window_get_content_region_min := GetProcAddress(LDllHandle, 'nk_window_get_content_region_min');
  nk_window_get_content_region_size := GetProcAddress(LDllHandle, 'nk_window_get_content_region_size');
  nk_window_get_height := GetProcAddress(LDllHandle, 'nk_window_get_height');
  nk_window_get_panel := GetProcAddress(LDllHandle, 'nk_window_get_panel');
  nk_window_get_position := GetProcAddress(LDllHandle, 'nk_window_get_position');
  nk_window_get_scroll := GetProcAddress(LDllHandle, 'nk_window_get_scroll');
  nk_window_get_size := GetProcAddress(LDllHandle, 'nk_window_get_size');
  nk_window_get_width := GetProcAddress(LDllHandle, 'nk_window_get_width');
  nk_window_has_focus := GetProcAddress(LDllHandle, 'nk_window_has_focus');
  nk_window_is_active := GetProcAddress(LDllHandle, 'nk_window_is_active');
  nk_window_is_any_hovered := GetProcAddress(LDllHandle, 'nk_window_is_any_hovered');
  nk_window_is_closed := GetProcAddress(LDllHandle, 'nk_window_is_closed');
  nk_window_is_collapsed := GetProcAddress(LDllHandle, 'nk_window_is_collapsed');
  nk_window_is_hidden := GetProcAddress(LDllHandle, 'nk_window_is_hidden');
  nk_window_is_hovered := GetProcAddress(LDllHandle, 'nk_window_is_hovered');
  nk_window_set_bounds := GetProcAddress(LDllHandle, 'nk_window_set_bounds');
  nk_window_set_focus := GetProcAddress(LDllHandle, 'nk_window_set_focus');
  nk_window_set_position := GetProcAddress(LDllHandle, 'nk_window_set_position');
  nk_window_set_scroll := GetProcAddress(LDllHandle, 'nk_window_set_scroll');
  nk_window_set_size := GetProcAddress(LDllHandle, 'nk_window_set_size');
  nk_window_show := GetProcAddress(LDllHandle, 'nk_window_show');
  nk_window_show_if := GetProcAddress(LDllHandle, 'nk_window_show_if');
  PHYSFS_addToSearchPath := GetProcAddress(LDllHandle, 'PHYSFS_addToSearchPath');
  PHYSFS_caseFold := GetProcAddress(LDllHandle, 'PHYSFS_caseFold');
  PHYSFS_close := GetProcAddress(LDllHandle, 'PHYSFS_close');
  PHYSFS_deinit := GetProcAddress(LDllHandle, 'PHYSFS_deinit');
  PHYSFS_delete := GetProcAddress(LDllHandle, 'PHYSFS_delete');
  PHYSFS_deregisterArchiver := GetProcAddress(LDllHandle, 'PHYSFS_deregisterArchiver');
  PHYSFS_enumerate := GetProcAddress(LDllHandle, 'PHYSFS_enumerate');
  PHYSFS_enumerateFiles := GetProcAddress(LDllHandle, 'PHYSFS_enumerateFiles');
  PHYSFS_enumerateFilesCallback := GetProcAddress(LDllHandle, 'PHYSFS_enumerateFilesCallback');
  PHYSFS_eof := GetProcAddress(LDllHandle, 'PHYSFS_eof');
  PHYSFS_exists := GetProcAddress(LDllHandle, 'PHYSFS_exists');
  PHYSFS_fileLength := GetProcAddress(LDllHandle, 'PHYSFS_fileLength');
  PHYSFS_flush := GetProcAddress(LDllHandle, 'PHYSFS_flush');
  PHYSFS_freeList := GetProcAddress(LDllHandle, 'PHYSFS_freeList');
  PHYSFS_getAllocator := GetProcAddress(LDllHandle, 'PHYSFS_getAllocator');
  PHYSFS_getBaseDir := GetProcAddress(LDllHandle, 'PHYSFS_getBaseDir');
  PHYSFS_getCdRomDirs := GetProcAddress(LDllHandle, 'PHYSFS_getCdRomDirs');
  PHYSFS_getCdRomDirsCallback := GetProcAddress(LDllHandle, 'PHYSFS_getCdRomDirsCallback');
  PHYSFS_getDirSeparator := GetProcAddress(LDllHandle, 'PHYSFS_getDirSeparator');
  PHYSFS_getErrorByCode := GetProcAddress(LDllHandle, 'PHYSFS_getErrorByCode');
  PHYSFS_getLastError := GetProcAddress(LDllHandle, 'PHYSFS_getLastError');
  PHYSFS_getLastErrorCode := GetProcAddress(LDllHandle, 'PHYSFS_getLastErrorCode');
  PHYSFS_getLastModTime := GetProcAddress(LDllHandle, 'PHYSFS_getLastModTime');
  PHYSFS_getLinkedVersion := GetProcAddress(LDllHandle, 'PHYSFS_getLinkedVersion');
  PHYSFS_getMountPoint := GetProcAddress(LDllHandle, 'PHYSFS_getMountPoint');
  PHYSFS_getPrefDir := GetProcAddress(LDllHandle, 'PHYSFS_getPrefDir');
  PHYSFS_getRealDir := GetProcAddress(LDllHandle, 'PHYSFS_getRealDir');
  PHYSFS_getSearchPath := GetProcAddress(LDllHandle, 'PHYSFS_getSearchPath');
  PHYSFS_getSearchPathCallback := GetProcAddress(LDllHandle, 'PHYSFS_getSearchPathCallback');
  PHYSFS_getUserDir := GetProcAddress(LDllHandle, 'PHYSFS_getUserDir');
  PHYSFS_getWriteDir := GetProcAddress(LDllHandle, 'PHYSFS_getWriteDir');
  PHYSFS_init := GetProcAddress(LDllHandle, 'PHYSFS_init');
  PHYSFS_isDirectory := GetProcAddress(LDllHandle, 'PHYSFS_isDirectory');
  PHYSFS_isInit := GetProcAddress(LDllHandle, 'PHYSFS_isInit');
  PHYSFS_isSymbolicLink := GetProcAddress(LDllHandle, 'PHYSFS_isSymbolicLink');
  PHYSFS_mkdir := GetProcAddress(LDllHandle, 'PHYSFS_mkdir');
  PHYSFS_mount := GetProcAddress(LDllHandle, 'PHYSFS_mount');
  PHYSFS_mountHandle := GetProcAddress(LDllHandle, 'PHYSFS_mountHandle');
  PHYSFS_mountIo := GetProcAddress(LDllHandle, 'PHYSFS_mountIo');
  PHYSFS_mountMemory := GetProcAddress(LDllHandle, 'PHYSFS_mountMemory');
  PHYSFS_openAppend := GetProcAddress(LDllHandle, 'PHYSFS_openAppend');
  PHYSFS_openRead := GetProcAddress(LDllHandle, 'PHYSFS_openRead');
  PHYSFS_openWrite := GetProcAddress(LDllHandle, 'PHYSFS_openWrite');
  PHYSFS_permitSymbolicLinks := GetProcAddress(LDllHandle, 'PHYSFS_permitSymbolicLinks');
  PHYSFS_read := GetProcAddress(LDllHandle, 'PHYSFS_read');
  PHYSFS_readBytes := GetProcAddress(LDllHandle, 'PHYSFS_readBytes');
  PHYSFS_readSBE16 := GetProcAddress(LDllHandle, 'PHYSFS_readSBE16');
  PHYSFS_readSBE32 := GetProcAddress(LDllHandle, 'PHYSFS_readSBE32');
  PHYSFS_readSBE64 := GetProcAddress(LDllHandle, 'PHYSFS_readSBE64');
  PHYSFS_readSLE16 := GetProcAddress(LDllHandle, 'PHYSFS_readSLE16');
  PHYSFS_readSLE32 := GetProcAddress(LDllHandle, 'PHYSFS_readSLE32');
  PHYSFS_readSLE64 := GetProcAddress(LDllHandle, 'PHYSFS_readSLE64');
  PHYSFS_readUBE16 := GetProcAddress(LDllHandle, 'PHYSFS_readUBE16');
  PHYSFS_readUBE32 := GetProcAddress(LDllHandle, 'PHYSFS_readUBE32');
  PHYSFS_readUBE64 := GetProcAddress(LDllHandle, 'PHYSFS_readUBE64');
  PHYSFS_readULE16 := GetProcAddress(LDllHandle, 'PHYSFS_readULE16');
  PHYSFS_readULE32 := GetProcAddress(LDllHandle, 'PHYSFS_readULE32');
  PHYSFS_readULE64 := GetProcAddress(LDllHandle, 'PHYSFS_readULE64');
  PHYSFS_registerArchiver := GetProcAddress(LDllHandle, 'PHYSFS_registerArchiver');
  PHYSFS_removeFromSearchPath := GetProcAddress(LDllHandle, 'PHYSFS_removeFromSearchPath');
  PHYSFS_seek := GetProcAddress(LDllHandle, 'PHYSFS_seek');
  PHYSFS_setAllocator := GetProcAddress(LDllHandle, 'PHYSFS_setAllocator');
  PHYSFS_setBuffer := GetProcAddress(LDllHandle, 'PHYSFS_setBuffer');
  PHYSFS_setErrorCode := GetProcAddress(LDllHandle, 'PHYSFS_setErrorCode');
  PHYSFS_setSaneConfig := GetProcAddress(LDllHandle, 'PHYSFS_setSaneConfig');
  PHYSFS_setWriteDir := GetProcAddress(LDllHandle, 'PHYSFS_setWriteDir');
  PHYSFS_stat := GetProcAddress(LDllHandle, 'PHYSFS_stat');
  PHYSFS_supportedArchiveTypes := GetProcAddress(LDllHandle, 'PHYSFS_supportedArchiveTypes');
  PHYSFS_swapSBE16 := GetProcAddress(LDllHandle, 'PHYSFS_swapSBE16');
  PHYSFS_swapSBE32 := GetProcAddress(LDllHandle, 'PHYSFS_swapSBE32');
  PHYSFS_swapSBE64 := GetProcAddress(LDllHandle, 'PHYSFS_swapSBE64');
  PHYSFS_swapSLE16 := GetProcAddress(LDllHandle, 'PHYSFS_swapSLE16');
  PHYSFS_swapSLE32 := GetProcAddress(LDllHandle, 'PHYSFS_swapSLE32');
  PHYSFS_swapSLE64 := GetProcAddress(LDllHandle, 'PHYSFS_swapSLE64');
  PHYSFS_swapUBE16 := GetProcAddress(LDllHandle, 'PHYSFS_swapUBE16');
  PHYSFS_swapUBE32 := GetProcAddress(LDllHandle, 'PHYSFS_swapUBE32');
  PHYSFS_swapUBE64 := GetProcAddress(LDllHandle, 'PHYSFS_swapUBE64');
  PHYSFS_swapULE16 := GetProcAddress(LDllHandle, 'PHYSFS_swapULE16');
  PHYSFS_swapULE32 := GetProcAddress(LDllHandle, 'PHYSFS_swapULE32');
  PHYSFS_swapULE64 := GetProcAddress(LDllHandle, 'PHYSFS_swapULE64');
  PHYSFS_symbolicLinksPermitted := GetProcAddress(LDllHandle, 'PHYSFS_symbolicLinksPermitted');
  PHYSFS_tell := GetProcAddress(LDllHandle, 'PHYSFS_tell');
  PHYSFS_ucs4stricmp := GetProcAddress(LDllHandle, 'PHYSFS_ucs4stricmp');
  PHYSFS_unmount := GetProcAddress(LDllHandle, 'PHYSFS_unmount');
  PHYSFS_utf16stricmp := GetProcAddress(LDllHandle, 'PHYSFS_utf16stricmp');
  PHYSFS_utf8FromLatin1 := GetProcAddress(LDllHandle, 'PHYSFS_utf8FromLatin1');
  PHYSFS_utf8FromUcs2 := GetProcAddress(LDllHandle, 'PHYSFS_utf8FromUcs2');
  PHYSFS_utf8FromUcs4 := GetProcAddress(LDllHandle, 'PHYSFS_utf8FromUcs4');
  PHYSFS_utf8FromUtf16 := GetProcAddress(LDllHandle, 'PHYSFS_utf8FromUtf16');
  PHYSFS_utf8stricmp := GetProcAddress(LDllHandle, 'PHYSFS_utf8stricmp');
  PHYSFS_utf8ToUcs2 := GetProcAddress(LDllHandle, 'PHYSFS_utf8ToUcs2');
  PHYSFS_utf8ToUcs4 := GetProcAddress(LDllHandle, 'PHYSFS_utf8ToUcs4');
  PHYSFS_utf8ToUtf16 := GetProcAddress(LDllHandle, 'PHYSFS_utf8ToUtf16');
  PHYSFS_write := GetProcAddress(LDllHandle, 'PHYSFS_write');
  PHYSFS_writeBytes := GetProcAddress(LDllHandle, 'PHYSFS_writeBytes');
  PHYSFS_writeSBE16 := GetProcAddress(LDllHandle, 'PHYSFS_writeSBE16');
  PHYSFS_writeSBE32 := GetProcAddress(LDllHandle, 'PHYSFS_writeSBE32');
  PHYSFS_writeSBE64 := GetProcAddress(LDllHandle, 'PHYSFS_writeSBE64');
  PHYSFS_writeSLE16 := GetProcAddress(LDllHandle, 'PHYSFS_writeSLE16');
  PHYSFS_writeSLE32 := GetProcAddress(LDllHandle, 'PHYSFS_writeSLE32');
  PHYSFS_writeSLE64 := GetProcAddress(LDllHandle, 'PHYSFS_writeSLE64');
  PHYSFS_writeUBE16 := GetProcAddress(LDllHandle, 'PHYSFS_writeUBE16');
  PHYSFS_writeUBE32 := GetProcAddress(LDllHandle, 'PHYSFS_writeUBE32');
  PHYSFS_writeUBE64 := GetProcAddress(LDllHandle, 'PHYSFS_writeUBE64');
  PHYSFS_writeULE16 := GetProcAddress(LDllHandle, 'PHYSFS_writeULE16');
  PHYSFS_writeULE32 := GetProcAddress(LDllHandle, 'PHYSFS_writeULE32');
  PHYSFS_writeULE64 := GetProcAddress(LDllHandle, 'PHYSFS_writeULE64');
  zipClose := GetProcAddress(LDllHandle, 'zipClose');
  zipCloseFileInZip := GetProcAddress(LDllHandle, 'zipCloseFileInZip');
  zipOpen := GetProcAddress(LDllHandle, 'zipOpen');
  zipOpenNewFileInZip3 := GetProcAddress(LDllHandle, 'zipOpenNewFileInZip3');
  zipWriteInFileInZip := GetProcAddress(LDllHandle, 'zipWriteInFileInZip');
end;

procedure UnloadDLL;
begin
  FreeLibrary(LDllHandle);
  TFile.Delete(LDllName);
end;

initialization
  ReportMemoryLeaksOnShutdown := True;
  LoadDLL;

finalization
  UnloadDLL;

end.
